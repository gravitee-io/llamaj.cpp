// Generated by jextract

package io.gravitee.llama.cpp.macosx.aarch64;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet lang=c :
 * struct __sFILE {
 *     unsigned char* _p;
 *     int _r;
 *     int _w;
 *     short _flags;
 *     short _file;
 *     struct __sbuf _bf;
 *     int _lbfsize;
 *     void* _cookie;
 *     int (*_close)(void*);
 *     int (*_read)(void*,char*,int);
 *     long long (*_seek)(void*,long long,int);
 *     int (*_write)(void*,char*,int);
 *     struct __sbuf _ub;
 *     struct __sFILEX* _extra;
 *     int _ur;
 *     unsigned char _ubuf[3];
 *     unsigned char _nbuf[1];
 *     struct __sbuf _lb;
 *     int _blksize;
 *     long long _offset;
 * };
 * }
 */
public class __sFILE {

    public static MemoryLayout $LAYOUT() {
        return constants$6.const$3;
    }
    public static VarHandle _p$VH() {
        return constants$6.const$4;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char* _p;
     * }
     */
    public static MemorySegment _p$get(MemorySegment seg) {
        return (MemorySegment)constants$6.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char* _p;
     * }
     */
    public static void _p$set(MemorySegment seg, MemorySegment x) {
        constants$6.const$4.set(seg, x);
    }
    public static MemorySegment _p$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$6.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void _p$set(MemorySegment seg, long index, MemorySegment x) {
        constants$6.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle _r$VH() {
        return constants$6.const$5;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * int _r;
     * }
     */
    public static int _r$get(MemorySegment seg) {
        return (int)constants$6.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * int _r;
     * }
     */
    public static void _r$set(MemorySegment seg, int x) {
        constants$6.const$5.set(seg, x);
    }
    public static int _r$get(MemorySegment seg, long index) {
        return (int)constants$6.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _r$set(MemorySegment seg, long index, int x) {
        constants$6.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle _w$VH() {
        return constants$7.const$0;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * int _w;
     * }
     */
    public static int _w$get(MemorySegment seg) {
        return (int)constants$7.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * int _w;
     * }
     */
    public static void _w$set(MemorySegment seg, int x) {
        constants$7.const$0.set(seg, x);
    }
    public static int _w$get(MemorySegment seg, long index) {
        return (int)constants$7.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void _w$set(MemorySegment seg, long index, int x) {
        constants$7.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle _flags$VH() {
        return constants$7.const$1;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * short _flags;
     * }
     */
    public static short _flags$get(MemorySegment seg) {
        return (short)constants$7.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * short _flags;
     * }
     */
    public static void _flags$set(MemorySegment seg, short x) {
        constants$7.const$1.set(seg, x);
    }
    public static short _flags$get(MemorySegment seg, long index) {
        return (short)constants$7.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _flags$set(MemorySegment seg, long index, short x) {
        constants$7.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle _file$VH() {
        return constants$7.const$2;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * short _file;
     * }
     */
    public static short _file$get(MemorySegment seg) {
        return (short)constants$7.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * short _file;
     * }
     */
    public static void _file$set(MemorySegment seg, short x) {
        constants$7.const$2.set(seg, x);
    }
    public static short _file$get(MemorySegment seg, long index) {
        return (short)constants$7.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void _file$set(MemorySegment seg, long index, short x) {
        constants$7.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment _bf$slice(MemorySegment seg) {
        return seg.asSlice(24, 16);
    }
    public static VarHandle _lbfsize$VH() {
        return constants$7.const$3;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * int _lbfsize;
     * }
     */
    public static int _lbfsize$get(MemorySegment seg) {
        return (int)constants$7.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * int _lbfsize;
     * }
     */
    public static void _lbfsize$set(MemorySegment seg, int x) {
        constants$7.const$3.set(seg, x);
    }
    public static int _lbfsize$get(MemorySegment seg, long index) {
        return (int)constants$7.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _lbfsize$set(MemorySegment seg, long index, int x) {
        constants$7.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle _cookie$VH() {
        return constants$7.const$4;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * void* _cookie;
     * }
     */
    public static MemorySegment _cookie$get(MemorySegment seg) {
        return (MemorySegment)constants$7.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * void* _cookie;
     * }
     */
    public static void _cookie$set(MemorySegment seg, MemorySegment x) {
        constants$7.const$4.set(seg, x);
    }
    public static MemorySegment _cookie$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$7.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void _cookie$set(MemorySegment seg, long index, MemorySegment x) {
        constants$7.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet lang=c :
 * int (*_close)(void*);
     * }
     */
    public interface _close {

        int apply(MemorySegment _x0);
        static MemorySegment allocate(_close fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$7.const$5, fi, constants$5.const$4, scope);
        }
        static _close ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (MemorySegment __x0) -> {
                try {
                    return (int)constants$8.const$0.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _close$VH() {
        return constants$8.const$1;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*_close)(void*);
     * }
     */
    public static MemorySegment _close$get(MemorySegment seg) {
        return (MemorySegment)constants$8.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*_close)(void*);
     * }
     */
    public static void _close$set(MemorySegment seg, MemorySegment x) {
        constants$8.const$1.set(seg, x);
    }
    public static MemorySegment _close$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$8.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _close$set(MemorySegment seg, long index, MemorySegment x) {
        constants$8.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _close _close(MemorySegment segment, Arena scope) {
        return _close.ofAddress(_close$get(segment), scope);
    }
    /**
     * {@snippet lang=c :
 * int (*_read)(void*,char*,int);
     * }
     */
    public interface _read {

        int apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        static MemorySegment allocate(_read fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$8.const$2, fi, constants$5.const$0, scope);
        }
        static _read ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (MemorySegment __x0, MemorySegment __x1, int __x2) -> {
                try {
                    return (int)constants$8.const$3.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _read$VH() {
        return constants$8.const$4;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*_read)(void*,char*,int);
     * }
     */
    public static MemorySegment _read$get(MemorySegment seg) {
        return (MemorySegment)constants$8.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*_read)(void*,char*,int);
     * }
     */
    public static void _read$set(MemorySegment seg, MemorySegment x) {
        constants$8.const$4.set(seg, x);
    }
    public static MemorySegment _read$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$8.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void _read$set(MemorySegment seg, long index, MemorySegment x) {
        constants$8.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static _read _read(MemorySegment segment, Arena scope) {
        return _read.ofAddress(_read$get(segment), scope);
    }
    /**
     * {@snippet lang=c :
 * long long (*_seek)(void*,long long,int);
     * }
     */
    public interface _seek {

        long apply(MemorySegment _x0, long _x1, int _x2);
        static MemorySegment allocate(_seek fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$9.const$0, fi, constants$8.const$5, scope);
        }
        static _seek ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (MemorySegment __x0, long __x1, int __x2) -> {
                try {
                    return (long)constants$9.const$1.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _seek$VH() {
        return constants$9.const$2;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * long long (*_seek)(void*,long long,int);
     * }
     */
    public static MemorySegment _seek$get(MemorySegment seg) {
        return (MemorySegment)constants$9.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * long long (*_seek)(void*,long long,int);
     * }
     */
    public static void _seek$set(MemorySegment seg, MemorySegment x) {
        constants$9.const$2.set(seg, x);
    }
    public static MemorySegment _seek$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$9.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void _seek$set(MemorySegment seg, long index, MemorySegment x) {
        constants$9.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static _seek _seek(MemorySegment segment, Arena scope) {
        return _seek.ofAddress(_seek$get(segment), scope);
    }
    /**
     * {@snippet lang=c :
 * int (*_write)(void*,char*,int);
     * }
     */
    public interface _write {

        int apply(MemorySegment _x0, MemorySegment _x1, int _x2);
        static MemorySegment allocate(_write fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$9.const$3, fi, constants$5.const$0, scope);
        }
        static _write ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (MemorySegment __x0, MemorySegment __x1, int __x2) -> {
                try {
                    return (int)constants$8.const$3.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _write$VH() {
        return constants$9.const$4;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * int (*_write)(void*,char*,int);
     * }
     */
    public static MemorySegment _write$get(MemorySegment seg) {
        return (MemorySegment)constants$9.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * int (*_write)(void*,char*,int);
     * }
     */
    public static void _write$set(MemorySegment seg, MemorySegment x) {
        constants$9.const$4.set(seg, x);
    }
    public static MemorySegment _write$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$9.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void _write$set(MemorySegment seg, long index, MemorySegment x) {
        constants$9.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static _write _write(MemorySegment segment, Arena scope) {
        return _write.ofAddress(_write$get(segment), scope);
    }
    public static MemorySegment _ub$slice(MemorySegment seg) {
        return seg.asSlice(88, 16);
    }
    public static VarHandle _extra$VH() {
        return constants$9.const$5;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct __sFILEX* _extra;
     * }
     */
    public static MemorySegment _extra$get(MemorySegment seg) {
        return (MemorySegment)constants$9.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct __sFILEX* _extra;
     * }
     */
    public static void _extra$set(MemorySegment seg, MemorySegment x) {
        constants$9.const$5.set(seg, x);
    }
    public static MemorySegment _extra$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$9.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _extra$set(MemorySegment seg, long index, MemorySegment x) {
        constants$9.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle _ur$VH() {
        return constants$10.const$0;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * int _ur;
     * }
     */
    public static int _ur$get(MemorySegment seg) {
        return (int)constants$10.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * int _ur;
     * }
     */
    public static void _ur$set(MemorySegment seg, int x) {
        constants$10.const$0.set(seg, x);
    }
    public static int _ur$get(MemorySegment seg, long index) {
        return (int)constants$10.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void _ur$set(MemorySegment seg, long index, int x) {
        constants$10.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment _ubuf$slice(MemorySegment seg) {
        return seg.asSlice(116, 3);
    }
    public static MemorySegment _nbuf$slice(MemorySegment seg) {
        return seg.asSlice(119, 1);
    }
    public static MemorySegment _lb$slice(MemorySegment seg) {
        return seg.asSlice(120, 16);
    }
    public static VarHandle _blksize$VH() {
        return constants$10.const$1;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * int _blksize;
     * }
     */
    public static int _blksize$get(MemorySegment seg) {
        return (int)constants$10.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * int _blksize;
     * }
     */
    public static void _blksize$set(MemorySegment seg, int x) {
        constants$10.const$1.set(seg, x);
    }
    public static int _blksize$get(MemorySegment seg, long index) {
        return (int)constants$10.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _blksize$set(MemorySegment seg, long index, int x) {
        constants$10.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle _offset$VH() {
        return constants$10.const$2;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * long long _offset;
     * }
     */
    public static long _offset$get(MemorySegment seg) {
        return (long)constants$10.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * long long _offset;
     * }
     */
    public static void _offset$set(MemorySegment seg, long x) {
        constants$10.const$2.set(seg, x);
    }
    public static long _offset$get(MemorySegment seg, long index) {
        return (long)constants$10.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void _offset$set(MemorySegment seg, long index, long x) {
        constants$10.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


