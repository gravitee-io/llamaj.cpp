// Generated by jextract

package io.gravitee.llama.cpp.macosx.aarch64;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class llama_h extends llama_h_1 {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfLong C_LONG = JAVA_LONG;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    /**
     * {@snippet lang=c :
     * #define __bool_true_false_are_defined 1
     * }
     */
    public static int __bool_true_false_are_defined() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * #define true 1
     * }
     */
    public static int true_() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * #define false 0
     * }
     */
    public static int false_() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return (int)64L;
    }
    /**
     * {@snippet lang=c :
     * #define __has_safe_buffers 1
     * }
     */
    public static int __has_safe_buffers() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_ONLY_64_BIT_INO_T() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int __DARWIN_ONLY_UNIX_CONFORMANCE() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_VERS_1050 1
     * }
     */
    public static int __DARWIN_ONLY_VERS_1050() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_UNIX03 1
     * }
     */
    public static int __DARWIN_UNIX03() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_64_BIT_INO_T() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_VERS_1050 1
     * }
     */
    public static int __DARWIN_VERS_1050() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NON_CANCELABLE 0
     * }
     */
    public static int __DARWIN_NON_CANCELABLE() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * #define __STDC_WANT_LIB_EXT1__ 1
     * }
     */
    public static int __STDC_WANT_LIB_EXT1__() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NO_LONG_LONG 0
     * }
     */
    public static int __DARWIN_NO_LONG_LONG() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_64_BIT_INODE() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_64_BIT_INODE() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_VERS_1050 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_VERS_1050() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_UNIX_CONFORMANCE 3
     * }
     */
    public static int _DARWIN_FEATURE_UNIX_CONFORMANCE() {
        return (int)3L;
    }
    /**
     * {@snippet lang=c :
     * #define __has_ptrcheck 0
     * }
     */
    public static int __has_ptrcheck() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * #define USE_CLANG_TYPES 0
     * }
     */
    public static int USE_CLANG_TYPES() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_SIZE__ 8176
     * }
     */
    public static int __PTHREAD_SIZE__() {
        return (int)8176L;
    }
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_ATTR_SIZE__ 56
     * }
     */
    public static int __PTHREAD_ATTR_SIZE__() {
        return (int)56L;
    }
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_MUTEXATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_MUTEXATTR_SIZE__() {
        return (int)8L;
    }
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_MUTEX_SIZE__ 56
     * }
     */
    public static int __PTHREAD_MUTEX_SIZE__() {
        return (int)56L;
    }
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_CONDATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_CONDATTR_SIZE__() {
        return (int)8L;
    }
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_COND_SIZE__ 40
     * }
     */
    public static int __PTHREAD_COND_SIZE__() {
        return (int)40L;
    }
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_ONCE_SIZE__ 8
     * }
     */
    public static int __PTHREAD_ONCE_SIZE__() {
        return (int)8L;
    }
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCK_SIZE__ 192
     * }
     */
    public static int __PTHREAD_RWLOCK_SIZE__() {
        return (int)192L;
    }
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCKATTR_SIZE__ 16
     * }
     */
    public static int __PTHREAD_RWLOCKATTR_SIZE__() {
        return (int)16L;
    }
    /**
     * {@snippet lang=c :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet lang=c :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet lang=c :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet lang=c :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet lang=c :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED() {
        return (int)100000L;
    }
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_MACOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_MACOS() {
        return (int)100000L;
    }
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_IOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_IOS() {
        return (int)100000L;
    }
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_MACCATALYST 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_MACCATALYST() {
        return (int)100000L;
    }
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_WATCHOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_WATCHOS() {
        return (int)100000L;
    }
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_TVOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_TVOS() {
        return (int)100000L;
    }
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_DRIVERKIT 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_DRIVERKIT() {
        return (int)100000L;
    }
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_VISIONOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_VISIONOS() {
        return (int)100000L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_0 1000
     * }
     */
    public static int __MAC_10_0() {
        return (int)1000L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_1 1010
     * }
     */
    public static int __MAC_10_1() {
        return (int)1010L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_2 1020
     * }
     */
    public static int __MAC_10_2() {
        return (int)1020L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_3 1030
     * }
     */
    public static int __MAC_10_3() {
        return (int)1030L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_4 1040
     * }
     */
    public static int __MAC_10_4() {
        return (int)1040L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_5 1050
     * }
     */
    public static int __MAC_10_5() {
        return (int)1050L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_6 1060
     * }
     */
    public static int __MAC_10_6() {
        return (int)1060L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_7 1070
     * }
     */
    public static int __MAC_10_7() {
        return (int)1070L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_8 1080
     * }
     */
    public static int __MAC_10_8() {
        return (int)1080L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_9 1090
     * }
     */
    public static int __MAC_10_9() {
        return (int)1090L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_10 101000
     * }
     */
    public static int __MAC_10_10() {
        return (int)101000L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_10_2 101002
     * }
     */
    public static int __MAC_10_10_2() {
        return (int)101002L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_10_3 101003
     * }
     */
    public static int __MAC_10_10_3() {
        return (int)101003L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_11 101100
     * }
     */
    public static int __MAC_10_11() {
        return (int)101100L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_11_2 101102
     * }
     */
    public static int __MAC_10_11_2() {
        return (int)101102L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_11_3 101103
     * }
     */
    public static int __MAC_10_11_3() {
        return (int)101103L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_11_4 101104
     * }
     */
    public static int __MAC_10_11_4() {
        return (int)101104L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_12 101200
     * }
     */
    public static int __MAC_10_12() {
        return (int)101200L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_12_1 101201
     * }
     */
    public static int __MAC_10_12_1() {
        return (int)101201L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_12_2 101202
     * }
     */
    public static int __MAC_10_12_2() {
        return (int)101202L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_12_4 101204
     * }
     */
    public static int __MAC_10_12_4() {
        return (int)101204L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_13 101300
     * }
     */
    public static int __MAC_10_13() {
        return (int)101300L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_13_1 101301
     * }
     */
    public static int __MAC_10_13_1() {
        return (int)101301L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_13_2 101302
     * }
     */
    public static int __MAC_10_13_2() {
        return (int)101302L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_13_4 101304
     * }
     */
    public static int __MAC_10_13_4() {
        return (int)101304L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_14 101400
     * }
     */
    public static int __MAC_10_14() {
        return (int)101400L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_14_1 101401
     * }
     */
    public static int __MAC_10_14_1() {
        return (int)101401L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_14_4 101404
     * }
     */
    public static int __MAC_10_14_4() {
        return (int)101404L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_14_5 101405
     * }
     */
    public static int __MAC_10_14_5() {
        return (int)101405L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_14_6 101406
     * }
     */
    public static int __MAC_10_14_6() {
        return (int)101406L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_15 101500
     * }
     */
    public static int __MAC_10_15() {
        return (int)101500L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_15_1 101501
     * }
     */
    public static int __MAC_10_15_1() {
        return (int)101501L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_15_4 101504
     * }
     */
    public static int __MAC_10_15_4() {
        return (int)101504L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_10_16 101600
     * }
     */
    public static int __MAC_10_16() {
        return (int)101600L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_11_0 110000
     * }
     */
    public static int __MAC_11_0() {
        return (int)110000L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_11_1 110100
     * }
     */
    public static int __MAC_11_1() {
        return (int)110100L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_11_3 110300
     * }
     */
    public static int __MAC_11_3() {
        return (int)110300L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_11_4 110400
     * }
     */
    public static int __MAC_11_4() {
        return (int)110400L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_11_5 110500
     * }
     */
    public static int __MAC_11_5() {
        return (int)110500L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_11_6 110600
     * }
     */
    public static int __MAC_11_6() {
        return (int)110600L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_12_0 120000
     * }
     */
    public static int __MAC_12_0() {
        return (int)120000L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_12_1 120100
     * }
     */
    public static int __MAC_12_1() {
        return (int)120100L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_12_2 120200
     * }
     */
    public static int __MAC_12_2() {
        return (int)120200L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_12_3 120300
     * }
     */
    public static int __MAC_12_3() {
        return (int)120300L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_12_4 120400
     * }
     */
    public static int __MAC_12_4() {
        return (int)120400L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_12_5 120500
     * }
     */
    public static int __MAC_12_5() {
        return (int)120500L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_12_6 120600
     * }
     */
    public static int __MAC_12_6() {
        return (int)120600L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_12_7 120700
     * }
     */
    public static int __MAC_12_7() {
        return (int)120700L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_13_0 130000
     * }
     */
    public static int __MAC_13_0() {
        return (int)130000L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_13_1 130100
     * }
     */
    public static int __MAC_13_1() {
        return (int)130100L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_13_2 130200
     * }
     */
    public static int __MAC_13_2() {
        return (int)130200L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_13_3 130300
     * }
     */
    public static int __MAC_13_3() {
        return (int)130300L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_13_4 130400
     * }
     */
    public static int __MAC_13_4() {
        return (int)130400L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_13_5 130500
     * }
     */
    public static int __MAC_13_5() {
        return (int)130500L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_13_6 130600
     * }
     */
    public static int __MAC_13_6() {
        return (int)130600L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_14_0 140000
     * }
     */
    public static int __MAC_14_0() {
        return (int)140000L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_14_1 140100
     * }
     */
    public static int __MAC_14_1() {
        return (int)140100L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_14_2 140200
     * }
     */
    public static int __MAC_14_2() {
        return (int)140200L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_14_3 140300
     * }
     */
    public static int __MAC_14_3() {
        return (int)140300L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_14_4 140400
     * }
     */
    public static int __MAC_14_4() {
        return (int)140400L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_14_5 140500
     * }
     */
    public static int __MAC_14_5() {
        return (int)140500L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_15_0 150000
     * }
     */
    public static int __MAC_15_0() {
        return (int)150000L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_15_1 150100
     * }
     */
    public static int __MAC_15_1() {
        return (int)150100L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_15_2 150200
     * }
     */
    public static int __MAC_15_2() {
        return (int)150200L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_2_0 20000
     * }
     */
    public static int __IPHONE_2_0() {
        return (int)20000L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_2_1 20100
     * }
     */
    public static int __IPHONE_2_1() {
        return (int)20100L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_2_2 20200
     * }
     */
    public static int __IPHONE_2_2() {
        return (int)20200L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_3_0 30000
     * }
     */
    public static int __IPHONE_3_0() {
        return (int)30000L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_3_1 30100
     * }
     */
    public static int __IPHONE_3_1() {
        return (int)30100L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_3_2 30200
     * }
     */
    public static int __IPHONE_3_2() {
        return (int)30200L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_4_0 40000
     * }
     */
    public static int __IPHONE_4_0() {
        return (int)40000L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_4_1 40100
     * }
     */
    public static int __IPHONE_4_1() {
        return (int)40100L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_4_2 40200
     * }
     */
    public static int __IPHONE_4_2() {
        return (int)40200L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_4_3 40300
     * }
     */
    public static int __IPHONE_4_3() {
        return (int)40300L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_5_0 50000
     * }
     */
    public static int __IPHONE_5_0() {
        return (int)50000L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_5_1 50100
     * }
     */
    public static int __IPHONE_5_1() {
        return (int)50100L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_6_0 60000
     * }
     */
    public static int __IPHONE_6_0() {
        return (int)60000L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_6_1 60100
     * }
     */
    public static int __IPHONE_6_1() {
        return (int)60100L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_7_0 70000
     * }
     */
    public static int __IPHONE_7_0() {
        return (int)70000L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_7_1 70100
     * }
     */
    public static int __IPHONE_7_1() {
        return (int)70100L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_8_0 80000
     * }
     */
    public static int __IPHONE_8_0() {
        return (int)80000L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_8_1 80100
     * }
     */
    public static int __IPHONE_8_1() {
        return (int)80100L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_8_2 80200
     * }
     */
    public static int __IPHONE_8_2() {
        return (int)80200L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_8_3 80300
     * }
     */
    public static int __IPHONE_8_3() {
        return (int)80300L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_8_4 80400
     * }
     */
    public static int __IPHONE_8_4() {
        return (int)80400L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_9_0 90000
     * }
     */
    public static int __IPHONE_9_0() {
        return (int)90000L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_9_1 90100
     * }
     */
    public static int __IPHONE_9_1() {
        return (int)90100L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_9_2 90200
     * }
     */
    public static int __IPHONE_9_2() {
        return (int)90200L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_9_3 90300
     * }
     */
    public static int __IPHONE_9_3() {
        return (int)90300L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_10_0 100000
     * }
     */
    public static int __IPHONE_10_0() {
        return (int)100000L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_10_1 100100
     * }
     */
    public static int __IPHONE_10_1() {
        return (int)100100L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_10_2 100200
     * }
     */
    public static int __IPHONE_10_2() {
        return (int)100200L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_10_3 100300
     * }
     */
    public static int __IPHONE_10_3() {
        return (int)100300L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_11_0 110000
     * }
     */
    public static int __IPHONE_11_0() {
        return (int)110000L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_11_1 110100
     * }
     */
    public static int __IPHONE_11_1() {
        return (int)110100L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_11_2 110200
     * }
     */
    public static int __IPHONE_11_2() {
        return (int)110200L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_11_3 110300
     * }
     */
    public static int __IPHONE_11_3() {
        return (int)110300L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_11_4 110400
     * }
     */
    public static int __IPHONE_11_4() {
        return (int)110400L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_12_0 120000
     * }
     */
    public static int __IPHONE_12_0() {
        return (int)120000L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_12_1 120100
     * }
     */
    public static int __IPHONE_12_1() {
        return (int)120100L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_12_2 120200
     * }
     */
    public static int __IPHONE_12_2() {
        return (int)120200L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_12_3 120300
     * }
     */
    public static int __IPHONE_12_3() {
        return (int)120300L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_12_4 120400
     * }
     */
    public static int __IPHONE_12_4() {
        return (int)120400L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_0 130000
     * }
     */
    public static int __IPHONE_13_0() {
        return (int)130000L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_1 130100
     * }
     */
    public static int __IPHONE_13_1() {
        return (int)130100L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_2 130200
     * }
     */
    public static int __IPHONE_13_2() {
        return (int)130200L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_3 130300
     * }
     */
    public static int __IPHONE_13_3() {
        return (int)130300L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_4 130400
     * }
     */
    public static int __IPHONE_13_4() {
        return (int)130400L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_5 130500
     * }
     */
    public static int __IPHONE_13_5() {
        return (int)130500L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_6 130600
     * }
     */
    public static int __IPHONE_13_6() {
        return (int)130600L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_7 130700
     * }
     */
    public static int __IPHONE_13_7() {
        return (int)130700L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_0 140000
     * }
     */
    public static int __IPHONE_14_0() {
        return (int)140000L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_1 140100
     * }
     */
    public static int __IPHONE_14_1() {
        return (int)140100L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_2 140200
     * }
     */
    public static int __IPHONE_14_2() {
        return (int)140200L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_3 140300
     * }
     */
    public static int __IPHONE_14_3() {
        return (int)140300L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_5 140500
     * }
     */
    public static int __IPHONE_14_5() {
        return (int)140500L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_4 140400
     * }
     */
    public static int __IPHONE_14_4() {
        return (int)140400L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_6 140600
     * }
     */
    public static int __IPHONE_14_6() {
        return (int)140600L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_7 140700
     * }
     */
    public static int __IPHONE_14_7() {
        return (int)140700L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_8 140800
     * }
     */
    public static int __IPHONE_14_8() {
        return (int)140800L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_0 150000
     * }
     */
    public static int __IPHONE_15_0() {
        return (int)150000L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_1 150100
     * }
     */
    public static int __IPHONE_15_1() {
        return (int)150100L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_2 150200
     * }
     */
    public static int __IPHONE_15_2() {
        return (int)150200L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_3 150300
     * }
     */
    public static int __IPHONE_15_3() {
        return (int)150300L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_4 150400
     * }
     */
    public static int __IPHONE_15_4() {
        return (int)150400L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_5 150500
     * }
     */
    public static int __IPHONE_15_5() {
        return (int)150500L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_6 150600
     * }
     */
    public static int __IPHONE_15_6() {
        return (int)150600L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_7 150700
     * }
     */
    public static int __IPHONE_15_7() {
        return (int)150700L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_8 150800
     * }
     */
    public static int __IPHONE_15_8() {
        return (int)150800L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_0 160000
     * }
     */
    public static int __IPHONE_16_0() {
        return (int)160000L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_1 160100
     * }
     */
    public static int __IPHONE_16_1() {
        return (int)160100L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_2 160200
     * }
     */
    public static int __IPHONE_16_2() {
        return (int)160200L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_3 160300
     * }
     */
    public static int __IPHONE_16_3() {
        return (int)160300L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_4 160400
     * }
     */
    public static int __IPHONE_16_4() {
        return (int)160400L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_5 160500
     * }
     */
    public static int __IPHONE_16_5() {
        return (int)160500L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_6 160600
     * }
     */
    public static int __IPHONE_16_6() {
        return (int)160600L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_7 160700
     * }
     */
    public static int __IPHONE_16_7() {
        return (int)160700L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_17_0 170000
     * }
     */
    public static int __IPHONE_17_0() {
        return (int)170000L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_17_1 170100
     * }
     */
    public static int __IPHONE_17_1() {
        return (int)170100L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_17_2 170200
     * }
     */
    public static int __IPHONE_17_2() {
        return (int)170200L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_17_3 170300
     * }
     */
    public static int __IPHONE_17_3() {
        return (int)170300L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_17_4 170400
     * }
     */
    public static int __IPHONE_17_4() {
        return (int)170400L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_17_5 170500
     * }
     */
    public static int __IPHONE_17_5() {
        return (int)170500L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_18_0 180000
     * }
     */
    public static int __IPHONE_18_0() {
        return (int)180000L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_18_1 180100
     * }
     */
    public static int __IPHONE_18_1() {
        return (int)180100L;
    }
    /**
     * {@snippet lang=c :
     * #define __IPHONE_18_2 180200
     * }
     */
    public static int __IPHONE_18_2() {
        return (int)180200L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_1_0 10000
     * }
     */
    public static int __WATCHOS_1_0() {
        return (int)10000L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_2_0 20000
     * }
     */
    public static int __WATCHOS_2_0() {
        return (int)20000L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_2_1 20100
     * }
     */
    public static int __WATCHOS_2_1() {
        return (int)20100L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_2_2 20200
     * }
     */
    public static int __WATCHOS_2_2() {
        return (int)20200L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_3_0 30000
     * }
     */
    public static int __WATCHOS_3_0() {
        return (int)30000L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_3_1 30100
     * }
     */
    public static int __WATCHOS_3_1() {
        return (int)30100L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_3_1_1 30101
     * }
     */
    public static int __WATCHOS_3_1_1() {
        return (int)30101L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_3_2 30200
     * }
     */
    public static int __WATCHOS_3_2() {
        return (int)30200L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_4_0 40000
     * }
     */
    public static int __WATCHOS_4_0() {
        return (int)40000L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_4_1 40100
     * }
     */
    public static int __WATCHOS_4_1() {
        return (int)40100L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_4_2 40200
     * }
     */
    public static int __WATCHOS_4_2() {
        return (int)40200L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_4_3 40300
     * }
     */
    public static int __WATCHOS_4_3() {
        return (int)40300L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_5_0 50000
     * }
     */
    public static int __WATCHOS_5_0() {
        return (int)50000L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_5_1 50100
     * }
     */
    public static int __WATCHOS_5_1() {
        return (int)50100L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_5_2 50200
     * }
     */
    public static int __WATCHOS_5_2() {
        return (int)50200L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_5_3 50300
     * }
     */
    public static int __WATCHOS_5_3() {
        return (int)50300L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_6_0 60000
     * }
     */
    public static int __WATCHOS_6_0() {
        return (int)60000L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_6_1 60100
     * }
     */
    public static int __WATCHOS_6_1() {
        return (int)60100L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_6_2 60200
     * }
     */
    public static int __WATCHOS_6_2() {
        return (int)60200L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_7_0 70000
     * }
     */
    public static int __WATCHOS_7_0() {
        return (int)70000L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_7_1 70100
     * }
     */
    public static int __WATCHOS_7_1() {
        return (int)70100L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_7_2 70200
     * }
     */
    public static int __WATCHOS_7_2() {
        return (int)70200L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_7_3 70300
     * }
     */
    public static int __WATCHOS_7_3() {
        return (int)70300L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_7_4 70400
     * }
     */
    public static int __WATCHOS_7_4() {
        return (int)70400L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_7_5 70500
     * }
     */
    public static int __WATCHOS_7_5() {
        return (int)70500L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_7_6 70600
     * }
     */
    public static int __WATCHOS_7_6() {
        return (int)70600L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_0 80000
     * }
     */
    public static int __WATCHOS_8_0() {
        return (int)80000L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_1 80100
     * }
     */
    public static int __WATCHOS_8_1() {
        return (int)80100L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_3 80300
     * }
     */
    public static int __WATCHOS_8_3() {
        return (int)80300L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_4 80400
     * }
     */
    public static int __WATCHOS_8_4() {
        return (int)80400L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_5 80500
     * }
     */
    public static int __WATCHOS_8_5() {
        return (int)80500L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_6 80600
     * }
     */
    public static int __WATCHOS_8_6() {
        return (int)80600L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_7 80700
     * }
     */
    public static int __WATCHOS_8_7() {
        return (int)80700L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_8 80800
     * }
     */
    public static int __WATCHOS_8_8() {
        return (int)80800L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_9_0 90000
     * }
     */
    public static int __WATCHOS_9_0() {
        return (int)90000L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_9_1 90100
     * }
     */
    public static int __WATCHOS_9_1() {
        return (int)90100L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_9_2 90200
     * }
     */
    public static int __WATCHOS_9_2() {
        return (int)90200L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_9_3 90300
     * }
     */
    public static int __WATCHOS_9_3() {
        return (int)90300L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_9_4 90400
     * }
     */
    public static int __WATCHOS_9_4() {
        return (int)90400L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_9_5 90500
     * }
     */
    public static int __WATCHOS_9_5() {
        return (int)90500L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_9_6 90600
     * }
     */
    public static int __WATCHOS_9_6() {
        return (int)90600L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_10_0 100000
     * }
     */
    public static int __WATCHOS_10_0() {
        return (int)100000L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_10_1 100100
     * }
     */
    public static int __WATCHOS_10_1() {
        return (int)100100L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_10_2 100200
     * }
     */
    public static int __WATCHOS_10_2() {
        return (int)100200L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_10_3 100300
     * }
     */
    public static int __WATCHOS_10_3() {
        return (int)100300L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_10_4 100400
     * }
     */
    public static int __WATCHOS_10_4() {
        return (int)100400L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_10_5 100500
     * }
     */
    public static int __WATCHOS_10_5() {
        return (int)100500L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_11_0 110000
     * }
     */
    public static int __WATCHOS_11_0() {
        return (int)110000L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_11_1 110100
     * }
     */
    public static int __WATCHOS_11_1() {
        return (int)110100L;
    }
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_11_2 110200
     * }
     */
    public static int __WATCHOS_11_2() {
        return (int)110200L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_9_0 90000
     * }
     */
    public static int __TVOS_9_0() {
        return (int)90000L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_9_1 90100
     * }
     */
    public static int __TVOS_9_1() {
        return (int)90100L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_9_2 90200
     * }
     */
    public static int __TVOS_9_2() {
        return (int)90200L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_10_0 100000
     * }
     */
    public static int __TVOS_10_0() {
        return (int)100000L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_10_0_1 100001
     * }
     */
    public static int __TVOS_10_0_1() {
        return (int)100001L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_10_1 100100
     * }
     */
    public static int __TVOS_10_1() {
        return (int)100100L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_10_2 100200
     * }
     */
    public static int __TVOS_10_2() {
        return (int)100200L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_11_0 110000
     * }
     */
    public static int __TVOS_11_0() {
        return (int)110000L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_11_1 110100
     * }
     */
    public static int __TVOS_11_1() {
        return (int)110100L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_11_2 110200
     * }
     */
    public static int __TVOS_11_2() {
        return (int)110200L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_11_3 110300
     * }
     */
    public static int __TVOS_11_3() {
        return (int)110300L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_11_4 110400
     * }
     */
    public static int __TVOS_11_4() {
        return (int)110400L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_12_0 120000
     * }
     */
    public static int __TVOS_12_0() {
        return (int)120000L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_12_1 120100
     * }
     */
    public static int __TVOS_12_1() {
        return (int)120100L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_12_2 120200
     * }
     */
    public static int __TVOS_12_2() {
        return (int)120200L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_12_3 120300
     * }
     */
    public static int __TVOS_12_3() {
        return (int)120300L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_12_4 120400
     * }
     */
    public static int __TVOS_12_4() {
        return (int)120400L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_13_0 130000
     * }
     */
    public static int __TVOS_13_0() {
        return (int)130000L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_13_2 130200
     * }
     */
    public static int __TVOS_13_2() {
        return (int)130200L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_13_3 130300
     * }
     */
    public static int __TVOS_13_3() {
        return (int)130300L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_13_4 130400
     * }
     */
    public static int __TVOS_13_4() {
        return (int)130400L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_14_0 140000
     * }
     */
    public static int __TVOS_14_0() {
        return (int)140000L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_14_1 140100
     * }
     */
    public static int __TVOS_14_1() {
        return (int)140100L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_14_2 140200
     * }
     */
    public static int __TVOS_14_2() {
        return (int)140200L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_14_3 140300
     * }
     */
    public static int __TVOS_14_3() {
        return (int)140300L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_14_5 140500
     * }
     */
    public static int __TVOS_14_5() {
        return (int)140500L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_14_6 140600
     * }
     */
    public static int __TVOS_14_6() {
        return (int)140600L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_14_7 140700
     * }
     */
    public static int __TVOS_14_7() {
        return (int)140700L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_15_0 150000
     * }
     */
    public static int __TVOS_15_0() {
        return (int)150000L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_15_1 150100
     * }
     */
    public static int __TVOS_15_1() {
        return (int)150100L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_15_2 150200
     * }
     */
    public static int __TVOS_15_2() {
        return (int)150200L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_15_3 150300
     * }
     */
    public static int __TVOS_15_3() {
        return (int)150300L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_15_4 150400
     * }
     */
    public static int __TVOS_15_4() {
        return (int)150400L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_15_5 150500
     * }
     */
    public static int __TVOS_15_5() {
        return (int)150500L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_15_6 150600
     * }
     */
    public static int __TVOS_15_6() {
        return (int)150600L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_16_0 160000
     * }
     */
    public static int __TVOS_16_0() {
        return (int)160000L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_16_1 160100
     * }
     */
    public static int __TVOS_16_1() {
        return (int)160100L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_16_2 160200
     * }
     */
    public static int __TVOS_16_2() {
        return (int)160200L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_16_3 160300
     * }
     */
    public static int __TVOS_16_3() {
        return (int)160300L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_16_4 160400
     * }
     */
    public static int __TVOS_16_4() {
        return (int)160400L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_16_5 160500
     * }
     */
    public static int __TVOS_16_5() {
        return (int)160500L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_16_6 160600
     * }
     */
    public static int __TVOS_16_6() {
        return (int)160600L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_17_0 170000
     * }
     */
    public static int __TVOS_17_0() {
        return (int)170000L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_17_1 170100
     * }
     */
    public static int __TVOS_17_1() {
        return (int)170100L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_17_2 170200
     * }
     */
    public static int __TVOS_17_2() {
        return (int)170200L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_17_3 170300
     * }
     */
    public static int __TVOS_17_3() {
        return (int)170300L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_17_4 170400
     * }
     */
    public static int __TVOS_17_4() {
        return (int)170400L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_17_5 170500
     * }
     */
    public static int __TVOS_17_5() {
        return (int)170500L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_18_0 180000
     * }
     */
    public static int __TVOS_18_0() {
        return (int)180000L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_18_1 180100
     * }
     */
    public static int __TVOS_18_1() {
        return (int)180100L;
    }
    /**
     * {@snippet lang=c :
     * #define __TVOS_18_2 180200
     * }
     */
    public static int __TVOS_18_2() {
        return (int)180200L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_2_0 20000
     * }
     */
    public static int __BRIDGEOS_2_0() {
        return (int)20000L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_3_0 30000
     * }
     */
    public static int __BRIDGEOS_3_0() {
        return (int)30000L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_3_1 30100
     * }
     */
    public static int __BRIDGEOS_3_1() {
        return (int)30100L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_3_4 30400
     * }
     */
    public static int __BRIDGEOS_3_4() {
        return (int)30400L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_4_0 40000
     * }
     */
    public static int __BRIDGEOS_4_0() {
        return (int)40000L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_4_1 40100
     * }
     */
    public static int __BRIDGEOS_4_1() {
        return (int)40100L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_5_0 50000
     * }
     */
    public static int __BRIDGEOS_5_0() {
        return (int)50000L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_5_1 50100
     * }
     */
    public static int __BRIDGEOS_5_1() {
        return (int)50100L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_5_3 50300
     * }
     */
    public static int __BRIDGEOS_5_3() {
        return (int)50300L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_6_0 60000
     * }
     */
    public static int __BRIDGEOS_6_0() {
        return (int)60000L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_6_2 60200
     * }
     */
    public static int __BRIDGEOS_6_2() {
        return (int)60200L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_6_4 60400
     * }
     */
    public static int __BRIDGEOS_6_4() {
        return (int)60400L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_6_5 60500
     * }
     */
    public static int __BRIDGEOS_6_5() {
        return (int)60500L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_6_6 60600
     * }
     */
    public static int __BRIDGEOS_6_6() {
        return (int)60600L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_7_0 70000
     * }
     */
    public static int __BRIDGEOS_7_0() {
        return (int)70000L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_7_1 70100
     * }
     */
    public static int __BRIDGEOS_7_1() {
        return (int)70100L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_7_2 70200
     * }
     */
    public static int __BRIDGEOS_7_2() {
        return (int)70200L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_7_3 70300
     * }
     */
    public static int __BRIDGEOS_7_3() {
        return (int)70300L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_7_4 70400
     * }
     */
    public static int __BRIDGEOS_7_4() {
        return (int)70400L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_7_6 70600
     * }
     */
    public static int __BRIDGEOS_7_6() {
        return (int)70600L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_8_0 80000
     * }
     */
    public static int __BRIDGEOS_8_0() {
        return (int)80000L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_8_1 80100
     * }
     */
    public static int __BRIDGEOS_8_1() {
        return (int)80100L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_8_2 80200
     * }
     */
    public static int __BRIDGEOS_8_2() {
        return (int)80200L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_8_3 80300
     * }
     */
    public static int __BRIDGEOS_8_3() {
        return (int)80300L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_8_4 80400
     * }
     */
    public static int __BRIDGEOS_8_4() {
        return (int)80400L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_8_5 80500
     * }
     */
    public static int __BRIDGEOS_8_5() {
        return (int)80500L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_9_0 90000
     * }
     */
    public static int __BRIDGEOS_9_0() {
        return (int)90000L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_9_1 90100
     * }
     */
    public static int __BRIDGEOS_9_1() {
        return (int)90100L;
    }
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_9_2 90200
     * }
     */
    public static int __BRIDGEOS_9_2() {
        return (int)90200L;
    }
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_19_0 190000
     * }
     */
    public static int __DRIVERKIT_19_0() {
        return (int)190000L;
    }
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_20_0 200000
     * }
     */
    public static int __DRIVERKIT_20_0() {
        return (int)200000L;
    }
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_21_0 210000
     * }
     */
    public static int __DRIVERKIT_21_0() {
        return (int)210000L;
    }
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_22_0 220000
     * }
     */
    public static int __DRIVERKIT_22_0() {
        return (int)220000L;
    }
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_22_4 220400
     * }
     */
    public static int __DRIVERKIT_22_4() {
        return (int)220400L;
    }
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_22_5 220500
     * }
     */
    public static int __DRIVERKIT_22_5() {
        return (int)220500L;
    }
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_22_6 220600
     * }
     */
    public static int __DRIVERKIT_22_6() {
        return (int)220600L;
    }
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_23_0 230000
     * }
     */
    public static int __DRIVERKIT_23_0() {
        return (int)230000L;
    }
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_23_1 230100
     * }
     */
    public static int __DRIVERKIT_23_1() {
        return (int)230100L;
    }
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_23_2 230200
     * }
     */
    public static int __DRIVERKIT_23_2() {
        return (int)230200L;
    }
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_23_3 230300
     * }
     */
    public static int __DRIVERKIT_23_3() {
        return (int)230300L;
    }
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_23_4 230400
     * }
     */
    public static int __DRIVERKIT_23_4() {
        return (int)230400L;
    }
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_23_5 230500
     * }
     */
    public static int __DRIVERKIT_23_5() {
        return (int)230500L;
    }
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_24_0 240000
     * }
     */
    public static int __DRIVERKIT_24_0() {
        return (int)240000L;
    }
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_24_1 240100
     * }
     */
    public static int __DRIVERKIT_24_1() {
        return (int)240100L;
    }
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_24_2 240200
     * }
     */
    public static int __DRIVERKIT_24_2() {
        return (int)240200L;
    }
    /**
     * {@snippet lang=c :
     * #define __VISIONOS_1_0 10000
     * }
     */
    public static int __VISIONOS_1_0() {
        return (int)10000L;
    }
    /**
     * {@snippet lang=c :
     * #define __VISIONOS_1_1 10100
     * }
     */
    public static int __VISIONOS_1_1() {
        return (int)10100L;
    }
    /**
     * {@snippet lang=c :
     * #define __VISIONOS_1_2 10200
     * }
     */
    public static int __VISIONOS_1_2() {
        return (int)10200L;
    }
    /**
     * {@snippet lang=c :
     * #define __VISIONOS_2_0 20000
     * }
     */
    public static int __VISIONOS_2_0() {
        return (int)20000L;
    }
    /**
     * {@snippet lang=c :
     * #define __VISIONOS_2_1 20100
     * }
     */
    public static int __VISIONOS_2_1() {
        return (int)20100L;
    }
    /**
     * {@snippet lang=c :
     * #define __VISIONOS_2_2 20200
     * }
     */
    public static int __VISIONOS_2_2() {
        return (int)20200L;
    }
    /**
     * {@snippet lang=c :
     * #define __ENABLE_LEGACY_MAC_AVAILABILITY 1
     * }
     */
    public static int __ENABLE_LEGACY_MAC_AVAILABILITY() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * #define _FORTIFY_SOURCE 2
     * }
     */
    public static int _FORTIFY_SOURCE() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * #define USE_CLANG_STDARG 0
     * }
     */
    public static int USE_CLANG_STDARG() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * #define USE_CLANG_STDDEF 0
     * }
     */
    public static int USE_CLANG_STDDEF() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * #define RENAME_SECLUDE 1
     * }
     */
    public static int RENAME_SECLUDE() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * #define RENAME_SWAP 2
     * }
     */
    public static int RENAME_SWAP() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * #define RENAME_EXCL 4
     * }
     */
    public static int RENAME_EXCL() {
        return (int)4L;
    }
    /**
     * {@snippet lang=c :
     * #define RENAME_RESERVED1 8
     * }
     */
    public static int RENAME_RESERVED1() {
        return (int)8L;
    }
    /**
     * {@snippet lang=c :
     * #define RENAME_NOFOLLOW_ANY 16
     * }
     */
    public static int RENAME_NOFOLLOW_ANY() {
        return (int)16L;
    }
    /**
     * {@snippet lang=c :
     * #define SEEK_SET 0
     * }
     */
    public static int SEEK_SET() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * #define SEEK_CUR 1
     * }
     */
    public static int SEEK_CUR() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * #define SEEK_END 2
     * }
     */
    public static int SEEK_END() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * #define SEEK_HOLE 3
     * }
     */
    public static int SEEK_HOLE() {
        return (int)3L;
    }
    /**
     * {@snippet lang=c :
     * #define SEEK_DATA 4
     * }
     */
    public static int SEEK_DATA() {
        return (int)4L;
    }
    /**
     * {@snippet lang=c :
     * #define __SLBF 1
     * }
     */
    public static int __SLBF() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * #define __SNBF 2
     * }
     */
    public static int __SNBF() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * #define __SRD 4
     * }
     */
    public static int __SRD() {
        return (int)4L;
    }
    /**
     * {@snippet lang=c :
     * #define __SWR 8
     * }
     */
    public static int __SWR() {
        return (int)8L;
    }
    /**
     * {@snippet lang=c :
     * #define __SRW 16
     * }
     */
    public static int __SRW() {
        return (int)16L;
    }
    /**
     * {@snippet lang=c :
     * #define __SEOF 32
     * }
     */
    public static int __SEOF() {
        return (int)32L;
    }
    /**
     * {@snippet lang=c :
     * #define __SERR 64
     * }
     */
    public static int __SERR() {
        return (int)64L;
    }
    /**
     * {@snippet lang=c :
     * #define __SMBF 128
     * }
     */
    public static int __SMBF() {
        return (int)128L;
    }
    /**
     * {@snippet lang=c :
     * #define __SAPP 256
     * }
     */
    public static int __SAPP() {
        return (int)256L;
    }
    /**
     * {@snippet lang=c :
     * #define __SSTR 512
     * }
     */
    public static int __SSTR() {
        return (int)512L;
    }
    /**
     * {@snippet lang=c :
     * #define __SOPT 1024
     * }
     */
    public static int __SOPT() {
        return (int)1024L;
    }
    /**
     * {@snippet lang=c :
     * #define __SNPT 2048
     * }
     */
    public static int __SNPT() {
        return (int)2048L;
    }
    /**
     * {@snippet lang=c :
     * #define __SOFF 4096
     * }
     */
    public static int __SOFF() {
        return (int)4096L;
    }
    /**
     * {@snippet lang=c :
     * #define __SMOD 8192
     * }
     */
    public static int __SMOD() {
        return (int)8192L;
    }
    /**
     * {@snippet lang=c :
     * #define __SALC 16384
     * }
     */
    public static int __SALC() {
        return (int)16384L;
    }
    /**
     * {@snippet lang=c :
     * #define __SIGN 32768
     * }
     */
    public static int __SIGN() {
        return (int)32768L;
    }
    /**
     * {@snippet lang=c :
     * #define _IOFBF 0
     * }
     */
    public static int _IOFBF() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * #define _IOLBF 1
     * }
     */
    public static int _IOLBF() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * #define _IONBF 2
     * }
     */
    public static int _IONBF() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * #define BUFSIZ 1024
     * }
     */
    public static int BUFSIZ() {
        return (int)1024L;
    }
    /**
     * {@snippet lang=c :
     * #define FOPEN_MAX 20
     * }
     */
    public static int FOPEN_MAX() {
        return (int)20L;
    }
    /**
     * {@snippet lang=c :
     * #define FILENAME_MAX 1024
     * }
     */
    public static int FILENAME_MAX() {
        return (int)1024L;
    }
    /**
     * {@snippet lang=c :
     * #define L_tmpnam 1024
     * }
     */
    public static int L_tmpnam() {
        return (int)1024L;
    }
    /**
     * {@snippet lang=c :
     * #define TMP_MAX 308915776
     * }
     */
    public static int TMP_MAX() {
        return (int)308915776L;
    }
    /**
     * {@snippet lang=c :
     * #define L_ctermid 1024
     * }
     */
    public static int L_ctermid() {
        return (int)1024L;
    }
    /**
     * {@snippet lang=c :
     * #define _USE_FORTIFY_LEVEL 2
     * }
     */
    public static int _USE_FORTIFY_LEVEL() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * #define GGML_FILE_MAGIC 1734831468
     * }
     */
    public static int GGML_FILE_MAGIC() {
        return (int)1734831468L;
    }
    /**
     * {@snippet lang=c :
     * #define GGML_FILE_VERSION 2
     * }
     */
    public static int GGML_FILE_VERSION() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * #define GGML_QNT_VERSION 2
     * }
     */
    public static int GGML_QNT_VERSION() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * #define GGML_QNT_VERSION_FACTOR 1000
     * }
     */
    public static int GGML_QNT_VERSION_FACTOR() {
        return (int)1000L;
    }
    /**
     * {@snippet lang=c :
     * #define GGML_MAX_DIMS 4
     * }
     */
    public static int GGML_MAX_DIMS() {
        return (int)4L;
    }
    /**
     * {@snippet lang=c :
     * #define GGML_MAX_PARAMS 2048
     * }
     */
    public static int GGML_MAX_PARAMS() {
        return (int)2048L;
    }
    /**
     * {@snippet lang=c :
     * #define GGML_MAX_SRC 10
     * }
     */
    public static int GGML_MAX_SRC() {
        return (int)10L;
    }
    /**
     * {@snippet lang=c :
     * #define GGML_MAX_N_THREADS 512
     * }
     */
    public static int GGML_MAX_N_THREADS() {
        return (int)512L;
    }
    /**
     * {@snippet lang=c :
     * #define GGML_MAX_OP_PARAMS 64
     * }
     */
    public static int GGML_MAX_OP_PARAMS() {
        return (int)64L;
    }
    /**
     * {@snippet lang=c :
     * #define GGML_MAX_NAME 64
     * }
     */
    public static int GGML_MAX_NAME() {
        return (int)64L;
    }
    /**
     * {@snippet lang=c :
     * #define GGML_DEFAULT_N_THREADS 4
     * }
     */
    public static int GGML_DEFAULT_N_THREADS() {
        return (int)4L;
    }
    /**
     * {@snippet lang=c :
     * #define GGML_DEFAULT_GRAPH_SIZE 2048
     * }
     */
    public static int GGML_DEFAULT_GRAPH_SIZE() {
        return (int)2048L;
    }
    /**
     * {@snippet lang=c :
     * #define GGML_MEM_ALIGN 16
     * }
     */
    public static int GGML_MEM_ALIGN() {
        return (int)16L;
    }
    /**
     * {@snippet lang=c :
     * #define GGML_EXIT_SUCCESS 0
     * }
     */
    public static int GGML_EXIT_SUCCESS() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * #define GGML_EXIT_ABORTED 1
     * }
     */
    public static int GGML_EXIT_ABORTED() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * #define GGML_ROPE_TYPE_NEOX 2
     * }
     */
    public static int GGML_ROPE_TYPE_NEOX() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * #define GGML_ROPE_TYPE_MROPE 8
     * }
     */
    public static int GGML_ROPE_TYPE_MROPE() {
        return (int)8L;
    }
    /**
     * {@snippet lang=c :
     * #define GGML_ROPE_TYPE_VISION 24
     * }
     */
    public static int GGML_ROPE_TYPE_VISION() {
        return (int)24L;
    }
    /**
     * {@snippet lang=c :
     * #define GGML_KQ_MASK_PAD 64
     * }
     */
    public static int GGML_KQ_MASK_PAD() {
        return (int)64L;
    }
    /**
     * {@snippet lang=c :
     * #define LLAMA_SESSION_VERSION 9
     * }
     */
    public static int LLAMA_SESSION_VERSION() {
        return (int)9L;
    }
    /**
     * {@snippet lang=c :
     * #define LLAMA_STATE_SEQ_VERSION 2
     * }
     */
    public static int LLAMA_STATE_SEQ_VERSION() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * typedef long ptrdiff_t;
     * }
     */
    public static final OfLong ptrdiff_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long size_t;
     * }
     */
    public static final OfLong size_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef int wchar_t;
     * }
     */
    public static final OfInt wchar_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef signed char int8_t;
     * }
     */
    public static final OfByte int8_t = JAVA_BYTE;
    /**
     * {@snippet lang=c :
     * typedef short int16_t;
     * }
     */
    public static final OfShort int16_t = JAVA_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int int32_t;
     * }
     */
    public static final OfInt int32_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef long long int64_t;
     * }
     */
    public static final OfLong int64_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint8_t;
     * }
     */
    public static final OfByte uint8_t = JAVA_BYTE;
    /**
     * {@snippet lang=c :
     * typedef unsigned short uint16_t;
     * }
     */
    public static final OfShort uint16_t = JAVA_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int uint32_t;
     * }
     */
    public static final OfInt uint32_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long uint64_t;
     * }
     */
    public static final OfLong uint64_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char int_least8_t;
     * }
     */
    public static final OfByte int_least8_t = JAVA_BYTE;
    /**
     * {@snippet lang=c :
     * typedef short int_least16_t;
     * }
     */
    public static final OfShort int_least16_t = JAVA_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int int_least32_t;
     * }
     */
    public static final OfInt int_least32_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef long long int_least64_t;
     * }
     */
    public static final OfLong int_least64_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint_least8_t;
     * }
     */
    public static final OfByte uint_least8_t = JAVA_BYTE;
    /**
     * {@snippet lang=c :
     * typedef unsigned short uint_least16_t;
     * }
     */
    public static final OfShort uint_least16_t = JAVA_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int uint_least32_t;
     * }
     */
    public static final OfInt uint_least32_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long uint_least64_t;
     * }
     */
    public static final OfLong uint_least64_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char int_fast8_t;
     * }
     */
    public static final OfByte int_fast8_t = JAVA_BYTE;
    /**
     * {@snippet lang=c :
     * typedef short int_fast16_t;
     * }
     */
    public static final OfShort int_fast16_t = JAVA_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int int_fast32_t;
     * }
     */
    public static final OfInt int_fast32_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef long long int_fast64_t;
     * }
     */
    public static final OfLong int_fast64_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint_fast8_t;
     * }
     */
    public static final OfByte uint_fast8_t = JAVA_BYTE;
    /**
     * {@snippet lang=c :
     * typedef unsigned short uint_fast16_t;
     * }
     */
    public static final OfShort uint_fast16_t = JAVA_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int uint_fast32_t;
     * }
     */
    public static final OfInt uint_fast32_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long uint_fast64_t;
     * }
     */
    public static final OfLong uint_fast64_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t;
     * }
     */
    public static final OfByte __int8_t = JAVA_BYTE;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t;
     * }
     */
    public static final OfByte __uint8_t = JAVA_BYTE;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t;
     * }
     */
    public static final OfShort __int16_t = JAVA_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t;
     * }
     */
    public static final OfShort __uint16_t = JAVA_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t;
     * }
     */
    public static final OfInt __int32_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t;
     * }
     */
    public static final OfInt __uint32_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef long long __int64_t;
     * }
     */
    public static final OfLong __int64_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long __uint64_t;
     * }
     */
    public static final OfLong __uint64_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_intptr_t;
     * }
     */
    public static final OfLong __darwin_intptr_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_natural_t;
     * }
     */
    public static final OfInt __darwin_natural_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_ct_rune_t;
     * }
     */
    public static final OfInt __darwin_ct_rune_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_ptrdiff_t;
     * }
     */
    public static final OfLong __darwin_ptrdiff_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_size_t;
     * }
     */
    public static final OfLong __darwin_size_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef char* __darwin_va_list;
     * }
     */
    public static final AddressLayout __darwin_va_list = RuntimeHelper.POINTER;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wchar_t;
     * }
     */
    public static final OfInt __darwin_wchar_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_rune_t;
     * }
     */
    public static final OfInt __darwin_rune_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wint_t;
     * }
     */
    public static final OfInt __darwin_wint_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_clock_t;
     * }
     */
    public static final OfLong __darwin_clock_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_socklen_t;
     * }
     */
    public static final OfInt __darwin_socklen_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_ssize_t;
     * }
     */
    public static final OfLong __darwin_ssize_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_time_t;
     * }
     */
    public static final OfLong __darwin_time_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef long long __darwin_blkcnt_t;
     * }
     */
    public static final OfLong __darwin_blkcnt_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_blksize_t;
     * }
     */
    public static final OfInt __darwin_blksize_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_dev_t;
     * }
     */
    public static final OfInt __darwin_dev_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_fsblkcnt_t;
     * }
     */
    public static final OfInt __darwin_fsblkcnt_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_fsfilcnt_t;
     * }
     */
    public static final OfInt __darwin_fsfilcnt_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_gid_t;
     * }
     */
    public static final OfInt __darwin_gid_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_id_t;
     * }
     */
    public static final OfInt __darwin_id_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long __darwin_ino64_t;
     * }
     */
    public static final OfLong __darwin_ino64_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long __darwin_ino_t;
     * }
     */
    public static final OfLong __darwin_ino_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_mach_port_name_t;
     * }
     */
    public static final OfInt __darwin_mach_port_name_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_mach_port_t;
     * }
     */
    public static final OfInt __darwin_mach_port_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __darwin_mode_t;
     * }
     */
    public static final OfShort __darwin_mode_t = JAVA_SHORT;
    /**
     * {@snippet lang=c :
     * typedef long long __darwin_off_t;
     * }
     */
    public static final OfLong __darwin_off_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_pid_t;
     * }
     */
    public static final OfInt __darwin_pid_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_sigset_t;
     * }
     */
    public static final OfInt __darwin_sigset_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_suseconds_t;
     * }
     */
    public static final OfInt __darwin_suseconds_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_uid_t;
     * }
     */
    public static final OfInt __darwin_uid_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_useconds_t;
     * }
     */
    public static final OfInt __darwin_useconds_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_pthread_key_t;
     * }
     */
    public static final OfLong __darwin_pthread_key_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef struct _opaque_pthread_t* __darwin_pthread_t;
     * }
     */
    public static final AddressLayout __darwin_pthread_t = RuntimeHelper.POINTER;
    /**
     * {@snippet lang=c :
     * typedef long intptr_t;
     * }
     */
    public static final OfLong intptr_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintptr_t;
     * }
     */
    public static final OfLong uintptr_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef long intmax_t;
     * }
     */
    public static final OfLong intmax_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintmax_t;
     * }
     */
    public static final OfLong uintmax_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_nl_item;
     * }
     */
    public static final OfInt __darwin_nl_item = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wctrans_t;
     * }
     */
    public static final OfInt __darwin_wctrans_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_wctype_t;
     * }
     */
    public static final OfInt __darwin_wctype_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned char u_int8_t;
     * }
     */
    public static final OfByte u_int8_t = JAVA_BYTE;
    /**
     * {@snippet lang=c :
     * typedef unsigned short u_int16_t;
     * }
     */
    public static final OfShort u_int16_t = JAVA_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int u_int32_t;
     * }
     */
    public static final OfInt u_int32_t = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long u_int64_t;
     * }
     */
    public static final OfLong u_int64_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef long long register_t;
     * }
     */
    public static final OfLong register_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long user_addr_t;
     * }
     */
    public static final OfLong user_addr_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long user_size_t;
     * }
     */
    public static final OfLong user_size_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef long long user_ssize_t;
     * }
     */
    public static final OfLong user_ssize_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef long long user_long_t;
     * }
     */
    public static final OfLong user_long_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long user_ulong_t;
     * }
     */
    public static final OfLong user_ulong_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef long long user_time_t;
     * }
     */
    public static final OfLong user_time_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef long long user_off_t;
     * }
     */
    public static final OfLong user_off_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long syscall_arg_t;
     * }
     */
    public static final OfLong syscall_arg_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef char* va_list;
     * }
     */
    public static final AddressLayout va_list = RuntimeHelper.POINTER;
    public static MethodHandle renameat$MH() {
        return RuntimeHelper.requireNonNull(constants$4.const$5,"renameat");
    }
    /**
     * {@snippet lang=c :
     * int renameat(int, char*, int, char*);
     * }
     */
    public static int renameat(int x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = renameat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle renamex_np$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$1,"renamex_np");
    }
    /**
     * {@snippet lang=c :
     * int renamex_np(char*, char*, unsigned int);
     * }
     */
    public static int renamex_np(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = renamex_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle renameatx_np$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$3,"renameatx_np");
    }
    /**
     * {@snippet lang=c :
     * int renameatx_np(int, char*, int, char*, unsigned int);
     * }
     */
    public static int renameatx_np(int x0, MemorySegment x1, int x2, MemorySegment x3, int x4) {
        var mh$ = renameatx_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle printf$MH() {
        return RuntimeHelper.requireNonNull(constants$5.const$5,"printf");
    }
    /**
     * {@snippet lang=c :
     * int printf(char*,...);
     * }
     */
    public static int printf(MemorySegment x0, Object... x1) {
        var mh$ = printf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long long fpos_t;
     * }
     */
    public static final OfLong fpos_t = JAVA_LONG;
    public static MemoryLayout __stdinp$LAYOUT() {
        return RuntimeHelper.POINTER;
    }
    public static VarHandle __stdinp$VH() {
        return constants$10.const$3;
    }
    public static MemorySegment __stdinp$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$10.const$4,"__stdinp");
    }
    /**
     * Getter for variable:
     * {@snippet lang=c :
     * struct __sFILE* __stdinp;
     * }
     */
    public static MemorySegment __stdinp$get() {
        return (MemorySegment) constants$10.const$3.get(RuntimeHelper.requireNonNull(constants$10.const$4, "__stdinp"));
    }
    /**
     * Setter for variable:
     * {@snippet lang=c :
     * struct __sFILE* __stdinp;
     * }
     */
    public static void __stdinp$set(MemorySegment x) {
        constants$10.const$3.set(RuntimeHelper.requireNonNull(constants$10.const$4, "__stdinp"), x);
    }
    public static MemoryLayout __stdoutp$LAYOUT() {
        return RuntimeHelper.POINTER;
    }
    public static VarHandle __stdoutp$VH() {
        return constants$10.const$3;
    }
    public static MemorySegment __stdoutp$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$10.const$5,"__stdoutp");
    }
    /**
     * Getter for variable:
     * {@snippet lang=c :
     * struct __sFILE* __stdoutp;
     * }
     */
    public static MemorySegment __stdoutp$get() {
        return (MemorySegment) constants$10.const$3.get(RuntimeHelper.requireNonNull(constants$10.const$5, "__stdoutp"));
    }
    /**
     * Setter for variable:
     * {@snippet lang=c :
     * struct __sFILE* __stdoutp;
     * }
     */
    public static void __stdoutp$set(MemorySegment x) {
        constants$10.const$3.set(RuntimeHelper.requireNonNull(constants$10.const$5, "__stdoutp"), x);
    }
    public static MemoryLayout __stderrp$LAYOUT() {
        return RuntimeHelper.POINTER;
    }
    public static VarHandle __stderrp$VH() {
        return constants$10.const$3;
    }
    public static MemorySegment __stderrp$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$11.const$0,"__stderrp");
    }
    /**
     * Getter for variable:
     * {@snippet lang=c :
     * struct __sFILE* __stderrp;
     * }
     */
    public static MemorySegment __stderrp$get() {
        return (MemorySegment) constants$10.const$3.get(RuntimeHelper.requireNonNull(constants$11.const$0, "__stderrp"));
    }
    /**
     * Setter for variable:
     * {@snippet lang=c :
     * struct __sFILE* __stderrp;
     * }
     */
    public static void __stderrp$set(MemorySegment x) {
        constants$10.const$3.set(RuntimeHelper.requireNonNull(constants$11.const$0, "__stderrp"), x);
    }
    public static MethodHandle clearerr$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$1,"clearerr");
    }
    /**
     * {@snippet lang=c :
     * void clearerr(struct __sFILE*);
     * }
     */
    public static void clearerr(MemorySegment x0) {
        var mh$ = clearerr$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fclose$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$2,"fclose");
    }
    /**
     * {@snippet lang=c :
     * int fclose(struct __sFILE*);
     * }
     */
    public static int fclose(MemorySegment x0) {
        var mh$ = fclose$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle feof$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$3,"feof");
    }
    /**
     * {@snippet lang=c :
     * int feof(struct __sFILE*);
     * }
     */
    public static int feof(MemorySegment x0) {
        var mh$ = feof$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ferror$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$4,"ferror");
    }
    /**
     * {@snippet lang=c :
     * int ferror(struct __sFILE*);
     * }
     */
    public static int ferror(MemorySegment x0) {
        var mh$ = ferror$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fflush$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$5,"fflush");
    }
    /**
     * {@snippet lang=c :
     * int fflush(struct __sFILE*);
     * }
     */
    public static int fflush(MemorySegment x0) {
        var mh$ = fflush$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetc$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$0,"fgetc");
    }
    /**
     * {@snippet lang=c :
     * int fgetc(struct __sFILE*);
     * }
     */
    public static int fgetc(MemorySegment x0) {
        var mh$ = fgetc$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$2,"fgetpos");
    }
    /**
     * {@snippet lang=c :
     * int fgetpos(struct __sFILE*, long long*);
     * }
     */
    public static int fgetpos(MemorySegment x0, MemorySegment x1) {
        var mh$ = fgetpos$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgets$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$4,"fgets");
    }
    /**
     * {@snippet lang=c :
     * char* fgets(char*, int, struct __sFILE*);
     * }
     */
    public static MemorySegment fgets(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = fgets$MH();
        try {
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fopen$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$6,"fopen");
    }
    /**
     * {@snippet lang=c :
     * FILE* fopen(char* __filename, char* __mode);
     * }
     */
    public static MemorySegment fopen(MemorySegment __filename, MemorySegment __mode) {
        var mh$ = fopen$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__filename, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$0,"fprintf");
    }
    /**
     * {@snippet lang=c :
     * int fprintf(struct __sFILE*, char*,...);
     * }
     */
    public static int fprintf(MemorySegment x0, MemorySegment x1, Object... x2) {
        var mh$ = fprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputc$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$2,"fputc");
    }
    /**
     * {@snippet lang=c :
     * int fputc(int, struct __sFILE*);
     * }
     */
    public static int fputc(int x0, MemorySegment x1) {
        var mh$ = fputc$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputs$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$3,"fputs");
    }
    /**
     * {@snippet lang=c :
     * int fputs(char*, struct __sFILE*);
     * }
     */
    public static int fputs(MemorySegment x0, MemorySegment x1) {
        var mh$ = fputs$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fread$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$5,"fread");
    }
    /**
     * {@snippet lang=c :
     * unsigned long fread(void* __ptr, unsigned long __size, unsigned long __nitems, struct __sFILE* __stream);
     * }
     */
    public static long fread(MemorySegment __ptr, long __size, long __nitems, MemorySegment __stream) {
        var mh$ = fread$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __nitems, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle freopen$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$1,"freopen");
    }
    /**
     * {@snippet lang=c :
     * struct __sFILE* freopen(char*, char*, struct __sFILE*);
     * }
     */
    public static MemorySegment freopen(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = freopen$MH();
        try {
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$2,"fscanf");
    }
    /**
     * {@snippet lang=c :
     * int fscanf(struct __sFILE*, char*,...);
     * }
     */
    public static int fscanf(MemorySegment x0, MemorySegment x1, Object... x2) {
        var mh$ = fscanf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fseek$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$4,"fseek");
    }
    /**
     * {@snippet lang=c :
     * int fseek(struct __sFILE*, long, int);
     * }
     */
    public static int fseek(MemorySegment x0, long x1, int x2) {
        var mh$ = fseek$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$5,"fsetpos");
    }
    /**
     * {@snippet lang=c :
     * int fsetpos(struct __sFILE*, long long*);
     * }
     */
    public static int fsetpos(MemorySegment x0, MemorySegment x1) {
        var mh$ = fsetpos$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftell$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$1,"ftell");
    }
    /**
     * {@snippet lang=c :
     * long ftell(struct __sFILE*);
     * }
     */
    public static long ftell(MemorySegment x0) {
        var mh$ = ftell$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$2,"fwrite");
    }
    /**
     * {@snippet lang=c :
     * unsigned long fwrite(void* __ptr, unsigned long __size, unsigned long __nitems, struct __sFILE* __stream);
     * }
     */
    public static long fwrite(MemorySegment __ptr, long __size, long __nitems, MemorySegment __stream) {
        var mh$ = fwrite$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __nitems, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$3,"getc");
    }
    /**
     * {@snippet lang=c :
     * int getc(struct __sFILE*);
     * }
     */
    public static int getc(MemorySegment x0) {
        var mh$ = getc$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$5,"getchar");
    }
    /**
     * {@snippet lang=c :
     * int getchar();
     * }
     */
    public static int getchar() {
        var mh$ = getchar$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gets$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$1,"gets");
    }
    /**
     * {@snippet lang=c :
     * char* gets(char*);
     * }
     */
    public static MemorySegment gets(MemorySegment x0) {
        var mh$ = gets$MH();
        try {
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle perror$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$2,"perror");
    }
    /**
     * {@snippet lang=c :
     * void perror(char*);
     * }
     */
    public static void perror(MemorySegment x0) {
        var mh$ = perror$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$3,"putc");
    }
    /**
     * {@snippet lang=c :
     * int putc(int, struct __sFILE*);
     * }
     */
    public static int putc(int x0, MemorySegment x1) {
        var mh$ = putc$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$5,"putchar");
    }
    /**
     * {@snippet lang=c :
     * int putchar(int);
     * }
     */
    public static int putchar(int x0) {
        var mh$ = putchar$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle puts$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$0,"puts");
    }
    /**
     * {@snippet lang=c :
     * int puts(char*);
     * }
     */
    public static int puts(MemorySegment x0) {
        var mh$ = puts$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remove$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$1,"remove");
    }
    /**
     * {@snippet lang=c :
     * int remove(char*);
     * }
     */
    public static int remove(MemorySegment x0) {
        var mh$ = remove$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rename$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$2,"rename");
    }
    /**
     * {@snippet lang=c :
     * int rename(char* __old, char* __new);
     * }
     */
    public static int rename(MemorySegment __old, MemorySegment __new) {
        var mh$ = rename$MH();
        try {
            return (int)mh$.invokeExact(__old, __new);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rewind$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$3,"rewind");
    }
    /**
     * {@snippet lang=c :
     * void rewind(struct __sFILE*);
     * }
     */
    public static void rewind(MemorySegment x0) {
        var mh$ = rewind$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scanf$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$4,"scanf");
    }
    /**
     * {@snippet lang=c :
     * int scanf(char*,...);
     * }
     */
    public static int scanf(MemorySegment x0, Object... x1) {
        var mh$ = scanf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$6,"setbuf");
    }
    /**
     * {@snippet lang=c :
     * void setbuf(struct __sFILE*, char*);
     * }
     */
    public static void setbuf(MemorySegment x0, MemorySegment x1) {
        var mh$ = setbuf$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setvbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$1,"setvbuf");
    }
    /**
     * {@snippet lang=c :
     * int setvbuf(struct __sFILE*, char*, int, unsigned long);
     * }
     */
    public static int setvbuf(MemorySegment x0, MemorySegment x1, int x2, long x3) {
        var mh$ = setvbuf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$2,"sprintf");
    }
    /**
     * {@snippet lang=c :
     * int sprintf(char*, char*,...);
     * }
     */
    public static int sprintf(MemorySegment x0, MemorySegment x1, Object... x2) {
        var mh$ = sprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$3,"sscanf");
    }
    /**
     * {@snippet lang=c :
     * int sscanf(char*, char*,...);
     * }
     */
    public static int sscanf(MemorySegment x0, MemorySegment x1, Object... x2) {
        var mh$ = sscanf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpfile$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$5,"tmpfile");
    }
    /**
     * {@snippet lang=c :
     * struct __sFILE* tmpfile();
     * }
     */
    public static MemorySegment tmpfile() {
        var mh$ = tmpfile$MH();
        try {
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpnam$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$0,"tmpnam");
    }
    /**
     * {@snippet lang=c :
     * char* tmpnam(char*);
     * }
     */
    public static MemorySegment tmpnam(MemorySegment x0) {
        var mh$ = tmpnam$MH();
        try {
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ungetc$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$1,"ungetc");
    }
    /**
     * {@snippet lang=c :
     * int ungetc(int, struct __sFILE*);
     * }
     */
    public static int ungetc(int x0, MemorySegment x1) {
        var mh$ = ungetc$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$3,"vfprintf");
    }
    /**
     * {@snippet lang=c :
     * int vfprintf(struct __sFILE*, char*, char*);
     * }
     */
    public static int vfprintf(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = vfprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$4,"vprintf");
    }
    /**
     * {@snippet lang=c :
     * int vprintf(char*, char*);
     * }
     */
    public static int vprintf(MemorySegment x0, MemorySegment x1) {
        var mh$ = vprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$5,"vsprintf");
    }
    /**
     * {@snippet lang=c :
     * int vsprintf(char*, char*, char*);
     * }
     */
    public static int vsprintf(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = vsprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctermid$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$0,"ctermid");
    }
    /**
     * {@snippet lang=c :
     * char* ctermid(char*);
     * }
     */
    public static MemorySegment ctermid(MemorySegment x0) {
        var mh$ = ctermid$MH();
        try {
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdopen$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$2,"fdopen");
    }
    /**
     * {@snippet lang=c :
     * struct __sFILE* fdopen(int, char*);
     * }
     */
    public static MemorySegment fdopen(int x0, MemorySegment x1) {
        var mh$ = fdopen$MH();
        try {
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fileno$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$3,"fileno");
    }
    /**
     * {@snippet lang=c :
     * int fileno(struct __sFILE*);
     * }
     */
    public static int fileno(MemorySegment x0) {
        var mh$ = fileno$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pclose$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$4,"pclose");
    }
    /**
     * {@snippet lang=c :
     * int pclose(struct __sFILE*);
     * }
     */
    public static int pclose(MemorySegment x0) {
        var mh$ = pclose$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle popen$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$5,"popen");
    }
    /**
     * {@snippet lang=c :
     * struct __sFILE* popen(char*, char*);
     * }
     */
    public static MemorySegment popen(MemorySegment x0, MemorySegment x1) {
        var mh$ = popen$MH();
        try {
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __srget$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$0,"__srget");
    }
    /**
     * {@snippet lang=c :
     * int __srget(struct __sFILE*);
     * }
     */
    public static int __srget(MemorySegment x0) {
        var mh$ = __srget$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __svfscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$1,"__svfscanf");
    }
    /**
     * {@snippet lang=c :
     * int __svfscanf(struct __sFILE*, char*, char*);
     * }
     */
    public static int __svfscanf(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = __svfscanf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __swbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$2,"__swbuf");
    }
    /**
     * {@snippet lang=c :
     * int __swbuf(int, struct __sFILE*);
     * }
     */
    public static int __swbuf(int x0, MemorySegment x1) {
        var mh$ = __swbuf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle flockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$3,"flockfile");
    }
    /**
     * {@snippet lang=c :
     * void flockfile(struct __sFILE*);
     * }
     */
    public static void flockfile(MemorySegment x0) {
        var mh$ = flockfile$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftrylockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$4,"ftrylockfile");
    }
    /**
     * {@snippet lang=c :
     * int ftrylockfile(struct __sFILE*);
     * }
     */
    public static int ftrylockfile(MemorySegment x0) {
        var mh$ = ftrylockfile$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle funlockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$5,"funlockfile");
    }
    /**
     * {@snippet lang=c :
     * void funlockfile(struct __sFILE*);
     * }
     */
    public static void funlockfile(MemorySegment x0) {
        var mh$ = funlockfile$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$0,"getc_unlocked");
    }
    /**
     * {@snippet lang=c :
     * int getc_unlocked(struct __sFILE*);
     * }
     */
    public static int getc_unlocked(MemorySegment x0) {
        var mh$ = getc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$1,"getchar_unlocked");
    }
    /**
     * {@snippet lang=c :
     * int getchar_unlocked();
     * }
     */
    public static int getchar_unlocked() {
        var mh$ = getchar_unlocked$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$2,"putc_unlocked");
    }
    /**
     * {@snippet lang=c :
     * int putc_unlocked(int, struct __sFILE*);
     * }
     */
    public static int putc_unlocked(int x0, MemorySegment x1) {
        var mh$ = putc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$3,"putchar_unlocked");
    }
    /**
     * {@snippet lang=c :
     * int putchar_unlocked(int);
     * }
     */
    public static int putchar_unlocked(int x0) {
        var mh$ = putchar_unlocked$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getw$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$4,"getw");
    }
    /**
     * {@snippet lang=c :
     * int getw(struct __sFILE*);
     * }
     */
    public static int getw(MemorySegment x0) {
        var mh$ = getw$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putw$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$5,"putw");
    }
    /**
     * {@snippet lang=c :
     * int putw(int, struct __sFILE*);
     * }
     */
    public static int putw(int x0, MemorySegment x1) {
        var mh$ = putw$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tempnam$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$0,"tempnam");
    }
    /**
     * {@snippet lang=c :
     * char* tempnam(char* __dir, char* __prefix);
     * }
     */
    public static MemorySegment tempnam(MemorySegment __dir, MemorySegment __prefix) {
        var mh$ = tempnam$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__dir, __prefix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long long off_t;
     * }
     */
    public static final OfLong off_t = JAVA_LONG;
    public static MethodHandle fseeko$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$1,"fseeko");
    }
    /**
     * {@snippet lang=c :
     * int fseeko(struct __sFILE* __stream, long long __offset, int __whence);
     * }
     */
    public static int fseeko(MemorySegment __stream, long __offset, int __whence) {
        var mh$ = fseeko$MH();
        try {
            return (int)mh$.invokeExact(__stream, __offset, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftello$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$2,"ftello");
    }
    /**
     * {@snippet lang=c :
     * long long ftello(struct __sFILE* __stream);
     * }
     */
    public static long ftello(MemorySegment __stream) {
        var mh$ = ftello$MH();
        try {
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle snprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$4,"snprintf");
    }
    /**
     * {@snippet lang=c :
     * int snprintf(char* __str, unsigned long __size, char* __format,...);
     * }
     */
    public static int snprintf(MemorySegment __str, long __size, MemorySegment __format, Object... x3) {
        var mh$ = snprintf$MH();
        try {
            return (int)mh$.invokeExact(__str, __size, __format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$5,"vfscanf");
    }
    /**
     * {@snippet lang=c :
     * int vfscanf(struct __sFILE* __stream, char* __format, char*);
     * }
     */
    public static int vfscanf(MemorySegment __stream, MemorySegment __format, MemorySegment x2) {
        var mh$ = vfscanf$MH();
        try {
            return (int)mh$.invokeExact(__stream, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$0,"vscanf");
    }
    /**
     * {@snippet lang=c :
     * int vscanf(char* __format, char*);
     * }
     */
    public static int vscanf(MemorySegment __format, MemorySegment x1) {
        var mh$ = vscanf$MH();
        try {
            return (int)mh$.invokeExact(__format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsnprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$2,"vsnprintf");
    }
    /**
     * {@snippet lang=c :
     * int vsnprintf(char* __str, unsigned long __size, char* __format, char*);
     * }
     */
    public static int vsnprintf(MemorySegment __str, long __size, MemorySegment __format, MemorySegment x3) {
        var mh$ = vsnprintf$MH();
        try {
            return (int)mh$.invokeExact(__str, __size, __format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$3,"vsscanf");
    }
    /**
     * {@snippet lang=c :
     * int vsscanf(char* __str, char* __format, char*);
     * }
     */
    public static int vsscanf(MemorySegment __str, MemorySegment __format, MemorySegment x2) {
        var mh$ = vsscanf$MH();
        try {
            return (int)mh$.invokeExact(__str, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef long ssize_t;
     * }
     */
    public static final OfLong ssize_t = JAVA_LONG;
    public static MethodHandle dprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$4,"dprintf");
    }
    /**
     * {@snippet lang=c :
     * int dprintf(int, char*,...);
     * }
     */
    public static int dprintf(int x0, MemorySegment x1, Object... x2) {
        var mh$ = dprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vdprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$6,"vdprintf");
    }
    /**
     * {@snippet lang=c :
     * int vdprintf(int, char*, char*);
     * }
     */
    public static int vdprintf(int x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = vdprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdelim$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$1,"getdelim");
    }
    /**
     * {@snippet lang=c :
     * long getdelim(char** __linep, unsigned long* __linecapp, int __delimiter, struct __sFILE* __stream);
     * }
     */
    public static long getdelim(MemorySegment __linep, MemorySegment __linecapp, int __delimiter, MemorySegment __stream) {
        var mh$ = getdelim$MH();
        try {
            return (long)mh$.invokeExact(__linep, __linecapp, __delimiter, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getline$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$3,"getline");
    }
    /**
     * {@snippet lang=c :
     * long getline(char** __linep, unsigned long* __linecapp, struct __sFILE* __stream);
     * }
     */
    public static long getline(MemorySegment __linep, MemorySegment __linecapp, MemorySegment __stream) {
        var mh$ = getline$MH();
        try {
            return (long)mh$.invokeExact(__linep, __linecapp, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmemopen$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$5,"fmemopen");
    }
    /**
     * {@snippet lang=c :
     * struct __sFILE* fmemopen(void* __buf, unsigned long __size, char* __mode);
     * }
     */
    public static MemorySegment fmemopen(MemorySegment __buf, long __size, MemorySegment __mode) {
        var mh$ = fmemopen$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__buf, __size, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle open_memstream$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$0,"open_memstream");
    }
    /**
     * {@snippet lang=c :
     * struct __sFILE* open_memstream(char** __bufp, unsigned long* __sizep);
     * }
     */
    public static MemorySegment open_memstream(MemorySegment __bufp, MemorySegment __sizep) {
        var mh$ = open_memstream$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__bufp, __sizep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout sys_nerr$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle sys_nerr$VH() {
        return constants$26.const$1;
    }
    public static MemorySegment sys_nerr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$26.const$2,"sys_nerr");
    }
    /**
     * Getter for variable:
     * {@snippet lang=c :
     * int sys_nerr;
     * }
     */
    public static int sys_nerr$get() {
        return (int) constants$26.const$1.get(RuntimeHelper.requireNonNull(constants$26.const$2, "sys_nerr"));
    }
    /**
     * Setter for variable:
     * {@snippet lang=c :
     * int sys_nerr;
     * }
     */
    public static void sys_nerr$set(int x) {
        constants$26.const$1.set(RuntimeHelper.requireNonNull(constants$26.const$2, "sys_nerr"), x);
    }
    public static MethodHandle asprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$3,"asprintf");
    }
    /**
     * {@snippet lang=c :
     * int asprintf(char**, char*,...);
     * }
     */
    public static int asprintf(MemorySegment x0, MemorySegment x1, Object... x2) {
        var mh$ = asprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctermid_r$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$4,"ctermid_r");
    }
    /**
     * {@snippet lang=c :
     * char* ctermid_r(char*);
     * }
     */
    public static MemorySegment ctermid_r(MemorySegment x0) {
        var mh$ = ctermid_r$MH();
        try {
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetln$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$5,"fgetln");
    }
    /**
     * {@snippet lang=c :
     * char* fgetln(struct __sFILE*, unsigned long*);
     * }
     */
    public static MemorySegment fgetln(MemorySegment x0, MemorySegment x1) {
        var mh$ = fgetln$MH();
        try {
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmtcheck$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$0,"fmtcheck");
    }
    /**
     * {@snippet lang=c :
     * char* fmtcheck(char*, char*);
     * }
     */
    public static MemorySegment fmtcheck(MemorySegment x0, MemorySegment x1) {
        var mh$ = fmtcheck$MH();
        try {
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fpurge$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$1,"fpurge");
    }
    /**
     * {@snippet lang=c :
     * int fpurge(struct __sFILE*);
     * }
     */
    public static int fpurge(MemorySegment x0) {
        var mh$ = fpurge$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$3,"setbuffer");
    }
    /**
     * {@snippet lang=c :
     * void setbuffer(struct __sFILE*, char*, int);
     * }
     */
    public static void setbuffer(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = setbuffer$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setlinebuf$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$4,"setlinebuf");
    }
    /**
     * {@snippet lang=c :
     * int setlinebuf(struct __sFILE*);
     * }
     */
    public static int setlinebuf(MemorySegment x0) {
        var mh$ = setlinebuf$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vasprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$5,"vasprintf");
    }
    /**
     * {@snippet lang=c :
     * int vasprintf(char**, char*, char*);
     * }
     */
    public static int vasprintf(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = vasprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle funopen$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$5,"funopen");
    }
    /**
     * {@snippet lang=c :
     * struct __sFILE* funopen(void*, int (*)(void*,char*,int), int (*)(void*,char*,int), long long (*)(void*,long long,int), int (*)(void*));
     * }
     */
    public static MemorySegment funopen(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = funopen$MH();
        try {
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sprintf_chk$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$1,"__sprintf_chk");
    }
    /**
     * {@snippet lang=c :
     * int __sprintf_chk(char*, int, unsigned long, char*,...);
     * }
     */
    public static int __sprintf_chk(MemorySegment x0, int x1, long x2, MemorySegment x3, Object... x4) {
        var mh$ = __sprintf_chk$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __snprintf_chk$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$3,"__snprintf_chk");
    }
    /**
     * {@snippet lang=c :
     * int __snprintf_chk(char*, unsigned long, int, unsigned long, char*,...);
     * }
     */
    public static int __snprintf_chk(MemorySegment x0, long x1, int x2, long x3, MemorySegment x4, Object... x5) {
        var mh$ = __snprintf_chk$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __vsprintf_chk$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$5,"__vsprintf_chk");
    }
    /**
     * {@snippet lang=c :
     * int __vsprintf_chk(char*, int, unsigned long, char*, char*);
     * }
     */
    public static int __vsprintf_chk(MemorySegment x0, int x1, long x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = __vsprintf_chk$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __vsnprintf_chk$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$1,"__vsnprintf_chk");
    }
    /**
     * {@snippet lang=c :
     * int __vsnprintf_chk(char*, unsigned long, int, unsigned long, char*, char*);
     * }
     */
    public static int __vsnprintf_chk(MemorySegment x0, long x1, int x2, long x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = __vsnprintf_chk$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_abort$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$3,"ggml_abort");
    }
    /**
     * {@snippet lang=c :
     * void ggml_abort(char* file, int line, char* fmt,...);
     * }
     */
    public static void ggml_abort(MemorySegment file, int line, MemorySegment fmt, Object... x3) {
        var mh$ = ggml_abort$MH();
        try {
            mh$.invokeExact(file, line, fmt, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * enum ggml_status.GGML_STATUS_ALLOC_FAILED = -2;
     * }
     */
    public static int GGML_STATUS_ALLOC_FAILED() {
        return (int)-2L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_status.GGML_STATUS_FAILED = -1;
     * }
     */
    public static int GGML_STATUS_FAILED() {
        return (int)-1L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_status.GGML_STATUS_SUCCESS = 0;
     * }
     */
    public static int GGML_STATUS_SUCCESS() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_status.GGML_STATUS_ABORTED = 1;
     * }
     */
    public static int GGML_STATUS_ABORTED() {
        return (int)1L;
    }
    public static MethodHandle ggml_status_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$5,"ggml_status_to_string");
    }
    /**
     * {@snippet lang=c :
     * char* ggml_status_to_string(enum ggml_status status);
     * }
     */
    public static MemorySegment ggml_status_to_string(int status) {
        var mh$ = ggml_status_to_string$MH();
        try {
            return (MemorySegment)mh$.invokeExact(status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned short ggml_fp16_t;
     * }
     */
    public static final OfShort ggml_fp16_t = JAVA_SHORT;
    public static MethodHandle ggml_fp16_to_fp32$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$1,"ggml_fp16_to_fp32");
    }
    /**
     * {@snippet lang=c :
     * float ggml_fp16_to_fp32(unsigned short);
     * }
     */
    public static float ggml_fp16_to_fp32(short x0) {
        var mh$ = ggml_fp16_to_fp32$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_fp32_to_fp16$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$3,"ggml_fp32_to_fp16");
    }
    /**
     * {@snippet lang=c :
     * unsigned short ggml_fp32_to_fp16(float);
     * }
     */
    public static short ggml_fp32_to_fp16(float x0) {
        var mh$ = ggml_fp32_to_fp16$MH();
        try {
            return (short)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_fp16_to_fp32_row$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$5,"ggml_fp16_to_fp32_row");
    }
    /**
     * {@snippet lang=c :
     * void ggml_fp16_to_fp32_row(unsigned short*, float*, long long);
     * }
     */
    public static void ggml_fp16_to_fp32_row(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = ggml_fp16_to_fp32_row$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_fp32_to_fp16_row$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$0,"ggml_fp32_to_fp16_row");
    }
    /**
     * {@snippet lang=c :
     * void ggml_fp32_to_fp16_row(float*, unsigned short*, long long);
     * }
     */
    public static void ggml_fp32_to_fp16_row(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = ggml_fp32_to_fp16_row$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_fp32_to_bf16$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$4,"ggml_fp32_to_bf16");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_bf16_t ggml_fp32_to_bf16(float);
     * }
     */
    public static MemorySegment ggml_fp32_to_bf16(SegmentAllocator allocator, float x1) {
        var mh$ = ggml_fp32_to_bf16$MH();
        try {
            return (MemorySegment)mh$.invokeExact(allocator, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_bf16_to_fp32$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$6,"ggml_bf16_to_fp32");
    }
    /**
     * {@snippet lang=c :
     * float ggml_bf16_to_fp32(struct ggml_bf16_t);
     * }
     */
    public static float ggml_bf16_to_fp32(MemorySegment x0) {
        var mh$ = ggml_bf16_to_fp32$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_bf16_to_fp32_row$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$0,"ggml_bf16_to_fp32_row");
    }
    /**
     * {@snippet lang=c :
     * void ggml_bf16_to_fp32_row(struct ggml_bf16_t*, float*, long long);
     * }
     */
    public static void ggml_bf16_to_fp32_row(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = ggml_bf16_to_fp32_row$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_fp32_to_bf16_row_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$1,"ggml_fp32_to_bf16_row_ref");
    }
    /**
     * {@snippet lang=c :
     * void ggml_fp32_to_bf16_row_ref(float*, struct ggml_bf16_t*, long long);
     * }
     */
    public static void ggml_fp32_to_bf16_row_ref(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = ggml_fp32_to_bf16_row_ref$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_fp32_to_bf16_row$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$2,"ggml_fp32_to_bf16_row");
    }
    /**
     * {@snippet lang=c :
     * void ggml_fp32_to_bf16_row(float*, struct ggml_bf16_t*, long long);
     * }
     */
    public static void ggml_fp32_to_bf16_row(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = ggml_fp32_to_bf16_row$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_F32 = 0;
     * }
     */
    public static int GGML_TYPE_F32() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_F16 = 1;
     * }
     */
    public static int GGML_TYPE_F16() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_Q4_0 = 2;
     * }
     */
    public static int GGML_TYPE_Q4_0() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_Q4_1 = 3;
     * }
     */
    public static int GGML_TYPE_Q4_1() {
        return (int)3L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_Q5_0 = 6;
     * }
     */
    public static int GGML_TYPE_Q5_0() {
        return (int)6L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_Q5_1 = 7;
     * }
     */
    public static int GGML_TYPE_Q5_1() {
        return (int)7L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_Q8_0 = 8;
     * }
     */
    public static int GGML_TYPE_Q8_0() {
        return (int)8L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_Q8_1 = 9;
     * }
     */
    public static int GGML_TYPE_Q8_1() {
        return (int)9L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_Q2_K = 10;
     * }
     */
    public static int GGML_TYPE_Q2_K() {
        return (int)10L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_Q3_K = 11;
     * }
     */
    public static int GGML_TYPE_Q3_K() {
        return (int)11L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_Q4_K = 12;
     * }
     */
    public static int GGML_TYPE_Q4_K() {
        return (int)12L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_Q5_K = 13;
     * }
     */
    public static int GGML_TYPE_Q5_K() {
        return (int)13L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_Q6_K = 14;
     * }
     */
    public static int GGML_TYPE_Q6_K() {
        return (int)14L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_Q8_K = 15;
     * }
     */
    public static int GGML_TYPE_Q8_K() {
        return (int)15L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_IQ2_XXS = 16;
     * }
     */
    public static int GGML_TYPE_IQ2_XXS() {
        return (int)16L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_IQ2_XS = 17;
     * }
     */
    public static int GGML_TYPE_IQ2_XS() {
        return (int)17L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_IQ3_XXS = 18;
     * }
     */
    public static int GGML_TYPE_IQ3_XXS() {
        return (int)18L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_IQ1_S = 19;
     * }
     */
    public static int GGML_TYPE_IQ1_S() {
        return (int)19L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_IQ4_NL = 20;
     * }
     */
    public static int GGML_TYPE_IQ4_NL() {
        return (int)20L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_IQ3_S = 21;
     * }
     */
    public static int GGML_TYPE_IQ3_S() {
        return (int)21L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_IQ2_S = 22;
     * }
     */
    public static int GGML_TYPE_IQ2_S() {
        return (int)22L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_IQ4_XS = 23;
     * }
     */
    public static int GGML_TYPE_IQ4_XS() {
        return (int)23L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_I8 = 24;
     * }
     */
    public static int GGML_TYPE_I8() {
        return (int)24L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_I16 = 25;
     * }
     */
    public static int GGML_TYPE_I16() {
        return (int)25L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_I32 = 26;
     * }
     */
    public static int GGML_TYPE_I32() {
        return (int)26L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_I64 = 27;
     * }
     */
    public static int GGML_TYPE_I64() {
        return (int)27L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_F64 = 28;
     * }
     */
    public static int GGML_TYPE_F64() {
        return (int)28L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_IQ1_M = 29;
     * }
     */
    public static int GGML_TYPE_IQ1_M() {
        return (int)29L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_BF16 = 30;
     * }
     */
    public static int GGML_TYPE_BF16() {
        return (int)30L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_TQ1_0 = 34;
     * }
     */
    public static int GGML_TYPE_TQ1_0() {
        return (int)34L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_TQ2_0 = 35;
     * }
     */
    public static int GGML_TYPE_TQ2_0() {
        return (int)35L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_COUNT = 39;
     * }
     */
    public static int GGML_TYPE_COUNT() {
        return (int)39L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_prec.GGML_PREC_DEFAULT = 0;
     * }
     */
    public static int GGML_PREC_DEFAULT() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_prec.GGML_PREC_F32 = 1;
     * }
     */
    public static int GGML_PREC_F32() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_UNKNOWN = -1;
     * }
     */
    public static int GGML_FTYPE_UNKNOWN() {
        return (int)-1L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_ALL_F32 = 0;
     * }
     */
    public static int GGML_FTYPE_ALL_F32() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_F16 = 1;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_F16() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q4_0 = 2;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q4_0() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q4_1 = 3;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q4_1() {
        return (int)3L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q4_1_SOME_F16 = 4;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q4_1_SOME_F16() {
        return (int)4L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q8_0 = 7;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q8_0() {
        return (int)7L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q5_0 = 8;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q5_0() {
        return (int)8L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q5_1 = 9;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q5_1() {
        return (int)9L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q2_K = 10;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q2_K() {
        return (int)10L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q3_K = 11;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q3_K() {
        return (int)11L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q4_K = 12;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q4_K() {
        return (int)12L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q5_K = 13;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q5_K() {
        return (int)13L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q6_K = 14;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q6_K() {
        return (int)14L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_IQ2_XXS = 15;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_IQ2_XXS() {
        return (int)15L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_IQ2_XS = 16;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_IQ2_XS() {
        return (int)16L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_IQ3_XXS = 17;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_IQ3_XXS() {
        return (int)17L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_IQ1_S = 18;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_IQ1_S() {
        return (int)18L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_IQ4_NL = 19;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_IQ4_NL() {
        return (int)19L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_IQ3_S = 20;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_IQ3_S() {
        return (int)20L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_IQ2_S = 21;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_IQ2_S() {
        return (int)21L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_IQ4_XS = 22;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_IQ4_XS() {
        return (int)22L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_IQ1_M = 23;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_IQ1_M() {
        return (int)23L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_BF16 = 24;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_BF16() {
        return (int)24L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_NONE = 0;
     * }
     */
    public static int GGML_OP_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_DUP = 1;
     * }
     */
    public static int GGML_OP_DUP() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_ADD = 2;
     * }
     */
    public static int GGML_OP_ADD() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_ADD1 = 3;
     * }
     */
    public static int GGML_OP_ADD1() {
        return (int)3L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_ACC = 4;
     * }
     */
    public static int GGML_OP_ACC() {
        return (int)4L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_SUB = 5;
     * }
     */
    public static int GGML_OP_SUB() {
        return (int)5L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_MUL = 6;
     * }
     */
    public static int GGML_OP_MUL() {
        return (int)6L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_DIV = 7;
     * }
     */
    public static int GGML_OP_DIV() {
        return (int)7L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_SQR = 8;
     * }
     */
    public static int GGML_OP_SQR() {
        return (int)8L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_SQRT = 9;
     * }
     */
    public static int GGML_OP_SQRT() {
        return (int)9L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_LOG = 10;
     * }
     */
    public static int GGML_OP_LOG() {
        return (int)10L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_SIN = 11;
     * }
     */
    public static int GGML_OP_SIN() {
        return (int)11L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_COS = 12;
     * }
     */
    public static int GGML_OP_COS() {
        return (int)12L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_SUM = 13;
     * }
     */
    public static int GGML_OP_SUM() {
        return (int)13L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_SUM_ROWS = 14;
     * }
     */
    public static int GGML_OP_SUM_ROWS() {
        return (int)14L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_MEAN = 15;
     * }
     */
    public static int GGML_OP_MEAN() {
        return (int)15L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_ARGMAX = 16;
     * }
     */
    public static int GGML_OP_ARGMAX() {
        return (int)16L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_COUNT_EQUAL = 17;
     * }
     */
    public static int GGML_OP_COUNT_EQUAL() {
        return (int)17L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_REPEAT = 18;
     * }
     */
    public static int GGML_OP_REPEAT() {
        return (int)18L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_REPEAT_BACK = 19;
     * }
     */
    public static int GGML_OP_REPEAT_BACK() {
        return (int)19L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_CONCAT = 20;
     * }
     */
    public static int GGML_OP_CONCAT() {
        return (int)20L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_SILU_BACK = 21;
     * }
     */
    public static int GGML_OP_SILU_BACK() {
        return (int)21L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_NORM = 22;
     * }
     */
    public static int GGML_OP_NORM() {
        return (int)22L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_RMS_NORM = 23;
     * }
     */
    public static int GGML_OP_RMS_NORM() {
        return (int)23L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_RMS_NORM_BACK = 24;
     * }
     */
    public static int GGML_OP_RMS_NORM_BACK() {
        return (int)24L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_GROUP_NORM = 25;
     * }
     */
    public static int GGML_OP_GROUP_NORM() {
        return (int)25L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_MUL_MAT = 26;
     * }
     */
    public static int GGML_OP_MUL_MAT() {
        return (int)26L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_MUL_MAT_ID = 27;
     * }
     */
    public static int GGML_OP_MUL_MAT_ID() {
        return (int)27L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_OUT_PROD = 28;
     * }
     */
    public static int GGML_OP_OUT_PROD() {
        return (int)28L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_SCALE = 29;
     * }
     */
    public static int GGML_OP_SCALE() {
        return (int)29L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_SET = 30;
     * }
     */
    public static int GGML_OP_SET() {
        return (int)30L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_CPY = 31;
     * }
     */
    public static int GGML_OP_CPY() {
        return (int)31L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_CONT = 32;
     * }
     */
    public static int GGML_OP_CONT() {
        return (int)32L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_RESHAPE = 33;
     * }
     */
    public static int GGML_OP_RESHAPE() {
        return (int)33L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_VIEW = 34;
     * }
     */
    public static int GGML_OP_VIEW() {
        return (int)34L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_PERMUTE = 35;
     * }
     */
    public static int GGML_OP_PERMUTE() {
        return (int)35L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_TRANSPOSE = 36;
     * }
     */
    public static int GGML_OP_TRANSPOSE() {
        return (int)36L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_GET_ROWS = 37;
     * }
     */
    public static int GGML_OP_GET_ROWS() {
        return (int)37L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_GET_ROWS_BACK = 38;
     * }
     */
    public static int GGML_OP_GET_ROWS_BACK() {
        return (int)38L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_DIAG = 39;
     * }
     */
    public static int GGML_OP_DIAG() {
        return (int)39L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_DIAG_MASK_INF = 40;
     * }
     */
    public static int GGML_OP_DIAG_MASK_INF() {
        return (int)40L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_DIAG_MASK_ZERO = 41;
     * }
     */
    public static int GGML_OP_DIAG_MASK_ZERO() {
        return (int)41L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_SOFT_MAX = 42;
     * }
     */
    public static int GGML_OP_SOFT_MAX() {
        return (int)42L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_SOFT_MAX_BACK = 43;
     * }
     */
    public static int GGML_OP_SOFT_MAX_BACK() {
        return (int)43L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_ROPE = 44;
     * }
     */
    public static int GGML_OP_ROPE() {
        return (int)44L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_ROPE_BACK = 45;
     * }
     */
    public static int GGML_OP_ROPE_BACK() {
        return (int)45L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_CLAMP = 46;
     * }
     */
    public static int GGML_OP_CLAMP() {
        return (int)46L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_CONV_TRANSPOSE_1D = 47;
     * }
     */
    public static int GGML_OP_CONV_TRANSPOSE_1D() {
        return (int)47L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_IM2COL = 48;
     * }
     */
    public static int GGML_OP_IM2COL() {
        return (int)48L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_IM2COL_BACK = 49;
     * }
     */
    public static int GGML_OP_IM2COL_BACK() {
        return (int)49L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_CONV_TRANSPOSE_2D = 50;
     * }
     */
    public static int GGML_OP_CONV_TRANSPOSE_2D() {
        return (int)50L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_POOL_1D = 51;
     * }
     */
    public static int GGML_OP_POOL_1D() {
        return (int)51L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_POOL_2D = 52;
     * }
     */
    public static int GGML_OP_POOL_2D() {
        return (int)52L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_POOL_2D_BACK = 53;
     * }
     */
    public static int GGML_OP_POOL_2D_BACK() {
        return (int)53L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_UPSCALE = 54;
     * }
     */
    public static int GGML_OP_UPSCALE() {
        return (int)54L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_PAD = 55;
     * }
     */
    public static int GGML_OP_PAD() {
        return (int)55L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_PAD_REFLECT_1D = 56;
     * }
     */
    public static int GGML_OP_PAD_REFLECT_1D() {
        return (int)56L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_ARANGE = 57;
     * }
     */
    public static int GGML_OP_ARANGE() {
        return (int)57L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_TIMESTEP_EMBEDDING = 58;
     * }
     */
    public static int GGML_OP_TIMESTEP_EMBEDDING() {
        return (int)58L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_ARGSORT = 59;
     * }
     */
    public static int GGML_OP_ARGSORT() {
        return (int)59L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_LEAKY_RELU = 60;
     * }
     */
    public static int GGML_OP_LEAKY_RELU() {
        return (int)60L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_FLASH_ATTN_EXT = 61;
     * }
     */
    public static int GGML_OP_FLASH_ATTN_EXT() {
        return (int)61L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_FLASH_ATTN_BACK = 62;
     * }
     */
    public static int GGML_OP_FLASH_ATTN_BACK() {
        return (int)62L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_SSM_CONV = 63;
     * }
     */
    public static int GGML_OP_SSM_CONV() {
        return (int)63L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_SSM_SCAN = 64;
     * }
     */
    public static int GGML_OP_SSM_SCAN() {
        return (int)64L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_WIN_PART = 65;
     * }
     */
    public static int GGML_OP_WIN_PART() {
        return (int)65L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_WIN_UNPART = 66;
     * }
     */
    public static int GGML_OP_WIN_UNPART() {
        return (int)66L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_GET_REL_POS = 67;
     * }
     */
    public static int GGML_OP_GET_REL_POS() {
        return (int)67L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_ADD_REL_POS = 68;
     * }
     */
    public static int GGML_OP_ADD_REL_POS() {
        return (int)68L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_RWKV_WKV6 = 69;
     * }
     */
    public static int GGML_OP_RWKV_WKV6() {
        return (int)69L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_GATED_LINEAR_ATTN = 70;
     * }
     */
    public static int GGML_OP_GATED_LINEAR_ATTN() {
        return (int)70L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_UNARY = 71;
     * }
     */
    public static int GGML_OP_UNARY() {
        return (int)71L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_MAP_UNARY = 72;
     * }
     */
    public static int GGML_OP_MAP_UNARY() {
        return (int)72L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_MAP_BINARY = 73;
     * }
     */
    public static int GGML_OP_MAP_BINARY() {
        return (int)73L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_MAP_CUSTOM1_F32 = 74;
     * }
     */
    public static int GGML_OP_MAP_CUSTOM1_F32() {
        return (int)74L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_MAP_CUSTOM2_F32 = 75;
     * }
     */
    public static int GGML_OP_MAP_CUSTOM2_F32() {
        return (int)75L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_MAP_CUSTOM3_F32 = 76;
     * }
     */
    public static int GGML_OP_MAP_CUSTOM3_F32() {
        return (int)76L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_MAP_CUSTOM1 = 77;
     * }
     */
    public static int GGML_OP_MAP_CUSTOM1() {
        return (int)77L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_MAP_CUSTOM2 = 78;
     * }
     */
    public static int GGML_OP_MAP_CUSTOM2() {
        return (int)78L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_MAP_CUSTOM3 = 79;
     * }
     */
    public static int GGML_OP_MAP_CUSTOM3() {
        return (int)79L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_CROSS_ENTROPY_LOSS = 80;
     * }
     */
    public static int GGML_OP_CROSS_ENTROPY_LOSS() {
        return (int)80L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_CROSS_ENTROPY_LOSS_BACK = 81;
     * }
     */
    public static int GGML_OP_CROSS_ENTROPY_LOSS_BACK() {
        return (int)81L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_OPT_STEP_ADAMW = 82;
     * }
     */
    public static int GGML_OP_OPT_STEP_ADAMW() {
        return (int)82L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_COUNT = 83;
     * }
     */
    public static int GGML_OP_COUNT() {
        return (int)83L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_ABS = 0;
     * }
     */
    public static int GGML_UNARY_OP_ABS() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_SGN = 1;
     * }
     */
    public static int GGML_UNARY_OP_SGN() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_NEG = 2;
     * }
     */
    public static int GGML_UNARY_OP_NEG() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_STEP = 3;
     * }
     */
    public static int GGML_UNARY_OP_STEP() {
        return (int)3L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_TANH = 4;
     * }
     */
    public static int GGML_UNARY_OP_TANH() {
        return (int)4L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_ELU = 5;
     * }
     */
    public static int GGML_UNARY_OP_ELU() {
        return (int)5L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_RELU = 6;
     * }
     */
    public static int GGML_UNARY_OP_RELU() {
        return (int)6L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_SIGMOID = 7;
     * }
     */
    public static int GGML_UNARY_OP_SIGMOID() {
        return (int)7L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_GELU = 8;
     * }
     */
    public static int GGML_UNARY_OP_GELU() {
        return (int)8L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_GELU_QUICK = 9;
     * }
     */
    public static int GGML_UNARY_OP_GELU_QUICK() {
        return (int)9L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_SILU = 10;
     * }
     */
    public static int GGML_UNARY_OP_SILU() {
        return (int)10L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_HARDSWISH = 11;
     * }
     */
    public static int GGML_UNARY_OP_HARDSWISH() {
        return (int)11L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_HARDSIGMOID = 12;
     * }
     */
    public static int GGML_UNARY_OP_HARDSIGMOID() {
        return (int)12L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_EXP = 13;
     * }
     */
    public static int GGML_UNARY_OP_EXP() {
        return (int)13L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_COUNT = 14;
     * }
     */
    public static int GGML_UNARY_OP_COUNT() {
        return (int)14L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_object_type.GGML_OBJECT_TYPE_TENSOR = 0;
     * }
     */
    public static int GGML_OBJECT_TYPE_TENSOR() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_object_type.GGML_OBJECT_TYPE_GRAPH = 1;
     * }
     */
    public static int GGML_OBJECT_TYPE_GRAPH() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_object_type.GGML_OBJECT_TYPE_WORK_BUFFER = 2;
     * }
     */
    public static int GGML_OBJECT_TYPE_WORK_BUFFER() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_log_level.GGML_LOG_LEVEL_NONE = 0;
     * }
     */
    public static int GGML_LOG_LEVEL_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_log_level.GGML_LOG_LEVEL_DEBUG = 1;
     * }
     */
    public static int GGML_LOG_LEVEL_DEBUG() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_log_level.GGML_LOG_LEVEL_INFO = 2;
     * }
     */
    public static int GGML_LOG_LEVEL_INFO() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_log_level.GGML_LOG_LEVEL_WARN = 3;
     * }
     */
    public static int GGML_LOG_LEVEL_WARN() {
        return (int)3L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_log_level.GGML_LOG_LEVEL_ERROR = 4;
     * }
     */
    public static int GGML_LOG_LEVEL_ERROR() {
        return (int)4L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_log_level.GGML_LOG_LEVEL_CONT = 5;
     * }
     */
    public static int GGML_LOG_LEVEL_CONT() {
        return (int)5L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_tensor_flag.GGML_TENSOR_FLAG_INPUT = 1;
     * }
     */
    public static int GGML_TENSOR_FLAG_INPUT() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_tensor_flag.GGML_TENSOR_FLAG_OUTPUT = 2;
     * }
     */
    public static int GGML_TENSOR_FLAG_OUTPUT() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_tensor_flag.GGML_TENSOR_FLAG_PARAM = 4;
     * }
     */
    public static int GGML_TENSOR_FLAG_PARAM() {
        return (int)4L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_tensor_flag.GGML_TENSOR_FLAG_LOSS = 8;
     * }
     */
    public static int GGML_TENSOR_FLAG_LOSS() {
        return (int)8L;
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned char *ggml_guid_t[16];
     * }
     */
    public static final AddressLayout ggml_guid_t = RuntimeHelper.POINTER;
    public static MethodHandle ggml_guid_matches$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$2,"ggml_guid_matches");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_guid_matches(unsigned char *guid_a[16], unsigned char *guid_b[16]);
     * }
     */
    public static boolean ggml_guid_matches(MemorySegment guid_a, MemorySegment guid_b) {
        var mh$ = ggml_guid_matches$MH();
        try {
            return (boolean)mh$.invokeExact(guid_a, guid_b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_time_init$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$4,"ggml_time_init");
    }
    /**
     * {@snippet lang=c :
     * void ggml_time_init();
     * }
     */
    public static void ggml_time_init() {
        var mh$ = ggml_time_init$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_time_ms$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$6,"ggml_time_ms");
    }
    /**
     * {@snippet lang=c :
     * long long ggml_time_ms();
     * }
     */
    public static long ggml_time_ms() {
        var mh$ = ggml_time_ms$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_time_us$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$0,"ggml_time_us");
    }
    /**
     * {@snippet lang=c :
     * long long ggml_time_us();
     * }
     */
    public static long ggml_time_us() {
        var mh$ = ggml_time_us$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cycles$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$1,"ggml_cycles");
    }
    /**
     * {@snippet lang=c :
     * long long ggml_cycles();
     * }
     */
    public static long ggml_cycles() {
        var mh$ = ggml_cycles$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cycles_per_ms$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$2,"ggml_cycles_per_ms");
    }
    /**
     * {@snippet lang=c :
     * long long ggml_cycles_per_ms();
     * }
     */
    public static long ggml_cycles_per_ms() {
        var mh$ = ggml_cycles_per_ms$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_fopen$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$3,"ggml_fopen");
    }
    /**
     * {@snippet lang=c :
     * struct __sFILE* ggml_fopen(char* fname, char* mode);
     * }
     */
    public static MemorySegment ggml_fopen(MemorySegment fname, MemorySegment mode) {
        var mh$ = ggml_fopen$MH();
        try {
            return (MemorySegment)mh$.invokeExact(fname, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_print_object$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$4,"ggml_print_object");
    }
    /**
     * {@snippet lang=c :
     * void ggml_print_object(struct ggml_object* obj);
     * }
     */
    public static void ggml_print_object(MemorySegment obj) {
        var mh$ = ggml_print_object$MH();
        try {
            mh$.invokeExact(obj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_print_objects$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$5,"ggml_print_objects");
    }
    /**
     * {@snippet lang=c :
     * void ggml_print_objects(struct ggml_context* ctx);
     * }
     */
    public static void ggml_print_objects(MemorySegment ctx) {
        var mh$ = ggml_print_objects$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_nelements$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$0,"ggml_nelements");
    }
    /**
     * {@snippet lang=c :
     * long long ggml_nelements(struct ggml_tensor* tensor);
     * }
     */
    public static long ggml_nelements(MemorySegment tensor) {
        var mh$ = ggml_nelements$MH();
        try {
            return (long)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_nrows$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$1,"ggml_nrows");
    }
    /**
     * {@snippet lang=c :
     * long long ggml_nrows(struct ggml_tensor* tensor);
     * }
     */
    public static long ggml_nrows(MemorySegment tensor) {
        var mh$ = ggml_nrows$MH();
        try {
            return (long)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_nbytes$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$2,"ggml_nbytes");
    }
    /**
     * {@snippet lang=c :
     * unsigned long ggml_nbytes(struct ggml_tensor* tensor);
     * }
     */
    public static long ggml_nbytes(MemorySegment tensor) {
        var mh$ = ggml_nbytes$MH();
        try {
            return (long)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_nbytes_pad$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$3,"ggml_nbytes_pad");
    }
    /**
     * {@snippet lang=c :
     * unsigned long ggml_nbytes_pad(struct ggml_tensor* tensor);
     * }
     */
    public static long ggml_nbytes_pad(MemorySegment tensor) {
        var mh$ = ggml_nbytes_pad$MH();
        try {
            return (long)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_blck_size$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$5,"ggml_blck_size");
    }
    /**
     * {@snippet lang=c :
     * long long ggml_blck_size(enum ggml_type type);
     * }
     */
    public static long ggml_blck_size(int type) {
        var mh$ = ggml_blck_size$MH();
        try {
            return (long)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_type_size$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$0,"ggml_type_size");
    }
    /**
     * {@snippet lang=c :
     * unsigned long ggml_type_size(enum ggml_type type);
     * }
     */
    public static long ggml_type_size(int type) {
        var mh$ = ggml_type_size$MH();
        try {
            return (long)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_row_size$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$2,"ggml_row_size");
    }
    /**
     * {@snippet lang=c :
     * unsigned long ggml_row_size(enum ggml_type type, long long ne);
     * }
     */
    public static long ggml_row_size(int type, long ne) {
        var mh$ = ggml_row_size$MH();
        try {
            return (long)mh$.invokeExact(type, ne);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_type_sizef$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$4,"ggml_type_sizef");
    }
    /**
     * {@snippet lang=c :
     * double ggml_type_sizef(enum ggml_type type);
     * }
     */
    public static double ggml_type_sizef(int type) {
        var mh$ = ggml_type_sizef$MH();
        try {
            return (double)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_type_name$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$5,"ggml_type_name");
    }
    /**
     * {@snippet lang=c :
     * char* ggml_type_name(enum ggml_type type);
     * }
     */
    public static MemorySegment ggml_type_name(int type) {
        var mh$ = ggml_type_name$MH();
        try {
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_op_name$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$0,"ggml_op_name");
    }
    /**
     * {@snippet lang=c :
     * char* ggml_op_name(enum ggml_op op);
     * }
     */
    public static MemorySegment ggml_op_name(int op) {
        var mh$ = ggml_op_name$MH();
        try {
            return (MemorySegment)mh$.invokeExact(op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_op_symbol$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$1,"ggml_op_symbol");
    }
    /**
     * {@snippet lang=c :
     * char* ggml_op_symbol(enum ggml_op op);
     * }
     */
    public static MemorySegment ggml_op_symbol(int op) {
        var mh$ = ggml_op_symbol$MH();
        try {
            return (MemorySegment)mh$.invokeExact(op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_unary_op_name$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$2,"ggml_unary_op_name");
    }
    /**
     * {@snippet lang=c :
     * char* ggml_unary_op_name(enum ggml_unary_op op);
     * }
     */
    public static MemorySegment ggml_unary_op_name(int op) {
        var mh$ = ggml_unary_op_name$MH();
        try {
            return (MemorySegment)mh$.invokeExact(op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_op_desc$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$3,"ggml_op_desc");
    }
    /**
     * {@snippet lang=c :
     * char* ggml_op_desc(struct ggml_tensor* t);
     * }
     */
    public static MemorySegment ggml_op_desc(MemorySegment t) {
        var mh$ = ggml_op_desc$MH();
        try {
            return (MemorySegment)mh$.invokeExact(t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_element_size$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$4,"ggml_element_size");
    }
    /**
     * {@snippet lang=c :
     * unsigned long ggml_element_size(struct ggml_tensor* tensor);
     * }
     */
    public static long ggml_element_size(MemorySegment tensor) {
        var mh$ = ggml_element_size$MH();
        try {
            return (long)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_is_quantized$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$6,"ggml_is_quantized");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_is_quantized(enum ggml_type type);
     * }
     */
    public static boolean ggml_is_quantized(int type) {
        var mh$ = ggml_is_quantized$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_ftype_to_ggml_type$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$0,"ggml_ftype_to_ggml_type");
    }
    /**
     * {@snippet lang=c :
     * enum ggml_type ggml_ftype_to_ggml_type(enum ggml_ftype ftype);
     * }
     */
    public static int ggml_ftype_to_ggml_type(int ftype) {
        var mh$ = ggml_ftype_to_ggml_type$MH();
        try {
            return (int)mh$.invokeExact(ftype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_is_transposed$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$1,"ggml_is_transposed");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_is_transposed(struct ggml_tensor* tensor);
     * }
     */
    public static boolean ggml_is_transposed(MemorySegment tensor) {
        var mh$ = ggml_is_transposed$MH();
        try {
            return (boolean)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_is_permuted$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$2,"ggml_is_permuted");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_is_permuted(struct ggml_tensor* tensor);
     * }
     */
    public static boolean ggml_is_permuted(MemorySegment tensor) {
        var mh$ = ggml_is_permuted$MH();
        try {
            return (boolean)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_is_empty$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$3,"ggml_is_empty");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_is_empty(struct ggml_tensor* tensor);
     * }
     */
    public static boolean ggml_is_empty(MemorySegment tensor) {
        var mh$ = ggml_is_empty$MH();
        try {
            return (boolean)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_is_scalar$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$4,"ggml_is_scalar");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_is_scalar(struct ggml_tensor* tensor);
     * }
     */
    public static boolean ggml_is_scalar(MemorySegment tensor) {
        var mh$ = ggml_is_scalar$MH();
        try {
            return (boolean)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_is_vector$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$5,"ggml_is_vector");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_is_vector(struct ggml_tensor* tensor);
     * }
     */
    public static boolean ggml_is_vector(MemorySegment tensor) {
        var mh$ = ggml_is_vector$MH();
        try {
            return (boolean)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_is_matrix$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$0,"ggml_is_matrix");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_is_matrix(struct ggml_tensor* tensor);
     * }
     */
    public static boolean ggml_is_matrix(MemorySegment tensor) {
        var mh$ = ggml_is_matrix$MH();
        try {
            return (boolean)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_is_3d$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$1,"ggml_is_3d");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_is_3d(struct ggml_tensor* tensor);
     * }
     */
    public static boolean ggml_is_3d(MemorySegment tensor) {
        var mh$ = ggml_is_3d$MH();
        try {
            return (boolean)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_n_dims$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$2,"ggml_n_dims");
    }
    /**
     * {@snippet lang=c :
     * int ggml_n_dims(struct ggml_tensor* tensor);
     * }
     */
    public static int ggml_n_dims(MemorySegment tensor) {
        var mh$ = ggml_n_dims$MH();
        try {
            return (int)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_is_contiguous$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$3,"ggml_is_contiguous");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_is_contiguous(struct ggml_tensor* tensor);
     * }
     */
    public static boolean ggml_is_contiguous(MemorySegment tensor) {
        var mh$ = ggml_is_contiguous$MH();
        try {
            return (boolean)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_is_contiguous_0$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$4,"ggml_is_contiguous_0");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_is_contiguous_0(struct ggml_tensor* tensor);
     * }
     */
    public static boolean ggml_is_contiguous_0(MemorySegment tensor) {
        var mh$ = ggml_is_contiguous_0$MH();
        try {
            return (boolean)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_is_contiguous_1$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$5,"ggml_is_contiguous_1");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_is_contiguous_1(struct ggml_tensor* tensor);
     * }
     */
    public static boolean ggml_is_contiguous_1(MemorySegment tensor) {
        var mh$ = ggml_is_contiguous_1$MH();
        try {
            return (boolean)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_is_contiguous_2$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$0,"ggml_is_contiguous_2");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_is_contiguous_2(struct ggml_tensor* tensor);
     * }
     */
    public static boolean ggml_is_contiguous_2(MemorySegment tensor) {
        var mh$ = ggml_is_contiguous_2$MH();
        try {
            return (boolean)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_are_same_shape$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$1,"ggml_are_same_shape");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_are_same_shape(struct ggml_tensor* t0, struct ggml_tensor* t1);
     * }
     */
    public static boolean ggml_are_same_shape(MemorySegment t0, MemorySegment t1) {
        var mh$ = ggml_are_same_shape$MH();
        try {
            return (boolean)mh$.invokeExact(t0, t1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_are_same_stride$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$2,"ggml_are_same_stride");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_are_same_stride(struct ggml_tensor* t0, struct ggml_tensor* t1);
     * }
     */
    public static boolean ggml_are_same_stride(MemorySegment t0, MemorySegment t1) {
        var mh$ = ggml_are_same_stride$MH();
        try {
            return (boolean)mh$.invokeExact(t0, t1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_can_repeat$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$3,"ggml_can_repeat");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_can_repeat(struct ggml_tensor* t0, struct ggml_tensor* t1);
     * }
     */
    public static boolean ggml_can_repeat(MemorySegment t0, MemorySegment t1) {
        var mh$ = ggml_can_repeat$MH();
        try {
            return (boolean)mh$.invokeExact(t0, t1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_tensor_overhead$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$4,"ggml_tensor_overhead");
    }
    /**
     * {@snippet lang=c :
     * unsigned long ggml_tensor_overhead();
     * }
     */
    public static long ggml_tensor_overhead() {
        var mh$ = ggml_tensor_overhead$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_validate_row_data$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$6,"ggml_validate_row_data");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_validate_row_data(enum ggml_type type, void* data, unsigned long nbytes);
     * }
     */
    public static boolean ggml_validate_row_data(int type, MemorySegment data, long nbytes) {
        var mh$ = ggml_validate_row_data$MH();
        try {
            return (boolean)mh$.invokeExact(type, data, nbytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_init$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$1,"ggml_init");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_context* ggml_init(struct ggml_init_params params);
     * }
     */
    public static MemorySegment ggml_init(MemorySegment params) {
        var mh$ = ggml_init$MH();
        try {
            return (MemorySegment)mh$.invokeExact(params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$2,"ggml_reset");
    }
    /**
     * {@snippet lang=c :
     * void ggml_reset(struct ggml_context* ctx);
     * }
     */
    public static void ggml_reset(MemorySegment ctx) {
        var mh$ = ggml_reset$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_free$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$3,"ggml_free");
    }
    /**
     * {@snippet lang=c :
     * void ggml_free(struct ggml_context* ctx);
     * }
     */
    public static void ggml_free(MemorySegment ctx) {
        var mh$ = ggml_free$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_used_mem$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$4,"ggml_used_mem");
    }
    /**
     * {@snippet lang=c :
     * unsigned long ggml_used_mem(struct ggml_context* ctx);
     * }
     */
    public static long ggml_used_mem(MemorySegment ctx) {
        var mh$ = ggml_used_mem$MH();
        try {
            return (long)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_no_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$5,"ggml_get_no_alloc");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_get_no_alloc(struct ggml_context* ctx);
     * }
     */
    public static boolean ggml_get_no_alloc(MemorySegment ctx) {
        var mh$ = ggml_get_no_alloc$MH();
        try {
            return (boolean)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_no_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$1,"ggml_set_no_alloc");
    }
    /**
     * {@snippet lang=c :
     * void ggml_set_no_alloc(struct ggml_context* ctx, _Bool no_alloc);
     * }
     */
    public static void ggml_set_no_alloc(MemorySegment ctx, boolean no_alloc) {
        var mh$ = ggml_set_no_alloc$MH();
        try {
            mh$.invokeExact(ctx, no_alloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_mem_buffer$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$2,"ggml_get_mem_buffer");
    }
    /**
     * {@snippet lang=c :
     * void* ggml_get_mem_buffer(struct ggml_context* ctx);
     * }
     */
    public static MemorySegment ggml_get_mem_buffer(MemorySegment ctx) {
        var mh$ = ggml_get_mem_buffer$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_mem_size$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$3,"ggml_get_mem_size");
    }
    /**
     * {@snippet lang=c :
     * unsigned long ggml_get_mem_size(struct ggml_context* ctx);
     * }
     */
    public static long ggml_get_mem_size(MemorySegment ctx) {
        var mh$ = ggml_get_mem_size$MH();
        try {
            return (long)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_max_tensor_size$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$4,"ggml_get_max_tensor_size");
    }
    /**
     * {@snippet lang=c :
     * unsigned long ggml_get_max_tensor_size(struct ggml_context* ctx);
     * }
     */
    public static long ggml_get_max_tensor_size(MemorySegment ctx) {
        var mh$ = ggml_get_max_tensor_size$MH();
        try {
            return (long)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_new_tensor$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$6,"ggml_new_tensor");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_new_tensor(struct ggml_context* ctx, enum ggml_type type, int n_dims, long long* ne);
     * }
     */
    public static MemorySegment ggml_new_tensor(MemorySegment ctx, int type, int n_dims, MemorySegment ne) {
        var mh$ = ggml_new_tensor$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, type, n_dims, ne);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_new_tensor_1d$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$1,"ggml_new_tensor_1d");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_new_tensor_1d(struct ggml_context* ctx, enum ggml_type type, long long ne0);
     * }
     */
    public static MemorySegment ggml_new_tensor_1d(MemorySegment ctx, int type, long ne0) {
        var mh$ = ggml_new_tensor_1d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, type, ne0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_new_tensor_2d$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$3,"ggml_new_tensor_2d");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_new_tensor_2d(struct ggml_context* ctx, enum ggml_type type, long long ne0, long long ne1);
     * }
     */
    public static MemorySegment ggml_new_tensor_2d(MemorySegment ctx, int type, long ne0, long ne1) {
        var mh$ = ggml_new_tensor_2d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, type, ne0, ne1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_new_tensor_3d$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$5,"ggml_new_tensor_3d");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_new_tensor_3d(struct ggml_context* ctx, enum ggml_type type, long long ne0, long long ne1, long long ne2);
     * }
     */
    public static MemorySegment ggml_new_tensor_3d(MemorySegment ctx, int type, long ne0, long ne1, long ne2) {
        var mh$ = ggml_new_tensor_3d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, type, ne0, ne1, ne2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_new_tensor_4d$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$1,"ggml_new_tensor_4d");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_new_tensor_4d(struct ggml_context* ctx, enum ggml_type type, long long ne0, long long ne1, long long ne2, long long ne3);
     * }
     */
    public static MemorySegment ggml_new_tensor_4d(MemorySegment ctx, int type, long ne0, long ne1, long ne2, long ne3) {
        var mh$ = ggml_new_tensor_4d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, type, ne0, ne1, ne2, ne3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_new_buffer$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$3,"ggml_new_buffer");
    }
    /**
     * {@snippet lang=c :
     * void* ggml_new_buffer(struct ggml_context* ctx, unsigned long nbytes);
     * }
     */
    public static MemorySegment ggml_new_buffer(MemorySegment ctx, long nbytes) {
        var mh$ = ggml_new_buffer$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, nbytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_dup_tensor$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$4,"ggml_dup_tensor");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_dup_tensor(struct ggml_context* ctx, struct ggml_tensor* src);
     * }
     */
    public static MemorySegment ggml_dup_tensor(MemorySegment ctx, MemorySegment src) {
        var mh$ = ggml_dup_tensor$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_view_tensor$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$5,"ggml_view_tensor");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_view_tensor(struct ggml_context* ctx, struct ggml_tensor* src);
     * }
     */
    public static MemorySegment ggml_view_tensor(MemorySegment ctx, MemorySegment src) {
        var mh$ = ggml_view_tensor$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_first_tensor$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$0,"ggml_get_first_tensor");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_get_first_tensor(struct ggml_context* ctx);
     * }
     */
    public static MemorySegment ggml_get_first_tensor(MemorySegment ctx) {
        var mh$ = ggml_get_first_tensor$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_next_tensor$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$1,"ggml_get_next_tensor");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_get_next_tensor(struct ggml_context* ctx, struct ggml_tensor* tensor);
     * }
     */
    public static MemorySegment ggml_get_next_tensor(MemorySegment ctx, MemorySegment tensor) {
        var mh$ = ggml_get_next_tensor$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_tensor$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$2,"ggml_get_tensor");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_get_tensor(struct ggml_context* ctx, char* name);
     * }
     */
    public static MemorySegment ggml_get_tensor(MemorySegment ctx, MemorySegment name) {
        var mh$ = ggml_get_tensor$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_unravel_index$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$4,"ggml_unravel_index");
    }
    /**
     * {@snippet lang=c :
     * void ggml_unravel_index(struct ggml_tensor* tensor, long long i, long long* i0, long long* i1, long long* i2, long long* i3);
     * }
     */
    public static void ggml_unravel_index(MemorySegment tensor, long i, MemorySegment i0, MemorySegment i1, MemorySegment i2, MemorySegment i3) {
        var mh$ = ggml_unravel_index$MH();
        try {
            mh$.invokeExact(tensor, i, i0, i1, i2, i3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_unary_op$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$5,"ggml_get_unary_op");
    }
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op ggml_get_unary_op(struct ggml_tensor* tensor);
     * }
     */
    public static int ggml_get_unary_op(MemorySegment tensor) {
        var mh$ = ggml_get_unary_op$MH();
        try {
            return (int)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_data$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$0,"ggml_get_data");
    }
    /**
     * {@snippet lang=c :
     * void* ggml_get_data(struct ggml_tensor* tensor);
     * }
     */
    public static MemorySegment ggml_get_data(MemorySegment tensor) {
        var mh$ = ggml_get_data$MH();
        try {
            return (MemorySegment)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_data_f32$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$1,"ggml_get_data_f32");
    }
    /**
     * {@snippet lang=c :
     * float* ggml_get_data_f32(struct ggml_tensor* tensor);
     * }
     */
    public static MemorySegment ggml_get_data_f32(MemorySegment tensor) {
        var mh$ = ggml_get_data_f32$MH();
        try {
            return (MemorySegment)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_name$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$2,"ggml_get_name");
    }
    /**
     * {@snippet lang=c :
     * char* ggml_get_name(struct ggml_tensor* tensor);
     * }
     */
    public static MemorySegment ggml_get_name(MemorySegment tensor) {
        var mh$ = ggml_get_name$MH();
        try {
            return (MemorySegment)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_name$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$3,"ggml_set_name");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_set_name(struct ggml_tensor* tensor, char* name);
     * }
     */
    public static MemorySegment ggml_set_name(MemorySegment tensor, MemorySegment name) {
        var mh$ = ggml_set_name$MH();
        try {
            return (MemorySegment)mh$.invokeExact(tensor, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_format_name$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$4,"ggml_format_name");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_format_name(struct ggml_tensor* tensor, char* fmt,...);
     * }
     */
    public static MemorySegment ggml_format_name(MemorySegment tensor, MemorySegment fmt, Object... x2) {
        var mh$ = ggml_format_name$MH();
        try {
            return (MemorySegment)mh$.invokeExact(tensor, fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_input$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$5,"ggml_set_input");
    }
    /**
     * {@snippet lang=c :
     * void ggml_set_input(struct ggml_tensor* tensor);
     * }
     */
    public static void ggml_set_input(MemorySegment tensor) {
        var mh$ = ggml_set_input$MH();
        try {
            mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_output$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$0,"ggml_set_output");
    }
    /**
     * {@snippet lang=c :
     * void ggml_set_output(struct ggml_tensor* tensor);
     * }
     */
    public static void ggml_set_output(MemorySegment tensor) {
        var mh$ = ggml_set_output$MH();
        try {
            mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_param$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$1,"ggml_set_param");
    }
    /**
     * {@snippet lang=c :
     * void ggml_set_param(struct ggml_context* ctx, struct ggml_tensor* tensor);
     * }
     */
    public static void ggml_set_param(MemorySegment ctx, MemorySegment tensor) {
        var mh$ = ggml_set_param$MH();
        try {
            mh$.invokeExact(ctx, tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_loss$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$2,"ggml_set_loss");
    }
    /**
     * {@snippet lang=c :
     * void ggml_set_loss(struct ggml_tensor* tensor);
     * }
     */
    public static void ggml_set_loss(MemorySegment tensor) {
        var mh$ = ggml_set_loss$MH();
        try {
            mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$3,"ggml_dup");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_dup(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_dup(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_dup$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_dup_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$4,"ggml_dup_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_dup_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_dup_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_dup_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_add$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$5,"ggml_add");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_add(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_add(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_add$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_add_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$0,"ggml_add_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_add_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_add_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_add_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_add_cast$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$2,"ggml_add_cast");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_add_cast(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, enum ggml_type type);
     * }
     */
    public static MemorySegment ggml_add_cast(MemorySegment ctx, MemorySegment a, MemorySegment b, int type) {
        var mh$ = ggml_add_cast$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_add1$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$3,"ggml_add1");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_add1(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_add1(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_add1$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_add1_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$4,"ggml_add1_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_add1_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_add1_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_add1_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_acc$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$6,"ggml_acc");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_acc(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, unsigned long nb1, unsigned long nb2, unsigned long nb3, unsigned long offset);
     * }
     */
    public static MemorySegment ggml_acc(MemorySegment ctx, MemorySegment a, MemorySegment b, long nb1, long nb2, long nb3, long offset) {
        var mh$ = ggml_acc$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, nb1, nb2, nb3, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_acc_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$0,"ggml_acc_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_acc_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, unsigned long nb1, unsigned long nb2, unsigned long nb3, unsigned long offset);
     * }
     */
    public static MemorySegment ggml_acc_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b, long nb1, long nb2, long nb3, long offset) {
        var mh$ = ggml_acc_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, nb1, nb2, nb3, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_sub$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$1,"ggml_sub");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_sub(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_sub(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_sub$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_sub_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$2,"ggml_sub_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_sub_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_sub_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_sub_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_mul$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$3,"ggml_mul");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_mul(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_mul(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_mul$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_mul_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$4,"ggml_mul_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_mul_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_mul_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_mul_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_div$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$5,"ggml_div");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_div(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_div(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_div$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_div_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$0,"ggml_div_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_div_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_div_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_div_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_sqr$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$1,"ggml_sqr");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_sqr(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_sqr(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sqr$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_sqr_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$2,"ggml_sqr_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_sqr_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_sqr_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sqr_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_sqrt$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$3,"ggml_sqrt");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_sqrt(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_sqrt(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sqrt$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_sqrt_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$4,"ggml_sqrt_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_sqrt_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_sqrt_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sqrt_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_log$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$5,"ggml_log");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_log(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_log(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_log$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_log_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$0,"ggml_log_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_log_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_log_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_log_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_sin$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$1,"ggml_sin");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_sin(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_sin(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sin$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_sin_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$2,"ggml_sin_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_sin_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_sin_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sin_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cos$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$3,"ggml_cos");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_cos(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_cos(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_cos$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cos_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$4,"ggml_cos_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_cos_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_cos_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_cos_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_sum$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$5,"ggml_sum");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_sum(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_sum(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sum$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_sum_rows$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$0,"ggml_sum_rows");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_sum_rows(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_sum_rows(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sum_rows$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_mean$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$1,"ggml_mean");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_mean(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_mean(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_mean$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_argmax$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$2,"ggml_argmax");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_argmax(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_argmax(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_argmax$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_count_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$3,"ggml_count_equal");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_count_equal(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_count_equal(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_count_equal$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_repeat$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$4,"ggml_repeat");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_repeat(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_repeat(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_repeat$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_repeat_back$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$5,"ggml_repeat_back");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_repeat_back(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_repeat_back(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_repeat_back$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_concat$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$0,"ggml_concat");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_concat(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int dim);
     * }
     */
    public static MemorySegment ggml_concat(MemorySegment ctx, MemorySegment a, MemorySegment b, int dim) {
        var mh$ = ggml_concat$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, dim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_abs$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$1,"ggml_abs");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_abs(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_abs(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_abs$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_abs_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$2,"ggml_abs_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_abs_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_abs_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_abs_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_sgn$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$3,"ggml_sgn");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_sgn(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_sgn(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sgn$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_sgn_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$4,"ggml_sgn_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_sgn_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_sgn_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sgn_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_neg$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$5,"ggml_neg");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_neg(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_neg(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_neg$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_neg_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$0,"ggml_neg_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_neg_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_neg_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_neg_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_step$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$1,"ggml_step");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_step(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_step(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_step$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_step_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$2,"ggml_step_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_step_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_step_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_step_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_tanh$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$3,"ggml_tanh");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_tanh(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_tanh(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_tanh$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_tanh_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$4,"ggml_tanh_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_tanh_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_tanh_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_tanh_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_elu$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$5,"ggml_elu");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_elu(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_elu(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_elu$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_elu_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$0,"ggml_elu_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_elu_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_elu_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_elu_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_relu$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$1,"ggml_relu");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_relu(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_relu(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_relu$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_leaky_relu$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$3,"ggml_leaky_relu");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_leaky_relu(struct ggml_context* ctx, struct ggml_tensor* a, float negative_slope, _Bool inplace);
     * }
     */
    public static MemorySegment ggml_leaky_relu(MemorySegment ctx, MemorySegment a, float negative_slope, boolean inplace) {
        var mh$ = ggml_leaky_relu$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, negative_slope, inplace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_relu_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$4,"ggml_relu_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_relu_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_relu_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_relu_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_sigmoid$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$5,"ggml_sigmoid");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_sigmoid(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_sigmoid(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sigmoid$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_sigmoid_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$0,"ggml_sigmoid_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_sigmoid_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_sigmoid_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sigmoid_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_gelu$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$1,"ggml_gelu");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_gelu(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_gelu(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_gelu$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_gelu_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$2,"ggml_gelu_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_gelu_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_gelu_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_gelu_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_gelu_quick$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$3,"ggml_gelu_quick");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_gelu_quick(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_gelu_quick(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_gelu_quick$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_gelu_quick_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$4,"ggml_gelu_quick_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_gelu_quick_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_gelu_quick_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_gelu_quick_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_silu$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$5,"ggml_silu");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_silu(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_silu(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_silu$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_silu_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$0,"ggml_silu_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_silu_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_silu_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_silu_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_silu_back$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$1,"ggml_silu_back");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_silu_back(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_silu_back(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_silu_back$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_hardswish$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$2,"ggml_hardswish");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_hardswish(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_hardswish(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_hardswish$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_hardsigmoid$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$3,"ggml_hardsigmoid");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_hardsigmoid(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_hardsigmoid(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_hardsigmoid$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_exp$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$4,"ggml_exp");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_exp(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_exp(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_exp$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_exp_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$5,"ggml_exp_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_exp_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_exp_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_exp_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_norm$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$1,"ggml_norm");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_norm(struct ggml_context* ctx, struct ggml_tensor* a, float eps);
     * }
     */
    public static MemorySegment ggml_norm(MemorySegment ctx, MemorySegment a, float eps) {
        var mh$ = ggml_norm$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, eps);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_norm_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$2,"ggml_norm_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_norm_inplace(struct ggml_context* ctx, struct ggml_tensor* a, float eps);
     * }
     */
    public static MemorySegment ggml_norm_inplace(MemorySegment ctx, MemorySegment a, float eps) {
        var mh$ = ggml_norm_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, eps);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rms_norm$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$3,"ggml_rms_norm");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_rms_norm(struct ggml_context* ctx, struct ggml_tensor* a, float eps);
     * }
     */
    public static MemorySegment ggml_rms_norm(MemorySegment ctx, MemorySegment a, float eps) {
        var mh$ = ggml_rms_norm$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, eps);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rms_norm_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$4,"ggml_rms_norm_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_rms_norm_inplace(struct ggml_context* ctx, struct ggml_tensor* a, float eps);
     * }
     */
    public static MemorySegment ggml_rms_norm_inplace(MemorySegment ctx, MemorySegment a, float eps) {
        var mh$ = ggml_rms_norm_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, eps);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_group_norm$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$6,"ggml_group_norm");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_group_norm(struct ggml_context* ctx, struct ggml_tensor* a, int n_groups, float eps);
     * }
     */
    public static MemorySegment ggml_group_norm(MemorySegment ctx, MemorySegment a, int n_groups, float eps) {
        var mh$ = ggml_group_norm$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, n_groups, eps);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_group_norm_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$0,"ggml_group_norm_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_group_norm_inplace(struct ggml_context* ctx, struct ggml_tensor* a, int n_groups, float eps);
     * }
     */
    public static MemorySegment ggml_group_norm_inplace(MemorySegment ctx, MemorySegment a, int n_groups, float eps) {
        var mh$ = ggml_group_norm_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, n_groups, eps);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rms_norm_back$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$2,"ggml_rms_norm_back");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_rms_norm_back(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, float eps);
     * }
     */
    public static MemorySegment ggml_rms_norm_back(MemorySegment ctx, MemorySegment a, MemorySegment b, float eps) {
        var mh$ = ggml_rms_norm_back$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, eps);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_mul_mat$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$3,"ggml_mul_mat");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_mul_mat(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_mul_mat(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_mul_mat$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_mul_mat_set_prec$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$5,"ggml_mul_mat_set_prec");
    }
    /**
     * {@snippet lang=c :
     * void ggml_mul_mat_set_prec(struct ggml_tensor* a, enum ggml_prec prec);
     * }
     */
    public static void ggml_mul_mat_set_prec(MemorySegment a, int prec) {
        var mh$ = ggml_mul_mat_set_prec$MH();
        try {
            mh$.invokeExact(a, prec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_mul_mat_id$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$1,"ggml_mul_mat_id");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_mul_mat_id(struct ggml_context* ctx, struct ggml_tensor* as, struct ggml_tensor* b, struct ggml_tensor* ids);
     * }
     */
    public static MemorySegment ggml_mul_mat_id(MemorySegment ctx, MemorySegment as, MemorySegment b, MemorySegment ids) {
        var mh$ = ggml_mul_mat_id$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, as, b, ids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_out_prod$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$2,"ggml_out_prod");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_out_prod(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_out_prod(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_out_prod$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_scale$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$3,"ggml_scale");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_scale(struct ggml_context* ctx, struct ggml_tensor* a, float s);
     * }
     */
    public static MemorySegment ggml_scale(MemorySegment ctx, MemorySegment a, float s) {
        var mh$ = ggml_scale$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_scale_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$4,"ggml_scale_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_scale_inplace(struct ggml_context* ctx, struct ggml_tensor* a, float s);
     * }
     */
    public static MemorySegment ggml_scale_inplace(MemorySegment ctx, MemorySegment a, float s) {
        var mh$ = ggml_scale_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$5,"ggml_set");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_set(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, unsigned long nb1, unsigned long nb2, unsigned long nb3, unsigned long offset);
     * }
     */
    public static MemorySegment ggml_set(MemorySegment ctx, MemorySegment a, MemorySegment b, long nb1, long nb2, long nb3, long offset) {
        var mh$ = ggml_set$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, nb1, nb2, nb3, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$0,"ggml_set_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_set_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, unsigned long nb1, unsigned long nb2, unsigned long nb3, unsigned long offset);
     * }
     */
    public static MemorySegment ggml_set_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b, long nb1, long nb2, long nb3, long offset) {
        var mh$ = ggml_set_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, nb1, nb2, nb3, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_1d$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$2,"ggml_set_1d");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_set_1d(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, unsigned long offset);
     * }
     */
    public static MemorySegment ggml_set_1d(MemorySegment ctx, MemorySegment a, MemorySegment b, long offset) {
        var mh$ = ggml_set_1d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_1d_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$3,"ggml_set_1d_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_set_1d_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, unsigned long offset);
     * }
     */
    public static MemorySegment ggml_set_1d_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b, long offset) {
        var mh$ = ggml_set_1d_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_2d$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$5,"ggml_set_2d");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_set_2d(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, unsigned long nb1, unsigned long offset);
     * }
     */
    public static MemorySegment ggml_set_2d(MemorySegment ctx, MemorySegment a, MemorySegment b, long nb1, long offset) {
        var mh$ = ggml_set_2d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, nb1, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_2d_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$0,"ggml_set_2d_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_set_2d_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, unsigned long nb1, unsigned long offset);
     * }
     */
    public static MemorySegment ggml_set_2d_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b, long nb1, long offset) {
        var mh$ = ggml_set_2d_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, nb1, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpy$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$1,"ggml_cpy");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_cpy(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_cpy(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_cpy$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cast$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$3,"ggml_cast");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_cast(struct ggml_context* ctx, struct ggml_tensor* a, enum ggml_type type);
     * }
     */
    public static MemorySegment ggml_cast(MemorySegment ctx, MemorySegment a, int type) {
        var mh$ = ggml_cast$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cont$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$4,"ggml_cont");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_cont(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_cont(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_cont$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cont_1d$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$6,"ggml_cont_1d");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_cont_1d(struct ggml_context* ctx, struct ggml_tensor* a, long long ne0);
     * }
     */
    public static MemorySegment ggml_cont_1d(MemorySegment ctx, MemorySegment a, long ne0) {
        var mh$ = ggml_cont_1d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cont_2d$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$1,"ggml_cont_2d");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_cont_2d(struct ggml_context* ctx, struct ggml_tensor* a, long long ne0, long long ne1);
     * }
     */
    public static MemorySegment ggml_cont_2d(MemorySegment ctx, MemorySegment a, long ne0, long ne1) {
        var mh$ = ggml_cont_2d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cont_3d$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$3,"ggml_cont_3d");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_cont_3d(struct ggml_context* ctx, struct ggml_tensor* a, long long ne0, long long ne1, long long ne2);
     * }
     */
    public static MemorySegment ggml_cont_3d(MemorySegment ctx, MemorySegment a, long ne0, long ne1, long ne2) {
        var mh$ = ggml_cont_3d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1, ne2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cont_4d$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$5,"ggml_cont_4d");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_cont_4d(struct ggml_context* ctx, struct ggml_tensor* a, long long ne0, long long ne1, long long ne2, long long ne3);
     * }
     */
    public static MemorySegment ggml_cont_4d(MemorySegment ctx, MemorySegment a, long ne0, long ne1, long ne2, long ne3) {
        var mh$ = ggml_cont_4d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1, ne2, ne3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_reshape$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$0,"ggml_reshape");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_reshape(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_reshape(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_reshape$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_reshape_1d$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$1,"ggml_reshape_1d");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_reshape_1d(struct ggml_context* ctx, struct ggml_tensor* a, long long ne0);
     * }
     */
    public static MemorySegment ggml_reshape_1d(MemorySegment ctx, MemorySegment a, long ne0) {
        var mh$ = ggml_reshape_1d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_reshape_2d$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$2,"ggml_reshape_2d");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_reshape_2d(struct ggml_context* ctx, struct ggml_tensor* a, long long ne0, long long ne1);
     * }
     */
    public static MemorySegment ggml_reshape_2d(MemorySegment ctx, MemorySegment a, long ne0, long ne1) {
        var mh$ = ggml_reshape_2d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_reshape_3d$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$3,"ggml_reshape_3d");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_reshape_3d(struct ggml_context* ctx, struct ggml_tensor* a, long long ne0, long long ne1, long long ne2);
     * }
     */
    public static MemorySegment ggml_reshape_3d(MemorySegment ctx, MemorySegment a, long ne0, long ne1, long ne2) {
        var mh$ = ggml_reshape_3d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1, ne2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_reshape_4d$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$4,"ggml_reshape_4d");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_reshape_4d(struct ggml_context* ctx, struct ggml_tensor* a, long long ne0, long long ne1, long long ne2, long long ne3);
     * }
     */
    public static MemorySegment ggml_reshape_4d(MemorySegment ctx, MemorySegment a, long ne0, long ne1, long ne2, long ne3) {
        var mh$ = ggml_reshape_4d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1, ne2, ne3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_view_1d$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$5,"ggml_view_1d");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_view_1d(struct ggml_context* ctx, struct ggml_tensor* a, long long ne0, unsigned long offset);
     * }
     */
    public static MemorySegment ggml_view_1d(MemorySegment ctx, MemorySegment a, long ne0, long offset) {
        var mh$ = ggml_view_1d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_view_2d$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$0,"ggml_view_2d");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_view_2d(struct ggml_context* ctx, struct ggml_tensor* a, long long ne0, long long ne1, unsigned long nb1, unsigned long offset);
     * }
     */
    public static MemorySegment ggml_view_2d(MemorySegment ctx, MemorySegment a, long ne0, long ne1, long nb1, long offset) {
        var mh$ = ggml_view_2d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1, nb1, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_view_3d$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$2,"ggml_view_3d");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_view_3d(struct ggml_context* ctx, struct ggml_tensor* a, long long ne0, long long ne1, long long ne2, unsigned long nb1, unsigned long nb2, unsigned long offset);
     * }
     */
    public static MemorySegment ggml_view_3d(MemorySegment ctx, MemorySegment a, long ne0, long ne1, long ne2, long nb1, long nb2, long offset) {
        var mh$ = ggml_view_3d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1, ne2, nb1, nb2, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_view_4d$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$4,"ggml_view_4d");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_view_4d(struct ggml_context* ctx, struct ggml_tensor* a, long long ne0, long long ne1, long long ne2, long long ne3, unsigned long nb1, unsigned long nb2, unsigned long nb3, unsigned long offset);
     * }
     */
    public static MemorySegment ggml_view_4d(MemorySegment ctx, MemorySegment a, long ne0, long ne1, long ne2, long ne3, long nb1, long nb2, long nb3, long offset) {
        var mh$ = ggml_view_4d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1, ne2, ne3, nb1, nb2, nb3, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_permute$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$6,"ggml_permute");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_permute(struct ggml_context* ctx, struct ggml_tensor* a, int axis0, int axis1, int axis2, int axis3);
     * }
     */
    public static MemorySegment ggml_permute(MemorySegment ctx, MemorySegment a, int axis0, int axis1, int axis2, int axis3) {
        var mh$ = ggml_permute$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, axis0, axis1, axis2, axis3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_transpose$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$0,"ggml_transpose");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_transpose(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_transpose(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_transpose$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_rows$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$1,"ggml_get_rows");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_get_rows(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_get_rows(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_get_rows$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_rows_back$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$2,"ggml_get_rows_back");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_get_rows_back(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, struct ggml_tensor* c);
     * }
     */
    public static MemorySegment ggml_get_rows_back(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment c) {
        var mh$ = ggml_get_rows_back$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_diag$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$3,"ggml_diag");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_diag(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_diag(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_diag$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_diag_mask_inf$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$4,"ggml_diag_mask_inf");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_diag_mask_inf(struct ggml_context* ctx, struct ggml_tensor* a, int n_past);
     * }
     */
    public static MemorySegment ggml_diag_mask_inf(MemorySegment ctx, MemorySegment a, int n_past) {
        var mh$ = ggml_diag_mask_inf$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, n_past);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_diag_mask_inf_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$5,"ggml_diag_mask_inf_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_diag_mask_inf_inplace(struct ggml_context* ctx, struct ggml_tensor* a, int n_past);
     * }
     */
    public static MemorySegment ggml_diag_mask_inf_inplace(MemorySegment ctx, MemorySegment a, int n_past) {
        var mh$ = ggml_diag_mask_inf_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, n_past);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_diag_mask_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$0,"ggml_diag_mask_zero");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_diag_mask_zero(struct ggml_context* ctx, struct ggml_tensor* a, int n_past);
     * }
     */
    public static MemorySegment ggml_diag_mask_zero(MemorySegment ctx, MemorySegment a, int n_past) {
        var mh$ = ggml_diag_mask_zero$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, n_past);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_diag_mask_zero_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$1,"ggml_diag_mask_zero_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_diag_mask_zero_inplace(struct ggml_context* ctx, struct ggml_tensor* a, int n_past);
     * }
     */
    public static MemorySegment ggml_diag_mask_zero_inplace(MemorySegment ctx, MemorySegment a, int n_past) {
        var mh$ = ggml_diag_mask_zero_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, n_past);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_soft_max$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$2,"ggml_soft_max");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_soft_max(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_soft_max(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_soft_max$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_soft_max_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$3,"ggml_soft_max_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_soft_max_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_soft_max_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_soft_max_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_soft_max_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$5,"ggml_soft_max_ext");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_soft_max_ext(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* mask, float scale, float max_bias);
     * }
     */
    public static MemorySegment ggml_soft_max_ext(MemorySegment ctx, MemorySegment a, MemorySegment mask, float scale, float max_bias) {
        var mh$ = ggml_soft_max_ext$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, mask, scale, max_bias);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_soft_max_ext_back$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$0,"ggml_soft_max_ext_back");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_soft_max_ext_back(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, float scale, float max_bias);
     * }
     */
    public static MemorySegment ggml_soft_max_ext_back(MemorySegment ctx, MemorySegment a, MemorySegment b, float scale, float max_bias) {
        var mh$ = ggml_soft_max_ext_back$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, scale, max_bias);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_soft_max_ext_back_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$1,"ggml_soft_max_ext_back_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_soft_max_ext_back_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, float scale, float max_bias);
     * }
     */
    public static MemorySegment ggml_soft_max_ext_back_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b, float scale, float max_bias) {
        var mh$ = ggml_soft_max_ext_back_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, scale, max_bias);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rope$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$3,"ggml_rope");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_rope(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int n_dims, int mode);
     * }
     */
    public static MemorySegment ggml_rope(MemorySegment ctx, MemorySegment a, MemorySegment b, int n_dims, int mode) {
        var mh$ = ggml_rope$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, n_dims, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rope_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$4,"ggml_rope_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_rope_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int n_dims, int mode);
     * }
     */
    public static MemorySegment ggml_rope_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b, int n_dims, int mode) {
        var mh$ = ggml_rope_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, n_dims, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rope_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$6,"ggml_rope_ext");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_rope_ext(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, struct ggml_tensor* c, int n_dims, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow);
     * }
     */
    public static MemorySegment ggml_rope_ext(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment c, int n_dims, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow) {
        var mh$ = ggml_rope_ext$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, c, n_dims, mode, n_ctx_orig, freq_base, freq_scale, ext_factor, attn_factor, beta_fast, beta_slow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rope_multi$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$1,"ggml_rope_multi");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_rope_multi(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, struct ggml_tensor* c, int n_dims, int sections[4], int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow);
     * }
     */
    public static MemorySegment ggml_rope_multi(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment c, int n_dims, MemorySegment sections, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow) {
        var mh$ = ggml_rope_multi$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, c, n_dims, sections, mode, n_ctx_orig, freq_base, freq_scale, ext_factor, attn_factor, beta_fast, beta_slow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rope_ext_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$2,"ggml_rope_ext_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_rope_ext_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, struct ggml_tensor* c, int n_dims, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow);
     * }
     */
    public static MemorySegment ggml_rope_ext_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment c, int n_dims, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow) {
        var mh$ = ggml_rope_ext_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, c, n_dims, mode, n_ctx_orig, freq_base, freq_scale, ext_factor, attn_factor, beta_fast, beta_slow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rope_custom$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$4,"ggml_rope_custom");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_rope_custom(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int n_dims, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow);
     * }
     */
    public static MemorySegment ggml_rope_custom(MemorySegment ctx, MemorySegment a, MemorySegment b, int n_dims, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow) {
        var mh$ = ggml_rope_custom$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, n_dims, mode, n_ctx_orig, freq_base, freq_scale, ext_factor, attn_factor, beta_fast, beta_slow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rope_custom_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$5,"ggml_rope_custom_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_rope_custom_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int n_dims, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow);
     * }
     */
    public static MemorySegment ggml_rope_custom_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b, int n_dims, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow) {
        var mh$ = ggml_rope_custom_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, n_dims, mode, n_ctx_orig, freq_base, freq_scale, ext_factor, attn_factor, beta_fast, beta_slow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rope_yarn_corr_dims$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$1,"ggml_rope_yarn_corr_dims");
    }
    /**
     * {@snippet lang=c :
     * void ggml_rope_yarn_corr_dims(int n_dims, int n_ctx_orig, float freq_base, float beta_fast, float beta_slow, float dims[2]);
     * }
     */
    public static void ggml_rope_yarn_corr_dims(int n_dims, int n_ctx_orig, float freq_base, float beta_fast, float beta_slow, MemorySegment dims) {
        var mh$ = ggml_rope_yarn_corr_dims$MH();
        try {
            mh$.invokeExact(n_dims, n_ctx_orig, freq_base, beta_fast, beta_slow, dims);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rope_ext_back$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$2,"ggml_rope_ext_back");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_rope_ext_back(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, struct ggml_tensor* c, int n_dims, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow);
     * }
     */
    public static MemorySegment ggml_rope_ext_back(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment c, int n_dims, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow) {
        var mh$ = ggml_rope_ext_back$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, c, n_dims, mode, n_ctx_orig, freq_base, freq_scale, ext_factor, attn_factor, beta_fast, beta_slow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rope_multi_back$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$3,"ggml_rope_multi_back");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_rope_multi_back(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, struct ggml_tensor* c, int n_dims, int sections[4], int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow);
     * }
     */
    public static MemorySegment ggml_rope_multi_back(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment c, int n_dims, MemorySegment sections, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow) {
        var mh$ = ggml_rope_multi_back$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, c, n_dims, sections, mode, n_ctx_orig, freq_base, freq_scale, ext_factor, attn_factor, beta_fast, beta_slow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_clamp$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$5,"ggml_clamp");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_clamp(struct ggml_context* ctx, struct ggml_tensor* a, float min, float max);
     * }
     */
    public static MemorySegment ggml_clamp(MemorySegment ctx, MemorySegment a, float min, float max) {
        var mh$ = ggml_clamp$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, min, max);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_im2col$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$1,"ggml_im2col");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_im2col(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int s0, int s1, int p0, int p1, int d0, int d1, _Bool is_2D, enum ggml_type dst_type);
     * }
     */
    public static MemorySegment ggml_im2col(MemorySegment ctx, MemorySegment a, MemorySegment b, int s0, int s1, int p0, int p1, int d0, int d1, boolean is_2D, int dst_type) {
        var mh$ = ggml_im2col$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, s0, s1, p0, p1, d0, d1, is_2D, dst_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_im2col_back$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$3,"ggml_im2col_back");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_im2col_back(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, long long* ne, int s0, int s1, int p0, int p1, int d0, int d1, _Bool is_2D);
     * }
     */
    public static MemorySegment ggml_im2col_back(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment ne, int s0, int s1, int p0, int p1, int d0, int d1, boolean is_2D) {
        var mh$ = ggml_im2col_back$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, ne, s0, s1, p0, p1, d0, d1, is_2D);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_conv_1d$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$5,"ggml_conv_1d");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_conv_1d(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int s0, int p0, int d0);
     * }
     */
    public static MemorySegment ggml_conv_1d(MemorySegment ctx, MemorySegment a, MemorySegment b, int s0, int p0, int d0) {
        var mh$ = ggml_conv_1d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, s0, p0, d0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_conv_1d_ph$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$0,"ggml_conv_1d_ph");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_conv_1d_ph(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int s, int d);
     * }
     */
    public static MemorySegment ggml_conv_1d_ph(MemorySegment ctx, MemorySegment a, MemorySegment b, int s, int d) {
        var mh$ = ggml_conv_1d_ph$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, s, d);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_conv_1d_dw$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$1,"ggml_conv_1d_dw");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_conv_1d_dw(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int s0, int p0, int d0);
     * }
     */
    public static MemorySegment ggml_conv_1d_dw(MemorySegment ctx, MemorySegment a, MemorySegment b, int s0, int p0, int d0) {
        var mh$ = ggml_conv_1d_dw$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, s0, p0, d0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_conv_1d_dw_ph$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$2,"ggml_conv_1d_dw_ph");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_conv_1d_dw_ph(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int s0, int d0);
     * }
     */
    public static MemorySegment ggml_conv_1d_dw_ph(MemorySegment ctx, MemorySegment a, MemorySegment b, int s0, int d0) {
        var mh$ = ggml_conv_1d_dw_ph$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, s0, d0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_conv_transpose_1d$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$3,"ggml_conv_transpose_1d");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_conv_transpose_1d(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int s0, int p0, int d0);
     * }
     */
    public static MemorySegment ggml_conv_transpose_1d(MemorySegment ctx, MemorySegment a, MemorySegment b, int s0, int p0, int d0) {
        var mh$ = ggml_conv_transpose_1d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, s0, p0, d0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_conv_2d$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$5,"ggml_conv_2d");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_conv_2d(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int s0, int s1, int p0, int p1, int d0, int d1);
     * }
     */
    public static MemorySegment ggml_conv_2d(MemorySegment ctx, MemorySegment a, MemorySegment b, int s0, int s1, int p0, int p1, int d0, int d1) {
        var mh$ = ggml_conv_2d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, s0, s1, p0, p1, d0, d1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_conv_2d_sk_p0$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$0,"ggml_conv_2d_sk_p0");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_conv_2d_sk_p0(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_conv_2d_sk_p0(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_conv_2d_sk_p0$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_conv_2d_s1_ph$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$1,"ggml_conv_2d_s1_ph");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_conv_2d_s1_ph(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_conv_2d_s1_ph(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_conv_2d_s1_ph$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_conv_2d_dw$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$2,"ggml_conv_2d_dw");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_conv_2d_dw(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int s0, int s1, int p0, int p1, int d0, int d1);
     * }
     */
    public static MemorySegment ggml_conv_2d_dw(MemorySegment ctx, MemorySegment a, MemorySegment b, int s0, int s1, int p0, int p1, int d0, int d1) {
        var mh$ = ggml_conv_2d_dw$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, s0, s1, p0, p1, d0, d1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_conv_transpose_2d_p0$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$3,"ggml_conv_transpose_2d_p0");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_conv_transpose_2d_p0(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int stride);
     * }
     */
    public static MemorySegment ggml_conv_transpose_2d_p0(MemorySegment ctx, MemorySegment a, MemorySegment b, int stride) {
        var mh$ = ggml_conv_transpose_2d_p0$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op_pool.GGML_OP_POOL_MAX = 0;
     * }
     */
    public static int GGML_OP_POOL_MAX() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op_pool.GGML_OP_POOL_AVG = 1;
     * }
     */
    public static int GGML_OP_POOL_AVG() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_op_pool.GGML_OP_POOL_COUNT = 2;
     * }
     */
    public static int GGML_OP_POOL_COUNT() {
        return (int)2L;
    }
    public static MethodHandle ggml_pool_1d$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$4,"ggml_pool_1d");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_pool_1d(struct ggml_context* ctx, struct ggml_tensor* a, enum ggml_op_pool op, int k0, int s0, int p0);
     * }
     */
    public static MemorySegment ggml_pool_1d(MemorySegment ctx, MemorySegment a, int op, int k0, int s0, int p0) {
        var mh$ = ggml_pool_1d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, op, k0, s0, p0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_pool_2d$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$6,"ggml_pool_2d");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_pool_2d(struct ggml_context* ctx, struct ggml_tensor* a, enum ggml_op_pool op, int k0, int k1, int s0, int s1, float p0, float p1);
     * }
     */
    public static MemorySegment ggml_pool_2d(MemorySegment ctx, MemorySegment a, int op, int k0, int k1, int s0, int s1, float p0, float p1) {
        var mh$ = ggml_pool_2d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, op, k0, k1, s0, s1, p0, p1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_pool_2d_back$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$1,"ggml_pool_2d_back");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_pool_2d_back(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* af, enum ggml_op_pool op, int k0, int k1, int s0, int s1, float p0, float p1);
     * }
     */
    public static MemorySegment ggml_pool_2d_back(MemorySegment ctx, MemorySegment a, MemorySegment af, int op, int k0, int k1, int s0, int s1, float p0, float p1) {
        var mh$ = ggml_pool_2d_back$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, af, op, k0, k1, s0, s1, p0, p1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_upscale$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$2,"ggml_upscale");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_upscale(struct ggml_context* ctx, struct ggml_tensor* a, int scale_factor);
     * }
     */
    public static MemorySegment ggml_upscale(MemorySegment ctx, MemorySegment a, int scale_factor) {
        var mh$ = ggml_upscale$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, scale_factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_upscale_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$3,"ggml_upscale_ext");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_upscale_ext(struct ggml_context* ctx, struct ggml_tensor* a, int ne0, int ne1, int ne2, int ne3);
     * }
     */
    public static MemorySegment ggml_upscale_ext(MemorySegment ctx, MemorySegment a, int ne0, int ne1, int ne2, int ne3) {
        var mh$ = ggml_upscale_ext$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1, ne2, ne3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_pad$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$4,"ggml_pad");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_pad(struct ggml_context* ctx, struct ggml_tensor* a, int p0, int p1, int p2, int p3);
     * }
     */
    public static MemorySegment ggml_pad(MemorySegment ctx, MemorySegment a, int p0, int p1, int p2, int p3) {
        var mh$ = ggml_pad$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, p0, p1, p2, p3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_pad_reflect_1d$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$6,"ggml_pad_reflect_1d");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_pad_reflect_1d(struct ggml_context* ctx, struct ggml_tensor* a, int p0, int p1);
     * }
     */
    public static MemorySegment ggml_pad_reflect_1d(MemorySegment ctx, MemorySegment a, int p0, int p1) {
        var mh$ = ggml_pad_reflect_1d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, p0, p1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_timestep_embedding$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$0,"ggml_timestep_embedding");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_timestep_embedding(struct ggml_context* ctx, struct ggml_tensor* timesteps, int dim, int max_period);
     * }
     */
    public static MemorySegment ggml_timestep_embedding(MemorySegment ctx, MemorySegment timesteps, int dim, int max_period) {
        var mh$ = ggml_timestep_embedding$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, timesteps, dim, max_period);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * enum ggml_sort_order.GGML_SORT_ORDER_ASC = 0;
     * }
     */
    public static int GGML_SORT_ORDER_ASC() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_sort_order.GGML_SORT_ORDER_DESC = 1;
     * }
     */
    public static int GGML_SORT_ORDER_DESC() {
        return (int)1L;
    }
    public static MethodHandle ggml_argsort$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$1,"ggml_argsort");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_argsort(struct ggml_context* ctx, struct ggml_tensor* a, enum ggml_sort_order order);
     * }
     */
    public static MemorySegment ggml_argsort(MemorySegment ctx, MemorySegment a, int order) {
        var mh$ = ggml_argsort$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, order);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_arange$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$3,"ggml_arange");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_arange(struct ggml_context* ctx, float start, float stop, float step);
     * }
     */
    public static MemorySegment ggml_arange(MemorySegment ctx, float start, float stop, float step) {
        var mh$ = ggml_arange$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, start, stop, step);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_top_k$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$4,"ggml_top_k");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_top_k(struct ggml_context* ctx, struct ggml_tensor* a, int k);
     * }
     */
    public static MemorySegment ggml_top_k(MemorySegment ctx, MemorySegment a, int k) {
        var mh$ = ggml_top_k$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, k);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_flash_attn_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$6,"ggml_flash_attn_ext");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_flash_attn_ext(struct ggml_context* ctx, struct ggml_tensor* q, struct ggml_tensor* k, struct ggml_tensor* v, struct ggml_tensor* mask, float scale, float max_bias, float logit_softcap);
     * }
     */
    public static MemorySegment ggml_flash_attn_ext(MemorySegment ctx, MemorySegment q, MemorySegment k, MemorySegment v, MemorySegment mask, float scale, float max_bias, float logit_softcap) {
        var mh$ = ggml_flash_attn_ext$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, q, k, v, mask, scale, max_bias, logit_softcap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_flash_attn_ext_set_prec$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$0,"ggml_flash_attn_ext_set_prec");
    }
    /**
     * {@snippet lang=c :
     * void ggml_flash_attn_ext_set_prec(struct ggml_tensor* a, enum ggml_prec prec);
     * }
     */
    public static void ggml_flash_attn_ext_set_prec(MemorySegment a, int prec) {
        var mh$ = ggml_flash_attn_ext_set_prec$MH();
        try {
            mh$.invokeExact(a, prec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_flash_attn_ext_get_prec$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$1,"ggml_flash_attn_ext_get_prec");
    }
    /**
     * {@snippet lang=c :
     * enum ggml_prec ggml_flash_attn_ext_get_prec(struct ggml_tensor* a);
     * }
     */
    public static int ggml_flash_attn_ext_get_prec(MemorySegment a) {
        var mh$ = ggml_flash_attn_ext_get_prec$MH();
        try {
            return (int)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


