// Generated by jextract

package io.gravitee.llama.cpp.macosx.aarch64;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet lang=c :
 * struct __sbuf {
 *     unsigned char* _base;
 *     int _size;
 * };
 * }
 */
public class __sbuf {

    public static MemoryLayout $LAYOUT() {
        return constants$6.const$0;
    }
    public static VarHandle _base$VH() {
        return constants$6.const$1;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char* _base;
     * }
     */
    public static MemorySegment _base$get(MemorySegment seg) {
        return (MemorySegment)constants$6.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char* _base;
     * }
     */
    public static void _base$set(MemorySegment seg, MemorySegment x) {
        constants$6.const$1.set(seg, x);
    }
    public static MemorySegment _base$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$6.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _base$set(MemorySegment seg, long index, MemorySegment x) {
        constants$6.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle _size$VH() {
        return constants$6.const$2;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * int _size;
     * }
     */
    public static int _size$get(MemorySegment seg) {
        return (int)constants$6.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * int _size;
     * }
     */
    public static void _size$set(MemorySegment seg, int x) {
        constants$6.const$2.set(seg, x);
    }
    public static int _size$get(MemorySegment seg, long index) {
        return (int)constants$6.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void _size$set(MemorySegment seg, long index, int x) {
        constants$6.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


