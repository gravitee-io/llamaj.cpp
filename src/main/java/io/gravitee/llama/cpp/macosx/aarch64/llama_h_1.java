// Generated by jextract

package io.gravitee.llama.cpp.macosx.aarch64;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class llama_h_1 {

    public static MethodHandle ggml_top_k$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$2,"ggml_top_k");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_top_k(struct ggml_context* ctx, struct ggml_tensor* a, int k);
     * }
     */
    public static MemorySegment ggml_top_k(MemorySegment ctx, MemorySegment a, int k) {
        var mh$ = ggml_top_k$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, a, k);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_flash_attn_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$4,"ggml_flash_attn_ext");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_flash_attn_ext(struct ggml_context* ctx, struct ggml_tensor* q, struct ggml_tensor* k, struct ggml_tensor* v, struct ggml_tensor* mask, float scale, float max_bias, float logit_softcap);
     * }
     */
    public static MemorySegment ggml_flash_attn_ext(MemorySegment ctx, MemorySegment q, MemorySegment k, MemorySegment v, MemorySegment mask, float scale, float max_bias, float logit_softcap) {
        var mh$ = ggml_flash_attn_ext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, q, k, v, mask, scale, max_bias, logit_softcap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_flash_attn_ext_set_prec$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$5,"ggml_flash_attn_ext_set_prec");
    }
    /**
     * {@snippet lang=c :
     * void ggml_flash_attn_ext_set_prec(struct ggml_tensor* a, enum ggml_prec prec);
     * }
     */
    public static void ggml_flash_attn_ext_set_prec(MemorySegment a, int prec) {
        var mh$ = ggml_flash_attn_ext_set_prec$MH();
        try {
            mh$.invokeExact(a, prec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_flash_attn_ext_get_prec$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$0,"ggml_flash_attn_ext_get_prec");
    }
    /**
     * {@snippet lang=c :
     * enum ggml_prec ggml_flash_attn_ext_get_prec(struct ggml_tensor* a);
     * }
     */
    public static int ggml_flash_attn_ext_get_prec(MemorySegment a) {
        var mh$ = ggml_flash_attn_ext_get_prec$MH();
        try {
            return (int)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_flash_attn_back$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$2,"ggml_flash_attn_back");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_flash_attn_back(struct ggml_context* ctx, struct ggml_tensor* q, struct ggml_tensor* k, struct ggml_tensor* v, struct ggml_tensor* d, _Bool masked);
     * }
     */
    public static MemorySegment ggml_flash_attn_back(MemorySegment ctx, MemorySegment q, MemorySegment k, MemorySegment v, MemorySegment d, boolean masked) {
        var mh$ = ggml_flash_attn_back$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, q, k, v, d, masked);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_ssm_conv$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$3,"ggml_ssm_conv");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_ssm_conv(struct ggml_context* ctx, struct ggml_tensor* sx, struct ggml_tensor* c);
     * }
     */
    public static MemorySegment ggml_ssm_conv(MemorySegment ctx, MemorySegment sx, MemorySegment c) {
        var mh$ = ggml_ssm_conv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, sx, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_ssm_scan$MH() {
        return RuntimeHelper.requireNonNull(constants$80.const$5,"ggml_ssm_scan");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_ssm_scan(struct ggml_context* ctx, struct ggml_tensor* s, struct ggml_tensor* x, struct ggml_tensor* dt, struct ggml_tensor* A, struct ggml_tensor* B, struct ggml_tensor* C);
     * }
     */
    public static MemorySegment ggml_ssm_scan(MemorySegment ctx, MemorySegment s, MemorySegment x, MemorySegment dt, MemorySegment A, MemorySegment B, MemorySegment C) {
        var mh$ = ggml_ssm_scan$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, s, x, dt, A, B, C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_win_part$MH() {
        return RuntimeHelper.requireNonNull(constants$81.const$0,"ggml_win_part");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_win_part(struct ggml_context* ctx, struct ggml_tensor* a, int w);
     * }
     */
    public static MemorySegment ggml_win_part(MemorySegment ctx, MemorySegment a, int w) {
        var mh$ = ggml_win_part$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, a, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_win_unpart$MH() {
        return RuntimeHelper.requireNonNull(constants$81.const$2,"ggml_win_unpart");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_win_unpart(struct ggml_context* ctx, struct ggml_tensor* a, int w0, int h0, int w);
     * }
     */
    public static MemorySegment ggml_win_unpart(MemorySegment ctx, MemorySegment a, int w0, int h0, int w) {
        var mh$ = ggml_win_unpart$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, a, w0, h0, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_unary$MH() {
        return RuntimeHelper.requireNonNull(constants$81.const$3,"ggml_unary");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_unary(struct ggml_context* ctx, struct ggml_tensor* a, enum ggml_unary_op op);
     * }
     */
    public static MemorySegment ggml_unary(MemorySegment ctx, MemorySegment a, int op) {
        var mh$ = ggml_unary$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, a, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_unary_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$81.const$4,"ggml_unary_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_unary_inplace(struct ggml_context* ctx, struct ggml_tensor* a, enum ggml_unary_op op);
     * }
     */
    public static MemorySegment ggml_unary_inplace(MemorySegment ctx, MemorySegment a, int op) {
        var mh$ = ggml_unary_inplace$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, a, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_rel_pos$MH() {
        return RuntimeHelper.requireNonNull(constants$81.const$5,"ggml_get_rel_pos");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_get_rel_pos(struct ggml_context* ctx, struct ggml_tensor* a, int qh, int kh);
     * }
     */
    public static MemorySegment ggml_get_rel_pos(MemorySegment ctx, MemorySegment a, int qh, int kh) {
        var mh$ = ggml_get_rel_pos$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, a, qh, kh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_add_rel_pos$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$0,"ggml_add_rel_pos");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_add_rel_pos(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* pw, struct ggml_tensor* ph);
     * }
     */
    public static MemorySegment ggml_add_rel_pos(MemorySegment ctx, MemorySegment a, MemorySegment pw, MemorySegment ph) {
        var mh$ = ggml_add_rel_pos$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, a, pw, ph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_add_rel_pos_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$1,"ggml_add_rel_pos_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_add_rel_pos_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* pw, struct ggml_tensor* ph);
     * }
     */
    public static MemorySegment ggml_add_rel_pos_inplace(MemorySegment ctx, MemorySegment a, MemorySegment pw, MemorySegment ph) {
        var mh$ = ggml_add_rel_pos_inplace$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, a, pw, ph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rwkv_wkv6$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$2,"ggml_rwkv_wkv6");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_rwkv_wkv6(struct ggml_context* ctx, struct ggml_tensor* k, struct ggml_tensor* v, struct ggml_tensor* r, struct ggml_tensor* tf, struct ggml_tensor* td, struct ggml_tensor* state);
     * }
     */
    public static MemorySegment ggml_rwkv_wkv6(MemorySegment ctx, MemorySegment k, MemorySegment v, MemorySegment r, MemorySegment tf, MemorySegment td, MemorySegment state) {
        var mh$ = ggml_rwkv_wkv6$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, k, v, r, tf, td, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_gated_linear_attn$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$4,"ggml_gated_linear_attn");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_gated_linear_attn(struct ggml_context* ctx, struct ggml_tensor* k, struct ggml_tensor* v, struct ggml_tensor* q, struct ggml_tensor* g, struct ggml_tensor* state, float scale);
     * }
     */
    public static MemorySegment ggml_gated_linear_attn(MemorySegment ctx, MemorySegment k, MemorySegment v, MemorySegment q, MemorySegment g, MemorySegment state, float scale) {
        var mh$ = ggml_gated_linear_attn$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, k, v, q, g, state, scale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rwkv_wkv7$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$6,"ggml_rwkv_wkv7");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_rwkv_wkv7(struct ggml_context* ctx, struct ggml_tensor* r, struct ggml_tensor* w, struct ggml_tensor* k, struct ggml_tensor* v, struct ggml_tensor* a, struct ggml_tensor* b, struct ggml_tensor* state);
     * }
     */
    public static MemorySegment ggml_rwkv_wkv7(MemorySegment ctx, MemorySegment r, MemorySegment w, MemorySegment k, MemorySegment v, MemorySegment a, MemorySegment b, MemorySegment state) {
        var mh$ = ggml_rwkv_wkv7$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, r, w, k, v, a, b, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_unary_f32$MH() {
        return RuntimeHelper.requireNonNull(constants$85.const$3,"ggml_map_unary_f32");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_map_unary_f32(struct ggml_context* ctx, struct ggml_tensor* a, void (*fun)(int,float*,float*));
     * }
     */
    public static MemorySegment ggml_map_unary_f32(MemorySegment ctx, MemorySegment a, MemorySegment fun) {
        var mh$ = ggml_map_unary_f32$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, a, fun);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_unary_inplace_f32$MH() {
        return RuntimeHelper.requireNonNull(constants$85.const$5,"ggml_map_unary_inplace_f32");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_map_unary_inplace_f32(struct ggml_context* ctx, struct ggml_tensor* a, void (*fun)(int,float*,float*));
     * }
     */
    public static MemorySegment ggml_map_unary_inplace_f32(MemorySegment ctx, MemorySegment a, MemorySegment fun) {
        var mh$ = ggml_map_unary_inplace_f32$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, a, fun);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_binary_f32$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$1,"ggml_map_binary_f32");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_map_binary_f32(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, void (*fun)(int,float*,float*,float*));
     * }
     */
    public static MemorySegment ggml_map_binary_f32(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment fun) {
        var mh$ = ggml_map_binary_f32$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, a, b, fun);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_binary_inplace_f32$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$3,"ggml_map_binary_inplace_f32");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_map_binary_inplace_f32(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, void (*fun)(int,float*,float*,float*));
     * }
     */
    public static MemorySegment ggml_map_binary_inplace_f32(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment fun) {
        var mh$ = ggml_map_binary_inplace_f32$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, a, b, fun);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_custom1_f32$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$5,"ggml_map_custom1_f32");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_map_custom1_f32(struct ggml_context* ctx, struct ggml_tensor* a, void (*fun)(struct ggml_tensor*,struct ggml_tensor*));
     * }
     */
    public static MemorySegment ggml_map_custom1_f32(MemorySegment ctx, MemorySegment a, MemorySegment fun) {
        var mh$ = ggml_map_custom1_f32$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, a, fun);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_custom1_inplace_f32$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$1,"ggml_map_custom1_inplace_f32");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_map_custom1_inplace_f32(struct ggml_context* ctx, struct ggml_tensor* a, void (*fun)(struct ggml_tensor*,struct ggml_tensor*));
     * }
     */
    public static MemorySegment ggml_map_custom1_inplace_f32(MemorySegment ctx, MemorySegment a, MemorySegment fun) {
        var mh$ = ggml_map_custom1_inplace_f32$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, a, fun);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_custom2_f32$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$3,"ggml_map_custom2_f32");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_map_custom2_f32(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, void (*fun)(struct ggml_tensor*,struct ggml_tensor*,struct ggml_tensor*));
     * }
     */
    public static MemorySegment ggml_map_custom2_f32(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment fun) {
        var mh$ = ggml_map_custom2_f32$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, a, b, fun);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_custom2_inplace_f32$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$5,"ggml_map_custom2_inplace_f32");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_map_custom2_inplace_f32(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, void (*fun)(struct ggml_tensor*,struct ggml_tensor*,struct ggml_tensor*));
     * }
     */
    public static MemorySegment ggml_map_custom2_inplace_f32(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment fun) {
        var mh$ = ggml_map_custom2_inplace_f32$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, a, b, fun);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_custom3_f32$MH() {
        return RuntimeHelper.requireNonNull(constants$88.const$1,"ggml_map_custom3_f32");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_map_custom3_f32(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, struct ggml_tensor* c, void (*fun)(struct ggml_tensor*,struct ggml_tensor*,struct ggml_tensor*,struct ggml_tensor*));
     * }
     */
    public static MemorySegment ggml_map_custom3_f32(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment c, MemorySegment fun) {
        var mh$ = ggml_map_custom3_f32$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, a, b, c, fun);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_custom3_inplace_f32$MH() {
        return RuntimeHelper.requireNonNull(constants$88.const$3,"ggml_map_custom3_inplace_f32");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_map_custom3_inplace_f32(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, struct ggml_tensor* c, void (*fun)(struct ggml_tensor*,struct ggml_tensor*,struct ggml_tensor*,struct ggml_tensor*));
     * }
     */
    public static MemorySegment ggml_map_custom3_inplace_f32(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment c, MemorySegment fun) {
        var mh$ = ggml_map_custom3_inplace_f32$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, a, b, c, fun);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_custom1$MH() {
        return RuntimeHelper.requireNonNull(constants$90.const$3,"ggml_map_custom1");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_map_custom1(struct ggml_context* ctx, struct ggml_tensor* a, void (*fun)(struct ggml_tensor*,struct ggml_tensor*,int,int,void*), int n_tasks, void* userdata);
     * }
     */
    public static MemorySegment ggml_map_custom1(MemorySegment ctx, MemorySegment a, MemorySegment fun, int n_tasks, MemorySegment userdata) {
        var mh$ = ggml_map_custom1$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, a, fun, n_tasks, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_custom1_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$90.const$5,"ggml_map_custom1_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_map_custom1_inplace(struct ggml_context* ctx, struct ggml_tensor* a, void (*fun)(struct ggml_tensor*,struct ggml_tensor*,int,int,void*), int n_tasks, void* userdata);
     * }
     */
    public static MemorySegment ggml_map_custom1_inplace(MemorySegment ctx, MemorySegment a, MemorySegment fun, int n_tasks, MemorySegment userdata) {
        var mh$ = ggml_map_custom1_inplace$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, a, fun, n_tasks, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_custom2$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$2,"ggml_map_custom2");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_map_custom2(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, void (*fun)(struct ggml_tensor*,struct ggml_tensor*,struct ggml_tensor*,int,int,void*), int n_tasks, void* userdata);
     * }
     */
    public static MemorySegment ggml_map_custom2(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment fun, int n_tasks, MemorySegment userdata) {
        var mh$ = ggml_map_custom2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, a, b, fun, n_tasks, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_custom2_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$4,"ggml_map_custom2_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_map_custom2_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, void (*fun)(struct ggml_tensor*,struct ggml_tensor*,struct ggml_tensor*,int,int,void*), int n_tasks, void* userdata);
     * }
     */
    public static MemorySegment ggml_map_custom2_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment fun, int n_tasks, MemorySegment userdata) {
        var mh$ = ggml_map_custom2_inplace$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, a, b, fun, n_tasks, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_custom3$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$1,"ggml_map_custom3");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_map_custom3(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, struct ggml_tensor* c, void (*fun)(struct ggml_tensor*,struct ggml_tensor*,struct ggml_tensor*,struct ggml_tensor*,int,int,void*), int n_tasks, void* userdata);
     * }
     */
    public static MemorySegment ggml_map_custom3(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment c, MemorySegment fun, int n_tasks, MemorySegment userdata) {
        var mh$ = ggml_map_custom3$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, a, b, c, fun, n_tasks, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_custom3_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$3,"ggml_map_custom3_inplace");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_map_custom3_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, struct ggml_tensor* c, void (*fun)(struct ggml_tensor*,struct ggml_tensor*,struct ggml_tensor*,struct ggml_tensor*,int,int,void*), int n_tasks, void* userdata);
     * }
     */
    public static MemorySegment ggml_map_custom3_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment c, MemorySegment fun, int n_tasks, MemorySegment userdata) {
        var mh$ = ggml_map_custom3_inplace$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, a, b, c, fun, n_tasks, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cross_entropy_loss$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$4,"ggml_cross_entropy_loss");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_cross_entropy_loss(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_cross_entropy_loss(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_cross_entropy_loss$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cross_entropy_loss_back$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$5,"ggml_cross_entropy_loss_back");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_cross_entropy_loss_back(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, struct ggml_tensor* c);
     * }
     */
    public static MemorySegment ggml_cross_entropy_loss_back(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment c) {
        var mh$ = ggml_cross_entropy_loss_back$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, a, b, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_opt_step_adamw$MH() {
        return RuntimeHelper.requireNonNull(constants$93.const$1,"ggml_opt_step_adamw");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_opt_step_adamw(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* grad, struct ggml_tensor* m, struct ggml_tensor* v, struct ggml_tensor* adamw_params);
     * }
     */
    public static MemorySegment ggml_opt_step_adamw(MemorySegment ctx, MemorySegment a, MemorySegment grad, MemorySegment m, MemorySegment v, MemorySegment adamw_params) {
        var mh$ = ggml_opt_step_adamw$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, a, grad, m, v, adamw_params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_build_forward_expand$MH() {
        return RuntimeHelper.requireNonNull(constants$93.const$2,"ggml_build_forward_expand");
    }
    /**
     * {@snippet lang=c :
     * void ggml_build_forward_expand(struct ggml_cgraph* cgraph, struct ggml_tensor* tensor);
     * }
     */
    public static void ggml_build_forward_expand(MemorySegment cgraph, MemorySegment tensor) {
        var mh$ = ggml_build_forward_expand$MH();
        try {
            mh$.invokeExact(cgraph, tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_build_backward_expand$MH() {
        return RuntimeHelper.requireNonNull(constants$93.const$4,"ggml_build_backward_expand");
    }
    /**
     * {@snippet lang=c :
     * void ggml_build_backward_expand(struct ggml_context* ctx_static, struct ggml_context* ctx_compute, struct ggml_cgraph* cgraph, _Bool accumulate);
     * }
     */
    public static void ggml_build_backward_expand(MemorySegment ctx_static, MemorySegment ctx_compute, MemorySegment cgraph, boolean accumulate) {
        var mh$ = ggml_build_backward_expand$MH();
        try {
            mh$.invokeExact(ctx_static, ctx_compute, cgraph, accumulate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_new_graph$MH() {
        return RuntimeHelper.requireNonNull(constants$93.const$5,"ggml_new_graph");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_cgraph* ggml_new_graph(struct ggml_context* ctx);
     * }
     */
    public static MemorySegment ggml_new_graph(MemorySegment ctx) {
        var mh$ = ggml_new_graph$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_new_graph_custom$MH() {
        return RuntimeHelper.requireNonNull(constants$94.const$1,"ggml_new_graph_custom");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_cgraph* ggml_new_graph_custom(struct ggml_context* ctx, unsigned long size, _Bool grads);
     * }
     */
    public static MemorySegment ggml_new_graph_custom(MemorySegment ctx, long size, boolean grads) {
        var mh$ = ggml_new_graph_custom$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, size, grads);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$94.const$2,"ggml_graph_dup");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_cgraph* ggml_graph_dup(struct ggml_context* ctx, struct ggml_cgraph* cgraph);
     * }
     */
    public static MemorySegment ggml_graph_dup(MemorySegment ctx, MemorySegment cgraph) {
        var mh$ = ggml_graph_dup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, cgraph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_cpy$MH() {
        return RuntimeHelper.requireNonNull(constants$94.const$3,"ggml_graph_cpy");
    }
    /**
     * {@snippet lang=c :
     * void ggml_graph_cpy(struct ggml_cgraph* src, struct ggml_cgraph* dst);
     * }
     */
    public static void ggml_graph_cpy(MemorySegment src, MemorySegment dst) {
        var mh$ = ggml_graph_cpy$MH();
        try {
            mh$.invokeExact(src, dst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$94.const$4,"ggml_graph_reset");
    }
    /**
     * {@snippet lang=c :
     * void ggml_graph_reset(struct ggml_cgraph* cgraph);
     * }
     */
    public static void ggml_graph_reset(MemorySegment cgraph) {
        var mh$ = ggml_graph_reset$MH();
        try {
            mh$.invokeExact(cgraph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$94.const$5,"ggml_graph_clear");
    }
    /**
     * {@snippet lang=c :
     * void ggml_graph_clear(struct ggml_cgraph* cgraph);
     * }
     */
    public static void ggml_graph_clear(MemorySegment cgraph) {
        var mh$ = ggml_graph_clear$MH();
        try {
            mh$.invokeExact(cgraph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_size$MH() {
        return RuntimeHelper.requireNonNull(constants$95.const$0,"ggml_graph_size");
    }
    /**
     * {@snippet lang=c :
     * int ggml_graph_size(struct ggml_cgraph* cgraph);
     * }
     */
    public static int ggml_graph_size(MemorySegment cgraph) {
        var mh$ = ggml_graph_size$MH();
        try {
            return (int)mh$.invokeExact(cgraph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_node$MH() {
        return RuntimeHelper.requireNonNull(constants$95.const$2,"ggml_graph_node");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_graph_node(struct ggml_cgraph* cgraph, int i);
     * }
     */
    public static MemorySegment ggml_graph_node(MemorySegment cgraph, int i) {
        var mh$ = ggml_graph_node$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(cgraph, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_nodes$MH() {
        return RuntimeHelper.requireNonNull(constants$95.const$3,"ggml_graph_nodes");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor** ggml_graph_nodes(struct ggml_cgraph* cgraph);
     * }
     */
    public static MemorySegment ggml_graph_nodes(MemorySegment cgraph) {
        var mh$ = ggml_graph_nodes$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(cgraph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_n_nodes$MH() {
        return RuntimeHelper.requireNonNull(constants$95.const$4,"ggml_graph_n_nodes");
    }
    /**
     * {@snippet lang=c :
     * int ggml_graph_n_nodes(struct ggml_cgraph* cgraph);
     * }
     */
    public static int ggml_graph_n_nodes(MemorySegment cgraph) {
        var mh$ = ggml_graph_n_nodes$MH();
        try {
            return (int)mh$.invokeExact(cgraph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_add_node$MH() {
        return RuntimeHelper.requireNonNull(constants$95.const$5,"ggml_graph_add_node");
    }
    /**
     * {@snippet lang=c :
     * void ggml_graph_add_node(struct ggml_cgraph* cgraph, struct ggml_tensor* tensor);
     * }
     */
    public static void ggml_graph_add_node(MemorySegment cgraph, MemorySegment tensor) {
        var mh$ = ggml_graph_add_node$MH();
        try {
            mh$.invokeExact(cgraph, tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_overhead$MH() {
        return RuntimeHelper.requireNonNull(constants$96.const$0,"ggml_graph_overhead");
    }
    /**
     * {@snippet lang=c :
     * unsigned long ggml_graph_overhead();
     * }
     */
    public static long ggml_graph_overhead() {
        var mh$ = ggml_graph_overhead$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_overhead_custom$MH() {
        return RuntimeHelper.requireNonNull(constants$96.const$2,"ggml_graph_overhead_custom");
    }
    /**
     * {@snippet lang=c :
     * unsigned long ggml_graph_overhead_custom(unsigned long size, _Bool grads);
     * }
     */
    public static long ggml_graph_overhead_custom(long size, boolean grads) {
        var mh$ = ggml_graph_overhead_custom$MH();
        try {
            return (long)mh$.invokeExact(size, grads);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_get_tensor$MH() {
        return RuntimeHelper.requireNonNull(constants$96.const$3,"ggml_graph_get_tensor");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_graph_get_tensor(struct ggml_cgraph* cgraph, char* name);
     * }
     */
    public static MemorySegment ggml_graph_get_tensor(MemorySegment cgraph, MemorySegment name) {
        var mh$ = ggml_graph_get_tensor$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(cgraph, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_get_grad$MH() {
        return RuntimeHelper.requireNonNull(constants$96.const$4,"ggml_graph_get_grad");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_graph_get_grad(struct ggml_cgraph* cgraph, struct ggml_tensor* node);
     * }
     */
    public static MemorySegment ggml_graph_get_grad(MemorySegment cgraph, MemorySegment node) {
        var mh$ = ggml_graph_get_grad$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(cgraph, node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_get_grad_acc$MH() {
        return RuntimeHelper.requireNonNull(constants$96.const$5,"ggml_graph_get_grad_acc");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_graph_get_grad_acc(struct ggml_cgraph* cgraph, struct ggml_tensor* node);
     * }
     */
    public static MemorySegment ggml_graph_get_grad_acc(MemorySegment cgraph, MemorySegment node) {
        var mh$ = ggml_graph_get_grad_acc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(cgraph, node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_export$MH() {
        return RuntimeHelper.requireNonNull(constants$97.const$0,"ggml_graph_export");
    }
    /**
     * {@snippet lang=c :
     * void ggml_graph_export(struct ggml_cgraph* cgraph, char* fname);
     * }
     */
    public static void ggml_graph_export(MemorySegment cgraph, MemorySegment fname) {
        var mh$ = ggml_graph_export$MH();
        try {
            mh$.invokeExact(cgraph, fname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_import$MH() {
        return RuntimeHelper.requireNonNull(constants$97.const$1,"ggml_graph_import");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_cgraph* ggml_graph_import(char* fname, struct ggml_context** ctx_data, struct ggml_context** ctx_eval);
     * }
     */
    public static MemorySegment ggml_graph_import(MemorySegment fname, MemorySegment ctx_data, MemorySegment ctx_eval) {
        var mh$ = ggml_graph_import$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fname, ctx_data, ctx_eval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_print$MH() {
        return RuntimeHelper.requireNonNull(constants$97.const$2,"ggml_graph_print");
    }
    /**
     * {@snippet lang=c :
     * void ggml_graph_print(struct ggml_cgraph* cgraph);
     * }
     */
    public static void ggml_graph_print(MemorySegment cgraph) {
        var mh$ = ggml_graph_print$MH();
        try {
            mh$.invokeExact(cgraph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_dump_dot$MH() {
        return RuntimeHelper.requireNonNull(constants$97.const$3,"ggml_graph_dump_dot");
    }
    /**
     * {@snippet lang=c :
     * void ggml_graph_dump_dot(struct ggml_cgraph* gb, struct ggml_cgraph* gf, char* filename);
     * }
     */
    public static void ggml_graph_dump_dot(MemorySegment gb, MemorySegment gf, MemorySegment filename) {
        var mh$ = ggml_graph_dump_dot$MH();
        try {
            mh$.invokeExact(gb, gf, filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_log_set$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$0,"ggml_log_set");
    }
    /**
     * {@snippet lang=c :
     * void ggml_log_set(void (*log_callback)(enum ggml_log_level,char*,void*), void* user_data);
     * }
     */
    public static void ggml_log_set(MemorySegment log_callback, MemorySegment user_data) {
        var mh$ = ggml_log_set$MH();
        try {
            mh$.invokeExact(log_callback, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$1,"ggml_set_zero");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_set_zero(struct ggml_tensor* tensor);
     * }
     */
    public static MemorySegment ggml_set_zero(MemorySegment tensor) {
        var mh$ = ggml_set_zero$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_quantize_init$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$3,"ggml_quantize_init");
    }
    /**
     * {@snippet lang=c :
     * void ggml_quantize_init(enum ggml_type type);
     * }
     */
    public static void ggml_quantize_init(int type) {
        var mh$ = ggml_quantize_init$MH();
        try {
            mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_quantize_free$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$4,"ggml_quantize_free");
    }
    /**
     * {@snippet lang=c :
     * void ggml_quantize_free();
     * }
     */
    public static void ggml_quantize_free() {
        var mh$ = ggml_quantize_free$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_quantize_requires_imatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$5,"ggml_quantize_requires_imatrix");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_quantize_requires_imatrix(enum ggml_type type);
     * }
     */
    public static boolean ggml_quantize_requires_imatrix(int type) {
        var mh$ = ggml_quantize_requires_imatrix$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_quantize_chunk$MH() {
        return RuntimeHelper.requireNonNull(constants$99.const$1,"ggml_quantize_chunk");
    }
    /**
     * {@snippet lang=c :
     * unsigned long ggml_quantize_chunk(enum ggml_type type, float* src, void* dst, long long start, long long nrows, long long n_per_row, float* imatrix);
     * }
     */
    public static long ggml_quantize_chunk(int type, MemorySegment src, MemorySegment dst, long start, long nrows, long n_per_row, MemorySegment imatrix) {
        var mh$ = ggml_quantize_chunk$MH();
        try {
            return (long)mh$.invokeExact(type, src, dst, start, nrows, n_per_row, imatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_type_traits$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$3,"ggml_get_type_traits");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_type_traits* ggml_get_type_traits(enum ggml_type type);
     * }
     */
    public static MemorySegment ggml_get_type_traits(int type) {
        var mh$ = ggml_get_type_traits$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * enum ggml_sched_priority.GGML_SCHED_PRIO_NORMAL = 0;
     * }
     */
    public static int GGML_SCHED_PRIO_NORMAL() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_sched_priority.GGML_SCHED_PRIO_MEDIUM = 1;
     * }
     */
    public static int GGML_SCHED_PRIO_MEDIUM() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_sched_priority.GGML_SCHED_PRIO_HIGH = 2;
     * }
     */
    public static int GGML_SCHED_PRIO_HIGH() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_sched_priority.GGML_SCHED_PRIO_REALTIME = 3;
     * }
     */
    public static int GGML_SCHED_PRIO_REALTIME() {
        return (int)3L;
    }
    /**
     * {@snippet lang=c :
     * typedef struct ggml_threadpool* ggml_threadpool_t;
     * }
     */
    public static final AddressLayout ggml_threadpool_t = RuntimeHelper.POINTER;
    public static MethodHandle ggml_threadpool_params_default$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$5,"ggml_threadpool_params_default");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_threadpool_params ggml_threadpool_params_default(int n_threads);
     * }
     */
    public static MemorySegment ggml_threadpool_params_default(SegmentAllocator allocator, int n_threads) {
        var mh$ = ggml_threadpool_params_default$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, n_threads);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_threadpool_params_init$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$0,"ggml_threadpool_params_init");
    }
    /**
     * {@snippet lang=c :
     * void ggml_threadpool_params_init(struct ggml_threadpool_params* p, int n_threads);
     * }
     */
    public static void ggml_threadpool_params_init(MemorySegment p, int n_threads) {
        var mh$ = ggml_threadpool_params_init$MH();
        try {
            mh$.invokeExact(p, n_threads);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_threadpool_params_match$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$1,"ggml_threadpool_params_match");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_threadpool_params_match(struct ggml_threadpool_params* p0, struct ggml_threadpool_params* p1);
     * }
     */
    public static boolean ggml_threadpool_params_match(MemorySegment p0, MemorySegment p1) {
        var mh$ = ggml_threadpool_params_match$MH();
        try {
            return (boolean)mh$.invokeExact(p0, p1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct ggml_backend_buffer_type* ggml_backend_buffer_type_t;
     * }
     */
    public static final AddressLayout ggml_backend_buffer_type_t = RuntimeHelper.POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct ggml_backend_buffer* ggml_backend_buffer_t;
     * }
     */
    public static final AddressLayout ggml_backend_buffer_t = RuntimeHelper.POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct ggml_backend* ggml_backend_t;
     * }
     */
    public static final AddressLayout ggml_backend_t = RuntimeHelper.POINTER;
    public static MethodHandle ggml_tallocr_new$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$2,"ggml_tallocr_new");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tallocr ggml_tallocr_new(struct ggml_backend_buffer* buffer);
     * }
     */
    public static MemorySegment ggml_tallocr_new(SegmentAllocator allocator, MemorySegment buffer) {
        var mh$ = ggml_tallocr_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_tallocr_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$3,"ggml_tallocr_alloc");
    }
    /**
     * {@snippet lang=c :
     * enum ggml_status ggml_tallocr_alloc(struct ggml_tallocr* talloc, struct ggml_tensor* tensor);
     * }
     */
    public static int ggml_tallocr_alloc(MemorySegment talloc, MemorySegment tensor) {
        var mh$ = ggml_tallocr_alloc$MH();
        try {
            return (int)mh$.invokeExact(talloc, tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct ggml_gallocr* ggml_gallocr_t;
     * }
     */
    public static final AddressLayout ggml_gallocr_t = RuntimeHelper.POINTER;
    public static MethodHandle ggml_gallocr_new$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$4,"ggml_gallocr_new");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_gallocr* ggml_gallocr_new(struct ggml_backend_buffer_type* buft);
     * }
     */
    public static MemorySegment ggml_gallocr_new(MemorySegment buft) {
        var mh$ = ggml_gallocr_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(buft);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_gallocr_new_n$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$5,"ggml_gallocr_new_n");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_gallocr* ggml_gallocr_new_n(struct ggml_backend_buffer_type** bufts, int n_bufs);
     * }
     */
    public static MemorySegment ggml_gallocr_new_n(MemorySegment bufts, int n_bufs) {
        var mh$ = ggml_gallocr_new_n$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(bufts, n_bufs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_gallocr_free$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$0,"ggml_gallocr_free");
    }
    /**
     * {@snippet lang=c :
     * void ggml_gallocr_free(struct ggml_gallocr* galloc);
     * }
     */
    public static void ggml_gallocr_free(MemorySegment galloc) {
        var mh$ = ggml_gallocr_free$MH();
        try {
            mh$.invokeExact(galloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_gallocr_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$1,"ggml_gallocr_reserve");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_gallocr_reserve(struct ggml_gallocr* galloc, struct ggml_cgraph* graph);
     * }
     */
    public static boolean ggml_gallocr_reserve(MemorySegment galloc, MemorySegment graph) {
        var mh$ = ggml_gallocr_reserve$MH();
        try {
            return (boolean)mh$.invokeExact(galloc, graph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_gallocr_reserve_n$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$3,"ggml_gallocr_reserve_n");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_gallocr_reserve_n(struct ggml_gallocr* galloc, struct ggml_cgraph* graph, int* node_buffer_ids, int* leaf_buffer_ids);
     * }
     */
    public static boolean ggml_gallocr_reserve_n(MemorySegment galloc, MemorySegment graph, MemorySegment node_buffer_ids, MemorySegment leaf_buffer_ids) {
        var mh$ = ggml_gallocr_reserve_n$MH();
        try {
            return (boolean)mh$.invokeExact(galloc, graph, node_buffer_ids, leaf_buffer_ids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_gallocr_alloc_graph$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$4,"ggml_gallocr_alloc_graph");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_gallocr_alloc_graph(struct ggml_gallocr* galloc, struct ggml_cgraph* graph);
     * }
     */
    public static boolean ggml_gallocr_alloc_graph(MemorySegment galloc, MemorySegment graph) {
        var mh$ = ggml_gallocr_alloc_graph$MH();
        try {
            return (boolean)mh$.invokeExact(galloc, graph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_gallocr_get_buffer_size$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$6,"ggml_gallocr_get_buffer_size");
    }
    /**
     * {@snippet lang=c :
     * unsigned long ggml_gallocr_get_buffer_size(struct ggml_gallocr* galloc, int buffer_id);
     * }
     */
    public static long ggml_gallocr_get_buffer_size(MemorySegment galloc, int buffer_id) {
        var mh$ = ggml_gallocr_get_buffer_size$MH();
        try {
            return (long)mh$.invokeExact(galloc, buffer_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_alloc_ctx_tensors_from_buft$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$0,"ggml_backend_alloc_ctx_tensors_from_buft");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend_buffer* ggml_backend_alloc_ctx_tensors_from_buft(struct ggml_context* ctx, struct ggml_backend_buffer_type* buft);
     * }
     */
    public static MemorySegment ggml_backend_alloc_ctx_tensors_from_buft(MemorySegment ctx, MemorySegment buft) {
        var mh$ = ggml_backend_alloc_ctx_tensors_from_buft$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, buft);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_alloc_ctx_tensors$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$1,"ggml_backend_alloc_ctx_tensors");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend_buffer* ggml_backend_alloc_ctx_tensors(struct ggml_context* ctx, struct ggml_backend* backend);
     * }
     */
    public static MemorySegment ggml_backend_alloc_ctx_tensors(MemorySegment ctx, MemorySegment backend) {
        var mh$ = ggml_backend_alloc_ctx_tensors$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, backend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct ggml_backend_event* ggml_backend_event_t;
     * }
     */
    public static final AddressLayout ggml_backend_event_t = RuntimeHelper.POINTER;
    /**
     * {@snippet lang=c :
     * typedef void* ggml_backend_graph_plan_t;
     * }
     */
    public static final AddressLayout ggml_backend_graph_plan_t = RuntimeHelper.POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct ggml_backend_reg* ggml_backend_reg_t;
     * }
     */
    public static final AddressLayout ggml_backend_reg_t = RuntimeHelper.POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct ggml_backend_device* ggml_backend_dev_t;
     * }
     */
    public static final AddressLayout ggml_backend_dev_t = RuntimeHelper.POINTER;
    public static MethodHandle ggml_backend_buft_name$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$2,"ggml_backend_buft_name");
    }
    /**
     * {@snippet lang=c :
     * char* ggml_backend_buft_name(struct ggml_backend_buffer_type* buft);
     * }
     */
    public static MemorySegment ggml_backend_buft_name(MemorySegment buft) {
        var mh$ = ggml_backend_buft_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(buft);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buft_alloc_buffer$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$3,"ggml_backend_buft_alloc_buffer");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend_buffer* ggml_backend_buft_alloc_buffer(struct ggml_backend_buffer_type* buft, unsigned long size);
     * }
     */
    public static MemorySegment ggml_backend_buft_alloc_buffer(MemorySegment buft, long size) {
        var mh$ = ggml_backend_buft_alloc_buffer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(buft, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buft_get_alignment$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$4,"ggml_backend_buft_get_alignment");
    }
    /**
     * {@snippet lang=c :
     * unsigned long ggml_backend_buft_get_alignment(struct ggml_backend_buffer_type* buft);
     * }
     */
    public static long ggml_backend_buft_get_alignment(MemorySegment buft) {
        var mh$ = ggml_backend_buft_get_alignment$MH();
        try {
            return (long)mh$.invokeExact(buft);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buft_get_max_size$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$5,"ggml_backend_buft_get_max_size");
    }
    /**
     * {@snippet lang=c :
     * unsigned long ggml_backend_buft_get_max_size(struct ggml_backend_buffer_type* buft);
     * }
     */
    public static long ggml_backend_buft_get_max_size(MemorySegment buft) {
        var mh$ = ggml_backend_buft_get_max_size$MH();
        try {
            return (long)mh$.invokeExact(buft);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buft_get_alloc_size$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$1,"ggml_backend_buft_get_alloc_size");
    }
    /**
     * {@snippet lang=c :
     * unsigned long ggml_backend_buft_get_alloc_size(struct ggml_backend_buffer_type* buft, struct ggml_tensor* tensor);
     * }
     */
    public static long ggml_backend_buft_get_alloc_size(MemorySegment buft, MemorySegment tensor) {
        var mh$ = ggml_backend_buft_get_alloc_size$MH();
        try {
            return (long)mh$.invokeExact(buft, tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buft_is_host$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$2,"ggml_backend_buft_is_host");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_backend_buft_is_host(struct ggml_backend_buffer_type* buft);
     * }
     */
    public static boolean ggml_backend_buft_is_host(MemorySegment buft) {
        var mh$ = ggml_backend_buft_is_host$MH();
        try {
            return (boolean)mh$.invokeExact(buft);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buft_get_device$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$3,"ggml_backend_buft_get_device");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend_device* ggml_backend_buft_get_device(struct ggml_backend_buffer_type* buft);
     * }
     */
    public static MemorySegment ggml_backend_buft_get_device(MemorySegment buft) {
        var mh$ = ggml_backend_buft_get_device$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(buft);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * enum ggml_backend_buffer_usage.GGML_BACKEND_BUFFER_USAGE_ANY = 0;
     * }
     */
    public static int GGML_BACKEND_BUFFER_USAGE_ANY() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_backend_buffer_usage.GGML_BACKEND_BUFFER_USAGE_WEIGHTS = 1;
     * }
     */
    public static int GGML_BACKEND_BUFFER_USAGE_WEIGHTS() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_backend_buffer_usage.GGML_BACKEND_BUFFER_USAGE_COMPUTE = 2;
     * }
     */
    public static int GGML_BACKEND_BUFFER_USAGE_COMPUTE() {
        return (int)2L;
    }
    public static MethodHandle ggml_backend_buffer_name$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$4,"ggml_backend_buffer_name");
    }
    /**
     * {@snippet lang=c :
     * char* ggml_backend_buffer_name(struct ggml_backend_buffer* buffer);
     * }
     */
    public static MemorySegment ggml_backend_buffer_name(MemorySegment buffer) {
        var mh$ = ggml_backend_buffer_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buffer_free$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$5,"ggml_backend_buffer_free");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_buffer_free(struct ggml_backend_buffer* buffer);
     * }
     */
    public static void ggml_backend_buffer_free(MemorySegment buffer) {
        var mh$ = ggml_backend_buffer_free$MH();
        try {
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buffer_get_base$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$0,"ggml_backend_buffer_get_base");
    }
    /**
     * {@snippet lang=c :
     * void* ggml_backend_buffer_get_base(struct ggml_backend_buffer* buffer);
     * }
     */
    public static MemorySegment ggml_backend_buffer_get_base(MemorySegment buffer) {
        var mh$ = ggml_backend_buffer_get_base$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buffer_get_size$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$1,"ggml_backend_buffer_get_size");
    }
    /**
     * {@snippet lang=c :
     * unsigned long ggml_backend_buffer_get_size(struct ggml_backend_buffer* buffer);
     * }
     */
    public static long ggml_backend_buffer_get_size(MemorySegment buffer) {
        var mh$ = ggml_backend_buffer_get_size$MH();
        try {
            return (long)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buffer_init_tensor$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$2,"ggml_backend_buffer_init_tensor");
    }
    /**
     * {@snippet lang=c :
     * enum ggml_status ggml_backend_buffer_init_tensor(struct ggml_backend_buffer* buffer, struct ggml_tensor* tensor);
     * }
     */
    public static int ggml_backend_buffer_init_tensor(MemorySegment buffer, MemorySegment tensor) {
        var mh$ = ggml_backend_buffer_init_tensor$MH();
        try {
            return (int)mh$.invokeExact(buffer, tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buffer_get_alignment$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$3,"ggml_backend_buffer_get_alignment");
    }
    /**
     * {@snippet lang=c :
     * unsigned long ggml_backend_buffer_get_alignment(struct ggml_backend_buffer* buffer);
     * }
     */
    public static long ggml_backend_buffer_get_alignment(MemorySegment buffer) {
        var mh$ = ggml_backend_buffer_get_alignment$MH();
        try {
            return (long)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buffer_get_max_size$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$4,"ggml_backend_buffer_get_max_size");
    }
    /**
     * {@snippet lang=c :
     * unsigned long ggml_backend_buffer_get_max_size(struct ggml_backend_buffer* buffer);
     * }
     */
    public static long ggml_backend_buffer_get_max_size(MemorySegment buffer) {
        var mh$ = ggml_backend_buffer_get_max_size$MH();
        try {
            return (long)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buffer_get_alloc_size$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$5,"ggml_backend_buffer_get_alloc_size");
    }
    /**
     * {@snippet lang=c :
     * unsigned long ggml_backend_buffer_get_alloc_size(struct ggml_backend_buffer* buffer, struct ggml_tensor* tensor);
     * }
     */
    public static long ggml_backend_buffer_get_alloc_size(MemorySegment buffer, MemorySegment tensor) {
        var mh$ = ggml_backend_buffer_get_alloc_size$MH();
        try {
            return (long)mh$.invokeExact(buffer, tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buffer_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$1,"ggml_backend_buffer_clear");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_buffer_clear(struct ggml_backend_buffer* buffer, unsigned char value);
     * }
     */
    public static void ggml_backend_buffer_clear(MemorySegment buffer, byte value) {
        var mh$ = ggml_backend_buffer_clear$MH();
        try {
            mh$.invokeExact(buffer, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buffer_is_host$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$2,"ggml_backend_buffer_is_host");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_backend_buffer_is_host(struct ggml_backend_buffer* buffer);
     * }
     */
    public static boolean ggml_backend_buffer_is_host(MemorySegment buffer) {
        var mh$ = ggml_backend_buffer_is_host$MH();
        try {
            return (boolean)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buffer_set_usage$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$3,"ggml_backend_buffer_set_usage");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_buffer_set_usage(struct ggml_backend_buffer* buffer, enum ggml_backend_buffer_usage usage);
     * }
     */
    public static void ggml_backend_buffer_set_usage(MemorySegment buffer, int usage) {
        var mh$ = ggml_backend_buffer_set_usage$MH();
        try {
            mh$.invokeExact(buffer, usage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buffer_get_usage$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$4,"ggml_backend_buffer_get_usage");
    }
    /**
     * {@snippet lang=c :
     * enum ggml_backend_buffer_usage ggml_backend_buffer_get_usage(struct ggml_backend_buffer* buffer);
     * }
     */
    public static int ggml_backend_buffer_get_usage(MemorySegment buffer) {
        var mh$ = ggml_backend_buffer_get_usage$MH();
        try {
            return (int)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buffer_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$109.const$5,"ggml_backend_buffer_get_type");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend_buffer_type* ggml_backend_buffer_get_type(struct ggml_backend_buffer* buffer);
     * }
     */
    public static MemorySegment ggml_backend_buffer_get_type(MemorySegment buffer) {
        var mh$ = ggml_backend_buffer_get_type$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buffer_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$0,"ggml_backend_buffer_reset");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_buffer_reset(struct ggml_backend_buffer* buffer);
     * }
     */
    public static void ggml_backend_buffer_reset(MemorySegment buffer) {
        var mh$ = ggml_backend_buffer_reset$MH();
        try {
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_tensor_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$1,"ggml_backend_tensor_copy");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_tensor_copy(struct ggml_tensor* src, struct ggml_tensor* dst);
     * }
     */
    public static void ggml_backend_tensor_copy(MemorySegment src, MemorySegment dst) {
        var mh$ = ggml_backend_tensor_copy$MH();
        try {
            mh$.invokeExact(src, dst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_guid$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$2,"ggml_backend_guid");
    }
    /**
     * {@snippet lang=c :
     * unsigned char *ggml_backend_guid(struct ggml_backend* backend)[16];
     * }
     */
    public static MemorySegment ggml_backend_guid(MemorySegment backend) {
        var mh$ = ggml_backend_guid$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(backend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_name$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$3,"ggml_backend_name");
    }
    /**
     * {@snippet lang=c :
     * char* ggml_backend_name(struct ggml_backend* backend);
     * }
     */
    public static MemorySegment ggml_backend_name(MemorySegment backend) {
        var mh$ = ggml_backend_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(backend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_free$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$4,"ggml_backend_free");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_free(struct ggml_backend* backend);
     * }
     */
    public static void ggml_backend_free(MemorySegment backend) {
        var mh$ = ggml_backend_free$MH();
        try {
            mh$.invokeExact(backend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_get_default_buffer_type$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$5,"ggml_backend_get_default_buffer_type");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend_buffer_type* ggml_backend_get_default_buffer_type(struct ggml_backend* backend);
     * }
     */
    public static MemorySegment ggml_backend_get_default_buffer_type(MemorySegment backend) {
        var mh$ = ggml_backend_get_default_buffer_type$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(backend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_alloc_buffer$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$0,"ggml_backend_alloc_buffer");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend_buffer* ggml_backend_alloc_buffer(struct ggml_backend* backend, unsigned long size);
     * }
     */
    public static MemorySegment ggml_backend_alloc_buffer(MemorySegment backend, long size) {
        var mh$ = ggml_backend_alloc_buffer$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(backend, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_get_alignment$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$1,"ggml_backend_get_alignment");
    }
    /**
     * {@snippet lang=c :
     * unsigned long ggml_backend_get_alignment(struct ggml_backend* backend);
     * }
     */
    public static long ggml_backend_get_alignment(MemorySegment backend) {
        var mh$ = ggml_backend_get_alignment$MH();
        try {
            return (long)mh$.invokeExact(backend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_get_max_size$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$2,"ggml_backend_get_max_size");
    }
    /**
     * {@snippet lang=c :
     * unsigned long ggml_backend_get_max_size(struct ggml_backend* backend);
     * }
     */
    public static long ggml_backend_get_max_size(MemorySegment backend) {
        var mh$ = ggml_backend_get_max_size$MH();
        try {
            return (long)mh$.invokeExact(backend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_tensor_set_async$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$4,"ggml_backend_tensor_set_async");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_tensor_set_async(struct ggml_backend* backend, struct ggml_tensor* tensor, void* data, unsigned long offset, unsigned long size);
     * }
     */
    public static void ggml_backend_tensor_set_async(MemorySegment backend, MemorySegment tensor, MemorySegment data, long offset, long size) {
        var mh$ = ggml_backend_tensor_set_async$MH();
        try {
            mh$.invokeExact(backend, tensor, data, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_tensor_get_async$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$5,"ggml_backend_tensor_get_async");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_tensor_get_async(struct ggml_backend* backend, struct ggml_tensor* tensor, void* data, unsigned long offset, unsigned long size);
     * }
     */
    public static void ggml_backend_tensor_get_async(MemorySegment backend, MemorySegment tensor, MemorySegment data, long offset, long size) {
        var mh$ = ggml_backend_tensor_get_async$MH();
        try {
            mh$.invokeExact(backend, tensor, data, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_tensor_set$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$1,"ggml_backend_tensor_set");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_tensor_set(struct ggml_tensor* tensor, void* data, unsigned long offset, unsigned long size);
     * }
     */
    public static void ggml_backend_tensor_set(MemorySegment tensor, MemorySegment data, long offset, long size) {
        var mh$ = ggml_backend_tensor_set$MH();
        try {
            mh$.invokeExact(tensor, data, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_tensor_get$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$2,"ggml_backend_tensor_get");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_tensor_get(struct ggml_tensor* tensor, void* data, unsigned long offset, unsigned long size);
     * }
     */
    public static void ggml_backend_tensor_get(MemorySegment tensor, MemorySegment data, long offset, long size) {
        var mh$ = ggml_backend_tensor_get$MH();
        try {
            mh$.invokeExact(tensor, data, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_tensor_memset$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$4,"ggml_backend_tensor_memset");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_tensor_memset(struct ggml_tensor* tensor, unsigned char value, unsigned long offset, unsigned long size);
     * }
     */
    public static void ggml_backend_tensor_memset(MemorySegment tensor, byte value, long offset, long size) {
        var mh$ = ggml_backend_tensor_memset$MH();
        try {
            mh$.invokeExact(tensor, value, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_synchronize$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$5,"ggml_backend_synchronize");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_synchronize(struct ggml_backend* backend);
     * }
     */
    public static void ggml_backend_synchronize(MemorySegment backend) {
        var mh$ = ggml_backend_synchronize$MH();
        try {
            mh$.invokeExact(backend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_graph_plan_create$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$0,"ggml_backend_graph_plan_create");
    }
    /**
     * {@snippet lang=c :
     * void* ggml_backend_graph_plan_create(struct ggml_backend* backend, struct ggml_cgraph* cgraph);
     * }
     */
    public static MemorySegment ggml_backend_graph_plan_create(MemorySegment backend, MemorySegment cgraph) {
        var mh$ = ggml_backend_graph_plan_create$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(backend, cgraph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_graph_plan_free$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$1,"ggml_backend_graph_plan_free");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_graph_plan_free(struct ggml_backend* backend, void* plan);
     * }
     */
    public static void ggml_backend_graph_plan_free(MemorySegment backend, MemorySegment plan) {
        var mh$ = ggml_backend_graph_plan_free$MH();
        try {
            mh$.invokeExact(backend, plan);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_graph_plan_compute$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$2,"ggml_backend_graph_plan_compute");
    }
    /**
     * {@snippet lang=c :
     * enum ggml_status ggml_backend_graph_plan_compute(struct ggml_backend* backend, void* plan);
     * }
     */
    public static int ggml_backend_graph_plan_compute(MemorySegment backend, MemorySegment plan) {
        var mh$ = ggml_backend_graph_plan_compute$MH();
        try {
            return (int)mh$.invokeExact(backend, plan);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_graph_compute$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$3,"ggml_backend_graph_compute");
    }
    /**
     * {@snippet lang=c :
     * enum ggml_status ggml_backend_graph_compute(struct ggml_backend* backend, struct ggml_cgraph* cgraph);
     * }
     */
    public static int ggml_backend_graph_compute(MemorySegment backend, MemorySegment cgraph) {
        var mh$ = ggml_backend_graph_compute$MH();
        try {
            return (int)mh$.invokeExact(backend, cgraph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_graph_compute_async$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$4,"ggml_backend_graph_compute_async");
    }
    /**
     * {@snippet lang=c :
     * enum ggml_status ggml_backend_graph_compute_async(struct ggml_backend* backend, struct ggml_cgraph* cgraph);
     * }
     */
    public static int ggml_backend_graph_compute_async(MemorySegment backend, MemorySegment cgraph) {
        var mh$ = ggml_backend_graph_compute_async$MH();
        try {
            return (int)mh$.invokeExact(backend, cgraph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_supports_op$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$5,"ggml_backend_supports_op");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_backend_supports_op(struct ggml_backend* backend, struct ggml_tensor* op);
     * }
     */
    public static boolean ggml_backend_supports_op(MemorySegment backend, MemorySegment op) {
        var mh$ = ggml_backend_supports_op$MH();
        try {
            return (boolean)mh$.invokeExact(backend, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_supports_buft$MH() {
        return RuntimeHelper.requireNonNull(constants$114.const$0,"ggml_backend_supports_buft");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_backend_supports_buft(struct ggml_backend* backend, struct ggml_backend_buffer_type* buft);
     * }
     */
    public static boolean ggml_backend_supports_buft(MemorySegment backend, MemorySegment buft) {
        var mh$ = ggml_backend_supports_buft$MH();
        try {
            return (boolean)mh$.invokeExact(backend, buft);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_offload_op$MH() {
        return RuntimeHelper.requireNonNull(constants$114.const$1,"ggml_backend_offload_op");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_backend_offload_op(struct ggml_backend* backend, struct ggml_tensor* op);
     * }
     */
    public static boolean ggml_backend_offload_op(MemorySegment backend, MemorySegment op) {
        var mh$ = ggml_backend_offload_op$MH();
        try {
            return (boolean)mh$.invokeExact(backend, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_tensor_copy_async$MH() {
        return RuntimeHelper.requireNonNull(constants$114.const$2,"ggml_backend_tensor_copy_async");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_tensor_copy_async(struct ggml_backend* backend_src, struct ggml_backend* backend_dst, struct ggml_tensor* src, struct ggml_tensor* dst);
     * }
     */
    public static void ggml_backend_tensor_copy_async(MemorySegment backend_src, MemorySegment backend_dst, MemorySegment src, MemorySegment dst) {
        var mh$ = ggml_backend_tensor_copy_async$MH();
        try {
            mh$.invokeExact(backend_src, backend_dst, src, dst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_get_device$MH() {
        return RuntimeHelper.requireNonNull(constants$114.const$3,"ggml_backend_get_device");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend_device* ggml_backend_get_device(struct ggml_backend* backend);
     * }
     */
    public static MemorySegment ggml_backend_get_device(MemorySegment backend) {
        var mh$ = ggml_backend_get_device$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(backend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_event_new$MH() {
        return RuntimeHelper.requireNonNull(constants$114.const$4,"ggml_backend_event_new");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend_event* ggml_backend_event_new(struct ggml_backend_device* device);
     * }
     */
    public static MemorySegment ggml_backend_event_new(MemorySegment device) {
        var mh$ = ggml_backend_event_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_event_free$MH() {
        return RuntimeHelper.requireNonNull(constants$114.const$5,"ggml_backend_event_free");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_event_free(struct ggml_backend_event* event);
     * }
     */
    public static void ggml_backend_event_free(MemorySegment event) {
        var mh$ = ggml_backend_event_free$MH();
        try {
            mh$.invokeExact(event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_event_record$MH() {
        return RuntimeHelper.requireNonNull(constants$115.const$0,"ggml_backend_event_record");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_event_record(struct ggml_backend_event* event, struct ggml_backend* backend);
     * }
     */
    public static void ggml_backend_event_record(MemorySegment event, MemorySegment backend) {
        var mh$ = ggml_backend_event_record$MH();
        try {
            mh$.invokeExact(event, backend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_event_synchronize$MH() {
        return RuntimeHelper.requireNonNull(constants$115.const$1,"ggml_backend_event_synchronize");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_event_synchronize(struct ggml_backend_event* event);
     * }
     */
    public static void ggml_backend_event_synchronize(MemorySegment event) {
        var mh$ = ggml_backend_event_synchronize$MH();
        try {
            mh$.invokeExact(event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_event_wait$MH() {
        return RuntimeHelper.requireNonNull(constants$115.const$2,"ggml_backend_event_wait");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_event_wait(struct ggml_backend* backend, struct ggml_backend_event* event);
     * }
     */
    public static void ggml_backend_event_wait(MemorySegment backend, MemorySegment event) {
        var mh$ = ggml_backend_event_wait$MH();
        try {
            mh$.invokeExact(backend, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * enum ggml_backend_dev_type.GGML_BACKEND_DEVICE_TYPE_CPU = 0;
     * }
     */
    public static int GGML_BACKEND_DEVICE_TYPE_CPU() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_backend_dev_type.GGML_BACKEND_DEVICE_TYPE_GPU = 1;
     * }
     */
    public static int GGML_BACKEND_DEVICE_TYPE_GPU() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_backend_dev_type.GGML_BACKEND_DEVICE_TYPE_ACCEL = 2;
     * }
     */
    public static int GGML_BACKEND_DEVICE_TYPE_ACCEL() {
        return (int)2L;
    }
    public static MethodHandle ggml_backend_dev_name$MH() {
        return RuntimeHelper.requireNonNull(constants$117.const$2,"ggml_backend_dev_name");
    }
    /**
     * {@snippet lang=c :
     * char* ggml_backend_dev_name(struct ggml_backend_device* device);
     * }
     */
    public static MemorySegment ggml_backend_dev_name(MemorySegment device) {
        var mh$ = ggml_backend_dev_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_description$MH() {
        return RuntimeHelper.requireNonNull(constants$117.const$3,"ggml_backend_dev_description");
    }
    /**
     * {@snippet lang=c :
     * char* ggml_backend_dev_description(struct ggml_backend_device* device);
     * }
     */
    public static MemorySegment ggml_backend_dev_description(MemorySegment device) {
        var mh$ = ggml_backend_dev_description$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_memory$MH() {
        return RuntimeHelper.requireNonNull(constants$117.const$4,"ggml_backend_dev_memory");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_dev_memory(struct ggml_backend_device* device, unsigned long* free, unsigned long* total);
     * }
     */
    public static void ggml_backend_dev_memory(MemorySegment device, MemorySegment free, MemorySegment total) {
        var mh$ = ggml_backend_dev_memory$MH();
        try {
            mh$.invokeExact(device, free, total);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_type$MH() {
        return RuntimeHelper.requireNonNull(constants$117.const$5,"ggml_backend_dev_type");
    }
    /**
     * {@snippet lang=c :
     * enum ggml_backend_dev_type ggml_backend_dev_type(struct ggml_backend_device* device);
     * }
     */
    public static int ggml_backend_dev_type(MemorySegment device) {
        var mh$ = ggml_backend_dev_type$MH();
        try {
            return (int)mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_get_props$MH() {
        return RuntimeHelper.requireNonNull(constants$118.const$0,"ggml_backend_dev_get_props");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_dev_get_props(struct ggml_backend_device* device, struct ggml_backend_dev_props* props);
     * }
     */
    public static void ggml_backend_dev_get_props(MemorySegment device, MemorySegment props) {
        var mh$ = ggml_backend_dev_get_props$MH();
        try {
            mh$.invokeExact(device, props);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_backend_reg$MH() {
        return RuntimeHelper.requireNonNull(constants$118.const$1,"ggml_backend_dev_backend_reg");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend_reg* ggml_backend_dev_backend_reg(struct ggml_backend_device* device);
     * }
     */
    public static MemorySegment ggml_backend_dev_backend_reg(MemorySegment device) {
        var mh$ = ggml_backend_dev_backend_reg$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_init$MH() {
        return RuntimeHelper.requireNonNull(constants$118.const$2,"ggml_backend_dev_init");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend* ggml_backend_dev_init(struct ggml_backend_device* device, char* params);
     * }
     */
    public static MemorySegment ggml_backend_dev_init(MemorySegment device, MemorySegment params) {
        var mh$ = ggml_backend_dev_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_buffer_type$MH() {
        return RuntimeHelper.requireNonNull(constants$118.const$3,"ggml_backend_dev_buffer_type");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend_buffer_type* ggml_backend_dev_buffer_type(struct ggml_backend_device* device);
     * }
     */
    public static MemorySegment ggml_backend_dev_buffer_type(MemorySegment device) {
        var mh$ = ggml_backend_dev_buffer_type$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_host_buffer_type$MH() {
        return RuntimeHelper.requireNonNull(constants$118.const$4,"ggml_backend_dev_host_buffer_type");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend_buffer_type* ggml_backend_dev_host_buffer_type(struct ggml_backend_device* device);
     * }
     */
    public static MemorySegment ggml_backend_dev_host_buffer_type(MemorySegment device) {
        var mh$ = ggml_backend_dev_host_buffer_type$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_buffer_from_host_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$118.const$5,"ggml_backend_dev_buffer_from_host_ptr");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend_buffer* ggml_backend_dev_buffer_from_host_ptr(struct ggml_backend_device* device, void* ptr, unsigned long size, unsigned long max_tensor_size);
     * }
     */
    public static MemorySegment ggml_backend_dev_buffer_from_host_ptr(MemorySegment device, MemorySegment ptr, long size, long max_tensor_size) {
        var mh$ = ggml_backend_dev_buffer_from_host_ptr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device, ptr, size, max_tensor_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_supports_op$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$0,"ggml_backend_dev_supports_op");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_backend_dev_supports_op(struct ggml_backend_device* device, struct ggml_tensor* op);
     * }
     */
    public static boolean ggml_backend_dev_supports_op(MemorySegment device, MemorySegment op) {
        var mh$ = ggml_backend_dev_supports_op$MH();
        try {
            return (boolean)mh$.invokeExact(device, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_supports_buft$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$1,"ggml_backend_dev_supports_buft");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_backend_dev_supports_buft(struct ggml_backend_device* device, struct ggml_backend_buffer_type* buft);
     * }
     */
    public static boolean ggml_backend_dev_supports_buft(MemorySegment device, MemorySegment buft) {
        var mh$ = ggml_backend_dev_supports_buft$MH();
        try {
            return (boolean)mh$.invokeExact(device, buft);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_offload_op$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$2,"ggml_backend_dev_offload_op");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_backend_dev_offload_op(struct ggml_backend_device* device, struct ggml_tensor* op);
     * }
     */
    public static boolean ggml_backend_dev_offload_op(MemorySegment device, MemorySegment op) {
        var mh$ = ggml_backend_dev_offload_op$MH();
        try {
            return (boolean)mh$.invokeExact(device, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_reg_name$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$3,"ggml_backend_reg_name");
    }
    /**
     * {@snippet lang=c :
     * char* ggml_backend_reg_name(struct ggml_backend_reg* reg);
     * }
     */
    public static MemorySegment ggml_backend_reg_name(MemorySegment reg) {
        var mh$ = ggml_backend_reg_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(reg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_reg_dev_count$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$4,"ggml_backend_reg_dev_count");
    }
    /**
     * {@snippet lang=c :
     * unsigned long ggml_backend_reg_dev_count(struct ggml_backend_reg* reg);
     * }
     */
    public static long ggml_backend_reg_dev_count(MemorySegment reg) {
        var mh$ = ggml_backend_reg_dev_count$MH();
        try {
            return (long)mh$.invokeExact(reg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_reg_dev_get$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$5,"ggml_backend_reg_dev_get");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend_device* ggml_backend_reg_dev_get(struct ggml_backend_reg* reg, unsigned long index);
     * }
     */
    public static MemorySegment ggml_backend_reg_dev_get(MemorySegment reg, long index) {
        var mh$ = ggml_backend_reg_dev_get$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(reg, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_reg_get_proc_address$MH() {
        return RuntimeHelper.requireNonNull(constants$120.const$0,"ggml_backend_reg_get_proc_address");
    }
    /**
     * {@snippet lang=c :
     * void* ggml_backend_reg_get_proc_address(struct ggml_backend_reg* reg, char* name);
     * }
     */
    public static MemorySegment ggml_backend_reg_get_proc_address(MemorySegment reg, MemorySegment name) {
        var mh$ = ggml_backend_reg_get_proc_address$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(reg, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_device_register$MH() {
        return RuntimeHelper.requireNonNull(constants$122.const$0,"ggml_backend_device_register");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_device_register(struct ggml_backend_device* device);
     * }
     */
    public static void ggml_backend_device_register(MemorySegment device) {
        var mh$ = ggml_backend_device_register$MH();
        try {
            mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_reg_count$MH() {
        return RuntimeHelper.requireNonNull(constants$122.const$1,"ggml_backend_reg_count");
    }
    /**
     * {@snippet lang=c :
     * unsigned long ggml_backend_reg_count();
     * }
     */
    public static long ggml_backend_reg_count() {
        var mh$ = ggml_backend_reg_count$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_reg_get$MH() {
        return RuntimeHelper.requireNonNull(constants$122.const$3,"ggml_backend_reg_get");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend_reg* ggml_backend_reg_get(unsigned long index);
     * }
     */
    public static MemorySegment ggml_backend_reg_get(long index) {
        var mh$ = ggml_backend_reg_get$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_reg_by_name$MH() {
        return RuntimeHelper.requireNonNull(constants$122.const$4,"ggml_backend_reg_by_name");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend_reg* ggml_backend_reg_by_name(char* name);
     * }
     */
    public static MemorySegment ggml_backend_reg_by_name(MemorySegment name) {
        var mh$ = ggml_backend_reg_by_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_count$MH() {
        return RuntimeHelper.requireNonNull(constants$122.const$5,"ggml_backend_dev_count");
    }
    /**
     * {@snippet lang=c :
     * unsigned long ggml_backend_dev_count();
     * }
     */
    public static long ggml_backend_dev_count() {
        var mh$ = ggml_backend_dev_count$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_get$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$0,"ggml_backend_dev_get");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend_device* ggml_backend_dev_get(unsigned long index);
     * }
     */
    public static MemorySegment ggml_backend_dev_get(long index) {
        var mh$ = ggml_backend_dev_get$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_by_name$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$1,"ggml_backend_dev_by_name");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend_device* ggml_backend_dev_by_name(char* name);
     * }
     */
    public static MemorySegment ggml_backend_dev_by_name(MemorySegment name) {
        var mh$ = ggml_backend_dev_by_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_by_type$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$2,"ggml_backend_dev_by_type");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend_device* ggml_backend_dev_by_type(enum ggml_backend_dev_type type);
     * }
     */
    public static MemorySegment ggml_backend_dev_by_type(int type) {
        var mh$ = ggml_backend_dev_by_type$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_init_by_name$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$3,"ggml_backend_init_by_name");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend* ggml_backend_init_by_name(char* name, char* params);
     * }
     */
    public static MemorySegment ggml_backend_init_by_name(MemorySegment name, MemorySegment params) {
        var mh$ = ggml_backend_init_by_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_init_by_type$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$4,"ggml_backend_init_by_type");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend* ggml_backend_init_by_type(enum ggml_backend_dev_type type, char* params);
     * }
     */
    public static MemorySegment ggml_backend_init_by_type(int type, MemorySegment params) {
        var mh$ = ggml_backend_init_by_type$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(type, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_init_best$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$5,"ggml_backend_init_best");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend* ggml_backend_init_best();
     * }
     */
    public static MemorySegment ggml_backend_init_best() {
        var mh$ = ggml_backend_init_best$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_load$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$0,"ggml_backend_load");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend_reg* ggml_backend_load(char* path);
     * }
     */
    public static MemorySegment ggml_backend_load(MemorySegment path) {
        var mh$ = ggml_backend_load$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_unload$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$1,"ggml_backend_unload");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_unload(struct ggml_backend_reg* reg);
     * }
     */
    public static void ggml_backend_unload(MemorySegment reg) {
        var mh$ = ggml_backend_unload$MH();
        try {
            mh$.invokeExact(reg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_load_all$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$2,"ggml_backend_load_all");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_load_all();
     * }
     */
    public static void ggml_backend_load_all() {
        var mh$ = ggml_backend_load_all$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_load_all_from_path$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$3,"ggml_backend_load_all_from_path");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_load_all_from_path(char* dir_path);
     * }
     */
    public static void ggml_backend_load_all_from_path(MemorySegment dir_path) {
        var mh$ = ggml_backend_load_all_from_path$MH();
        try {
            mh$.invokeExact(dir_path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct ggml_backend_sched* ggml_backend_sched_t;
     * }
     */
    public static final AddressLayout ggml_backend_sched_t = RuntimeHelper.POINTER;
    public static MethodHandle ggml_backend_sched_new$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$2,"ggml_backend_sched_new");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend_sched* ggml_backend_sched_new(struct ggml_backend** backends, struct ggml_backend_buffer_type** bufts, int n_backends, unsigned long graph_size, _Bool parallel);
     * }
     */
    public static MemorySegment ggml_backend_sched_new(MemorySegment backends, MemorySegment bufts, int n_backends, long graph_size, boolean parallel) {
        var mh$ = ggml_backend_sched_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(backends, bufts, n_backends, graph_size, parallel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_free$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$3,"ggml_backend_sched_free");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_sched_free(struct ggml_backend_sched* sched);
     * }
     */
    public static void ggml_backend_sched_free(MemorySegment sched) {
        var mh$ = ggml_backend_sched_free$MH();
        try {
            mh$.invokeExact(sched);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$4,"ggml_backend_sched_reserve");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_backend_sched_reserve(struct ggml_backend_sched* sched, struct ggml_cgraph* measure_graph);
     * }
     */
    public static boolean ggml_backend_sched_reserve(MemorySegment sched, MemorySegment measure_graph) {
        var mh$ = ggml_backend_sched_reserve$MH();
        try {
            return (boolean)mh$.invokeExact(sched, measure_graph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_get_n_backends$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$5,"ggml_backend_sched_get_n_backends");
    }
    /**
     * {@snippet lang=c :
     * int ggml_backend_sched_get_n_backends(struct ggml_backend_sched* sched);
     * }
     */
    public static int ggml_backend_sched_get_n_backends(MemorySegment sched) {
        var mh$ = ggml_backend_sched_get_n_backends$MH();
        try {
            return (int)mh$.invokeExact(sched);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_get_backend$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$0,"ggml_backend_sched_get_backend");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend* ggml_backend_sched_get_backend(struct ggml_backend_sched* sched, int i);
     * }
     */
    public static MemorySegment ggml_backend_sched_get_backend(MemorySegment sched, int i) {
        var mh$ = ggml_backend_sched_get_backend$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(sched, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_get_n_splits$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$1,"ggml_backend_sched_get_n_splits");
    }
    /**
     * {@snippet lang=c :
     * int ggml_backend_sched_get_n_splits(struct ggml_backend_sched* sched);
     * }
     */
    public static int ggml_backend_sched_get_n_splits(MemorySegment sched) {
        var mh$ = ggml_backend_sched_get_n_splits$MH();
        try {
            return (int)mh$.invokeExact(sched);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_get_n_copies$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$2,"ggml_backend_sched_get_n_copies");
    }
    /**
     * {@snippet lang=c :
     * int ggml_backend_sched_get_n_copies(struct ggml_backend_sched* sched);
     * }
     */
    public static int ggml_backend_sched_get_n_copies(MemorySegment sched) {
        var mh$ = ggml_backend_sched_get_n_copies$MH();
        try {
            return (int)mh$.invokeExact(sched);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_get_buffer_size$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$3,"ggml_backend_sched_get_buffer_size");
    }
    /**
     * {@snippet lang=c :
     * unsigned long ggml_backend_sched_get_buffer_size(struct ggml_backend_sched* sched, struct ggml_backend* backend);
     * }
     */
    public static long ggml_backend_sched_get_buffer_size(MemorySegment sched, MemorySegment backend) {
        var mh$ = ggml_backend_sched_get_buffer_size$MH();
        try {
            return (long)mh$.invokeExact(sched, backend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_set_tensor_backend$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$4,"ggml_backend_sched_set_tensor_backend");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_sched_set_tensor_backend(struct ggml_backend_sched* sched, struct ggml_tensor* node, struct ggml_backend* backend);
     * }
     */
    public static void ggml_backend_sched_set_tensor_backend(MemorySegment sched, MemorySegment node, MemorySegment backend) {
        var mh$ = ggml_backend_sched_set_tensor_backend$MH();
        try {
            mh$.invokeExact(sched, node, backend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_get_tensor_backend$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$5,"ggml_backend_sched_get_tensor_backend");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend* ggml_backend_sched_get_tensor_backend(struct ggml_backend_sched* sched, struct ggml_tensor* node);
     * }
     */
    public static MemorySegment ggml_backend_sched_get_tensor_backend(MemorySegment sched, MemorySegment node) {
        var mh$ = ggml_backend_sched_get_tensor_backend$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(sched, node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_alloc_graph$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$0,"ggml_backend_sched_alloc_graph");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_backend_sched_alloc_graph(struct ggml_backend_sched* sched, struct ggml_cgraph* graph);
     * }
     */
    public static boolean ggml_backend_sched_alloc_graph(MemorySegment sched, MemorySegment graph) {
        var mh$ = ggml_backend_sched_alloc_graph$MH();
        try {
            return (boolean)mh$.invokeExact(sched, graph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_graph_compute$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$1,"ggml_backend_sched_graph_compute");
    }
    /**
     * {@snippet lang=c :
     * enum ggml_status ggml_backend_sched_graph_compute(struct ggml_backend_sched* sched, struct ggml_cgraph* graph);
     * }
     */
    public static int ggml_backend_sched_graph_compute(MemorySegment sched, MemorySegment graph) {
        var mh$ = ggml_backend_sched_graph_compute$MH();
        try {
            return (int)mh$.invokeExact(sched, graph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_graph_compute_async$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$2,"ggml_backend_sched_graph_compute_async");
    }
    /**
     * {@snippet lang=c :
     * enum ggml_status ggml_backend_sched_graph_compute_async(struct ggml_backend_sched* sched, struct ggml_cgraph* graph);
     * }
     */
    public static int ggml_backend_sched_graph_compute_async(MemorySegment sched, MemorySegment graph) {
        var mh$ = ggml_backend_sched_graph_compute_async$MH();
        try {
            return (int)mh$.invokeExact(sched, graph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_synchronize$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$3,"ggml_backend_sched_synchronize");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_sched_synchronize(struct ggml_backend_sched* sched);
     * }
     */
    public static void ggml_backend_sched_synchronize(MemorySegment sched) {
        var mh$ = ggml_backend_sched_synchronize$MH();
        try {
            mh$.invokeExact(sched);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$4,"ggml_backend_sched_reset");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_sched_reset(struct ggml_backend_sched* sched);
     * }
     */
    public static void ggml_backend_sched_reset(MemorySegment sched) {
        var mh$ = ggml_backend_sched_reset$MH();
        try {
            mh$.invokeExact(sched);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_set_eval_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$128.const$0,"ggml_backend_sched_set_eval_callback");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_sched_set_eval_callback(struct ggml_backend_sched* sched, _Bool (*callback)(struct ggml_tensor*,_Bool,void*), void* user_data);
     * }
     */
    public static void ggml_backend_sched_set_eval_callback(MemorySegment sched, MemorySegment callback, MemorySegment user_data) {
        var mh$ = ggml_backend_sched_set_eval_callback$MH();
        try {
            mh$.invokeExact(sched, callback, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_graph_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$1,"ggml_backend_graph_copy");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend_graph_copy ggml_backend_graph_copy(struct ggml_backend* backend, struct ggml_cgraph* graph);
     * }
     */
    public static MemorySegment ggml_backend_graph_copy(SegmentAllocator allocator, MemorySegment backend, MemorySegment graph) {
        var mh$ = ggml_backend_graph_copy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, backend, graph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_graph_copy_free$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$3,"ggml_backend_graph_copy_free");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_graph_copy_free(struct ggml_backend_graph_copy copy);
     * }
     */
    public static void ggml_backend_graph_copy_free(MemorySegment copy) {
        var mh$ = ggml_backend_graph_copy_free$MH();
        try {
            mh$.invokeExact(copy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_compare_graph_backend$MH() {
        return RuntimeHelper.requireNonNull(constants$130.const$3,"ggml_backend_compare_graph_backend");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_backend_compare_graph_backend(struct ggml_backend* backend1, struct ggml_backend* backend2, struct ggml_cgraph* graph, _Bool (*callback)(int,struct ggml_tensor*,struct ggml_tensor*,void*), void* user_data);
     * }
     */
    public static boolean ggml_backend_compare_graph_backend(MemorySegment backend1, MemorySegment backend2, MemorySegment graph, MemorySegment callback, MemorySegment user_data) {
        var mh$ = ggml_backend_compare_graph_backend$MH();
        try {
            return (boolean)mh$.invokeExact(backend1, backend2, graph, callback, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_tensor_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$130.const$4,"ggml_backend_tensor_alloc");
    }
    /**
     * {@snippet lang=c :
     * enum ggml_status ggml_backend_tensor_alloc(struct ggml_backend_buffer* buffer, struct ggml_tensor* tensor, void* addr);
     * }
     */
    public static int ggml_backend_tensor_alloc(MemorySegment buffer, MemorySegment tensor, MemorySegment addr) {
        var mh$ = ggml_backend_tensor_alloc$MH();
        try {
            return (int)mh$.invokeExact(buffer, tensor, addr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_view_init$MH() {
        return RuntimeHelper.requireNonNull(constants$130.const$5,"ggml_backend_view_init");
    }
    /**
     * {@snippet lang=c :
     * enum ggml_status ggml_backend_view_init(struct ggml_tensor* tensor);
     * }
     */
    public static int ggml_backend_view_init(MemorySegment tensor) {
        var mh$ = ggml_backend_view_init$MH();
        try {
            return (int)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_cpu_buffer_from_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$131.const$0,"ggml_backend_cpu_buffer_from_ptr");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend_buffer* ggml_backend_cpu_buffer_from_ptr(void* ptr, unsigned long size);
     * }
     */
    public static MemorySegment ggml_backend_cpu_buffer_from_ptr(MemorySegment ptr, long size) {
        var mh$ = ggml_backend_cpu_buffer_from_ptr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ptr, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_cpu_buffer_type$MH() {
        return RuntimeHelper.requireNonNull(constants$131.const$1,"ggml_backend_cpu_buffer_type");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend_buffer_type* ggml_backend_cpu_buffer_type();
     * }
     */
    public static MemorySegment ggml_backend_cpu_buffer_type() {
        var mh$ = ggml_backend_cpu_buffer_type$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * enum ggml_numa_strategy.GGML_NUMA_STRATEGY_DISABLED = 0;
     * }
     */
    public static int GGML_NUMA_STRATEGY_DISABLED() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_numa_strategy.GGML_NUMA_STRATEGY_DISTRIBUTE = 1;
     * }
     */
    public static int GGML_NUMA_STRATEGY_DISTRIBUTE() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_numa_strategy.GGML_NUMA_STRATEGY_ISOLATE = 2;
     * }
     */
    public static int GGML_NUMA_STRATEGY_ISOLATE() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_numa_strategy.GGML_NUMA_STRATEGY_NUMACTL = 3;
     * }
     */
    public static int GGML_NUMA_STRATEGY_NUMACTL() {
        return (int)3L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_numa_strategy.GGML_NUMA_STRATEGY_MIRROR = 4;
     * }
     */
    public static int GGML_NUMA_STRATEGY_MIRROR() {
        return (int)4L;
    }
    /**
     * {@snippet lang=c :
     * enum ggml_numa_strategy.GGML_NUMA_STRATEGY_COUNT = 5;
     * }
     */
    public static int GGML_NUMA_STRATEGY_COUNT() {
        return (int)5L;
    }
    public static MethodHandle ggml_numa_init$MH() {
        return RuntimeHelper.requireNonNull(constants$132.const$4,"ggml_numa_init");
    }
    /**
     * {@snippet lang=c :
     * void ggml_numa_init(enum ggml_numa_strategy numa);
     * }
     */
    public static void ggml_numa_init(int numa) {
        var mh$ = ggml_numa_init$MH();
        try {
            mh$.invokeExact(numa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_is_numa$MH() {
        return RuntimeHelper.requireNonNull(constants$132.const$6,"ggml_is_numa");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_is_numa();
     * }
     */
    public static boolean ggml_is_numa() {
        var mh$ = ggml_is_numa$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_new_i32$MH() {
        return RuntimeHelper.requireNonNull(constants$133.const$0,"ggml_new_i32");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_new_i32(struct ggml_context* ctx, int value);
     * }
     */
    public static MemorySegment ggml_new_i32(MemorySegment ctx, int value) {
        var mh$ = ggml_new_i32$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_new_f32$MH() {
        return RuntimeHelper.requireNonNull(constants$133.const$2,"ggml_new_f32");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_new_f32(struct ggml_context* ctx, float value);
     * }
     */
    public static MemorySegment ggml_new_f32(MemorySegment ctx, float value) {
        var mh$ = ggml_new_f32$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_i32$MH() {
        return RuntimeHelper.requireNonNull(constants$133.const$3,"ggml_set_i32");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_set_i32(struct ggml_tensor* tensor, int value);
     * }
     */
    public static MemorySegment ggml_set_i32(MemorySegment tensor, int value) {
        var mh$ = ggml_set_i32$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tensor, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_f32$MH() {
        return RuntimeHelper.requireNonNull(constants$133.const$4,"ggml_set_f32");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_tensor* ggml_set_f32(struct ggml_tensor* tensor, float value);
     * }
     */
    public static MemorySegment ggml_set_f32(MemorySegment tensor, float value) {
        var mh$ = ggml_set_f32$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tensor, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_i32_1d$MH() {
        return RuntimeHelper.requireNonNull(constants$133.const$6,"ggml_get_i32_1d");
    }
    /**
     * {@snippet lang=c :
     * int ggml_get_i32_1d(struct ggml_tensor* tensor, int i);
     * }
     */
    public static int ggml_get_i32_1d(MemorySegment tensor, int i) {
        var mh$ = ggml_get_i32_1d$MH();
        try {
            return (int)mh$.invokeExact(tensor, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_i32_1d$MH() {
        return RuntimeHelper.requireNonNull(constants$134.const$1,"ggml_set_i32_1d");
    }
    /**
     * {@snippet lang=c :
     * void ggml_set_i32_1d(struct ggml_tensor* tensor, int i, int value);
     * }
     */
    public static void ggml_set_i32_1d(MemorySegment tensor, int i, int value) {
        var mh$ = ggml_set_i32_1d$MH();
        try {
            mh$.invokeExact(tensor, i, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_i32_nd$MH() {
        return RuntimeHelper.requireNonNull(constants$134.const$3,"ggml_get_i32_nd");
    }
    /**
     * {@snippet lang=c :
     * int ggml_get_i32_nd(struct ggml_tensor* tensor, int i0, int i1, int i2, int i3);
     * }
     */
    public static int ggml_get_i32_nd(MemorySegment tensor, int i0, int i1, int i2, int i3) {
        var mh$ = ggml_get_i32_nd$MH();
        try {
            return (int)mh$.invokeExact(tensor, i0, i1, i2, i3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_i32_nd$MH() {
        return RuntimeHelper.requireNonNull(constants$134.const$5,"ggml_set_i32_nd");
    }
    /**
     * {@snippet lang=c :
     * void ggml_set_i32_nd(struct ggml_tensor* tensor, int i0, int i1, int i2, int i3, int value);
     * }
     */
    public static void ggml_set_i32_nd(MemorySegment tensor, int i0, int i1, int i2, int i3, int value) {
        var mh$ = ggml_set_i32_nd$MH();
        try {
            mh$.invokeExact(tensor, i0, i1, i2, i3, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_f32_1d$MH() {
        return RuntimeHelper.requireNonNull(constants$135.const$1,"ggml_get_f32_1d");
    }
    /**
     * {@snippet lang=c :
     * float ggml_get_f32_1d(struct ggml_tensor* tensor, int i);
     * }
     */
    public static float ggml_get_f32_1d(MemorySegment tensor, int i) {
        var mh$ = ggml_get_f32_1d$MH();
        try {
            return (float)mh$.invokeExact(tensor, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_f32_1d$MH() {
        return RuntimeHelper.requireNonNull(constants$135.const$3,"ggml_set_f32_1d");
    }
    /**
     * {@snippet lang=c :
     * void ggml_set_f32_1d(struct ggml_tensor* tensor, int i, float value);
     * }
     */
    public static void ggml_set_f32_1d(MemorySegment tensor, int i, float value) {
        var mh$ = ggml_set_f32_1d$MH();
        try {
            mh$.invokeExact(tensor, i, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_f32_nd$MH() {
        return RuntimeHelper.requireNonNull(constants$135.const$5,"ggml_get_f32_nd");
    }
    /**
     * {@snippet lang=c :
     * float ggml_get_f32_nd(struct ggml_tensor* tensor, int i0, int i1, int i2, int i3);
     * }
     */
    public static float ggml_get_f32_nd(MemorySegment tensor, int i0, int i1, int i2, int i3) {
        var mh$ = ggml_get_f32_nd$MH();
        try {
            return (float)mh$.invokeExact(tensor, i0, i1, i2, i3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_f32_nd$MH() {
        return RuntimeHelper.requireNonNull(constants$136.const$1,"ggml_set_f32_nd");
    }
    /**
     * {@snippet lang=c :
     * void ggml_set_f32_nd(struct ggml_tensor* tensor, int i0, int i1, int i2, int i3, float value);
     * }
     */
    public static void ggml_set_f32_nd(MemorySegment tensor, int i0, int i1, int i2, int i3, float value) {
        var mh$ = ggml_set_f32_nd$MH();
        try {
            mh$.invokeExact(tensor, i0, i1, i2, i3, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_threadpool_new$MH() {
        return RuntimeHelper.requireNonNull(constants$136.const$2,"ggml_threadpool_new");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_threadpool* ggml_threadpool_new(struct ggml_threadpool_params* params);
     * }
     */
    public static MemorySegment ggml_threadpool_new(MemorySegment params) {
        var mh$ = ggml_threadpool_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_threadpool_free$MH() {
        return RuntimeHelper.requireNonNull(constants$136.const$3,"ggml_threadpool_free");
    }
    /**
     * {@snippet lang=c :
     * void ggml_threadpool_free(struct ggml_threadpool* threadpool);
     * }
     */
    public static void ggml_threadpool_free(MemorySegment threadpool) {
        var mh$ = ggml_threadpool_free$MH();
        try {
            mh$.invokeExact(threadpool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_threadpool_get_n_threads$MH() {
        return RuntimeHelper.requireNonNull(constants$136.const$4,"ggml_threadpool_get_n_threads");
    }
    /**
     * {@snippet lang=c :
     * int ggml_threadpool_get_n_threads(struct ggml_threadpool* threadpool);
     * }
     */
    public static int ggml_threadpool_get_n_threads(MemorySegment threadpool) {
        var mh$ = ggml_threadpool_get_n_threads$MH();
        try {
            return (int)mh$.invokeExact(threadpool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_threadpool_pause$MH() {
        return RuntimeHelper.requireNonNull(constants$136.const$5,"ggml_threadpool_pause");
    }
    /**
     * {@snippet lang=c :
     * void ggml_threadpool_pause(struct ggml_threadpool* threadpool);
     * }
     */
    public static void ggml_threadpool_pause(MemorySegment threadpool) {
        var mh$ = ggml_threadpool_pause$MH();
        try {
            mh$.invokeExact(threadpool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_threadpool_resume$MH() {
        return RuntimeHelper.requireNonNull(constants$137.const$0,"ggml_threadpool_resume");
    }
    /**
     * {@snippet lang=c :
     * void ggml_threadpool_resume(struct ggml_threadpool* threadpool);
     * }
     */
    public static void ggml_threadpool_resume(MemorySegment threadpool) {
        var mh$ = ggml_threadpool_resume$MH();
        try {
            mh$.invokeExact(threadpool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_plan$MH() {
        return RuntimeHelper.requireNonNull(constants$137.const$2,"ggml_graph_plan");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_cplan ggml_graph_plan(struct ggml_cgraph* cgraph, int n_threads, struct ggml_threadpool* threadpool);
     * }
     */
    public static MemorySegment ggml_graph_plan(SegmentAllocator allocator, MemorySegment cgraph, int n_threads, MemorySegment threadpool) {
        var mh$ = ggml_graph_plan$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, cgraph, n_threads, threadpool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_compute$MH() {
        return RuntimeHelper.requireNonNull(constants$137.const$3,"ggml_graph_compute");
    }
    /**
     * {@snippet lang=c :
     * enum ggml_status ggml_graph_compute(struct ggml_cgraph* cgraph, struct ggml_cplan* cplan);
     * }
     */
    public static int ggml_graph_compute(MemorySegment cgraph, MemorySegment cplan) {
        var mh$ = ggml_graph_compute$MH();
        try {
            return (int)mh$.invokeExact(cgraph, cplan);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_compute_with_ctx$MH() {
        return RuntimeHelper.requireNonNull(constants$137.const$4,"ggml_graph_compute_with_ctx");
    }
    /**
     * {@snippet lang=c :
     * enum ggml_status ggml_graph_compute_with_ctx(struct ggml_context* ctx, struct ggml_cgraph* cgraph, int n_threads);
     * }
     */
    public static int ggml_graph_compute_with_ctx(MemorySegment ctx, MemorySegment cgraph, int n_threads) {
        var mh$ = ggml_graph_compute_with_ctx$MH();
        try {
            return (int)mh$.invokeExact(ctx, cgraph, n_threads);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_sse3$MH() {
        return RuntimeHelper.requireNonNull(constants$137.const$5,"ggml_cpu_has_sse3");
    }
    /**
     * {@snippet lang=c :
     * int ggml_cpu_has_sse3();
     * }
     */
    public static int ggml_cpu_has_sse3() {
        var mh$ = ggml_cpu_has_sse3$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_ssse3$MH() {
        return RuntimeHelper.requireNonNull(constants$138.const$0,"ggml_cpu_has_ssse3");
    }
    /**
     * {@snippet lang=c :
     * int ggml_cpu_has_ssse3();
     * }
     */
    public static int ggml_cpu_has_ssse3() {
        var mh$ = ggml_cpu_has_ssse3$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_avx$MH() {
        return RuntimeHelper.requireNonNull(constants$138.const$1,"ggml_cpu_has_avx");
    }
    /**
     * {@snippet lang=c :
     * int ggml_cpu_has_avx();
     * }
     */
    public static int ggml_cpu_has_avx() {
        var mh$ = ggml_cpu_has_avx$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_avx_vnni$MH() {
        return RuntimeHelper.requireNonNull(constants$138.const$2,"ggml_cpu_has_avx_vnni");
    }
    /**
     * {@snippet lang=c :
     * int ggml_cpu_has_avx_vnni();
     * }
     */
    public static int ggml_cpu_has_avx_vnni() {
        var mh$ = ggml_cpu_has_avx_vnni$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_avx2$MH() {
        return RuntimeHelper.requireNonNull(constants$138.const$3,"ggml_cpu_has_avx2");
    }
    /**
     * {@snippet lang=c :
     * int ggml_cpu_has_avx2();
     * }
     */
    public static int ggml_cpu_has_avx2() {
        var mh$ = ggml_cpu_has_avx2$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_bmi2$MH() {
        return RuntimeHelper.requireNonNull(constants$138.const$4,"ggml_cpu_has_bmi2");
    }
    /**
     * {@snippet lang=c :
     * int ggml_cpu_has_bmi2();
     * }
     */
    public static int ggml_cpu_has_bmi2() {
        var mh$ = ggml_cpu_has_bmi2$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_f16c$MH() {
        return RuntimeHelper.requireNonNull(constants$138.const$5,"ggml_cpu_has_f16c");
    }
    /**
     * {@snippet lang=c :
     * int ggml_cpu_has_f16c();
     * }
     */
    public static int ggml_cpu_has_f16c() {
        var mh$ = ggml_cpu_has_f16c$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_fma$MH() {
        return RuntimeHelper.requireNonNull(constants$139.const$0,"ggml_cpu_has_fma");
    }
    /**
     * {@snippet lang=c :
     * int ggml_cpu_has_fma();
     * }
     */
    public static int ggml_cpu_has_fma() {
        var mh$ = ggml_cpu_has_fma$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_avx512$MH() {
        return RuntimeHelper.requireNonNull(constants$139.const$1,"ggml_cpu_has_avx512");
    }
    /**
     * {@snippet lang=c :
     * int ggml_cpu_has_avx512();
     * }
     */
    public static int ggml_cpu_has_avx512() {
        var mh$ = ggml_cpu_has_avx512$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_avx512_vbmi$MH() {
        return RuntimeHelper.requireNonNull(constants$139.const$2,"ggml_cpu_has_avx512_vbmi");
    }
    /**
     * {@snippet lang=c :
     * int ggml_cpu_has_avx512_vbmi();
     * }
     */
    public static int ggml_cpu_has_avx512_vbmi() {
        var mh$ = ggml_cpu_has_avx512_vbmi$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_avx512_vnni$MH() {
        return RuntimeHelper.requireNonNull(constants$139.const$3,"ggml_cpu_has_avx512_vnni");
    }
    /**
     * {@snippet lang=c :
     * int ggml_cpu_has_avx512_vnni();
     * }
     */
    public static int ggml_cpu_has_avx512_vnni() {
        var mh$ = ggml_cpu_has_avx512_vnni$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_avx512_bf16$MH() {
        return RuntimeHelper.requireNonNull(constants$139.const$4,"ggml_cpu_has_avx512_bf16");
    }
    /**
     * {@snippet lang=c :
     * int ggml_cpu_has_avx512_bf16();
     * }
     */
    public static int ggml_cpu_has_avx512_bf16() {
        var mh$ = ggml_cpu_has_avx512_bf16$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_amx_int8$MH() {
        return RuntimeHelper.requireNonNull(constants$139.const$5,"ggml_cpu_has_amx_int8");
    }
    /**
     * {@snippet lang=c :
     * int ggml_cpu_has_amx_int8();
     * }
     */
    public static int ggml_cpu_has_amx_int8() {
        var mh$ = ggml_cpu_has_amx_int8$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_neon$MH() {
        return RuntimeHelper.requireNonNull(constants$140.const$0,"ggml_cpu_has_neon");
    }
    /**
     * {@snippet lang=c :
     * int ggml_cpu_has_neon();
     * }
     */
    public static int ggml_cpu_has_neon() {
        var mh$ = ggml_cpu_has_neon$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_arm_fma$MH() {
        return RuntimeHelper.requireNonNull(constants$140.const$1,"ggml_cpu_has_arm_fma");
    }
    /**
     * {@snippet lang=c :
     * int ggml_cpu_has_arm_fma();
     * }
     */
    public static int ggml_cpu_has_arm_fma() {
        var mh$ = ggml_cpu_has_arm_fma$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_fp16_va$MH() {
        return RuntimeHelper.requireNonNull(constants$140.const$2,"ggml_cpu_has_fp16_va");
    }
    /**
     * {@snippet lang=c :
     * int ggml_cpu_has_fp16_va();
     * }
     */
    public static int ggml_cpu_has_fp16_va() {
        var mh$ = ggml_cpu_has_fp16_va$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_dotprod$MH() {
        return RuntimeHelper.requireNonNull(constants$140.const$3,"ggml_cpu_has_dotprod");
    }
    /**
     * {@snippet lang=c :
     * int ggml_cpu_has_dotprod();
     * }
     */
    public static int ggml_cpu_has_dotprod() {
        var mh$ = ggml_cpu_has_dotprod$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_matmul_int8$MH() {
        return RuntimeHelper.requireNonNull(constants$140.const$4,"ggml_cpu_has_matmul_int8");
    }
    /**
     * {@snippet lang=c :
     * int ggml_cpu_has_matmul_int8();
     * }
     */
    public static int ggml_cpu_has_matmul_int8() {
        var mh$ = ggml_cpu_has_matmul_int8$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_sve$MH() {
        return RuntimeHelper.requireNonNull(constants$140.const$5,"ggml_cpu_has_sve");
    }
    /**
     * {@snippet lang=c :
     * int ggml_cpu_has_sve();
     * }
     */
    public static int ggml_cpu_has_sve() {
        var mh$ = ggml_cpu_has_sve$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_get_sve_cnt$MH() {
        return RuntimeHelper.requireNonNull(constants$141.const$0,"ggml_cpu_get_sve_cnt");
    }
    /**
     * {@snippet lang=c :
     * int ggml_cpu_get_sve_cnt();
     * }
     */
    public static int ggml_cpu_get_sve_cnt() {
        var mh$ = ggml_cpu_get_sve_cnt$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_sme$MH() {
        return RuntimeHelper.requireNonNull(constants$141.const$1,"ggml_cpu_has_sme");
    }
    /**
     * {@snippet lang=c :
     * int ggml_cpu_has_sme();
     * }
     */
    public static int ggml_cpu_has_sme() {
        var mh$ = ggml_cpu_has_sme$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_riscv_v$MH() {
        return RuntimeHelper.requireNonNull(constants$141.const$2,"ggml_cpu_has_riscv_v");
    }
    /**
     * {@snippet lang=c :
     * int ggml_cpu_has_riscv_v();
     * }
     */
    public static int ggml_cpu_has_riscv_v() {
        var mh$ = ggml_cpu_has_riscv_v$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_vsx$MH() {
        return RuntimeHelper.requireNonNull(constants$141.const$3,"ggml_cpu_has_vsx");
    }
    /**
     * {@snippet lang=c :
     * int ggml_cpu_has_vsx();
     * }
     */
    public static int ggml_cpu_has_vsx() {
        var mh$ = ggml_cpu_has_vsx$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_vxe$MH() {
        return RuntimeHelper.requireNonNull(constants$141.const$4,"ggml_cpu_has_vxe");
    }
    /**
     * {@snippet lang=c :
     * int ggml_cpu_has_vxe();
     * }
     */
    public static int ggml_cpu_has_vxe() {
        var mh$ = ggml_cpu_has_vxe$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_wasm_simd$MH() {
        return RuntimeHelper.requireNonNull(constants$141.const$5,"ggml_cpu_has_wasm_simd");
    }
    /**
     * {@snippet lang=c :
     * int ggml_cpu_has_wasm_simd();
     * }
     */
    public static int ggml_cpu_has_wasm_simd() {
        var mh$ = ggml_cpu_has_wasm_simd$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_llamafile$MH() {
        return RuntimeHelper.requireNonNull(constants$142.const$0,"ggml_cpu_has_llamafile");
    }
    /**
     * {@snippet lang=c :
     * int ggml_cpu_has_llamafile();
     * }
     */
    public static int ggml_cpu_has_llamafile() {
        var mh$ = ggml_cpu_has_llamafile$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_type_traits_cpu$MH() {
        return RuntimeHelper.requireNonNull(constants$143.const$5,"ggml_get_type_traits_cpu");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_type_traits_cpu* ggml_get_type_traits_cpu(enum ggml_type type);
     * }
     */
    public static MemorySegment ggml_get_type_traits_cpu(int type) {
        var mh$ = ggml_get_type_traits_cpu$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_init$MH() {
        return RuntimeHelper.requireNonNull(constants$144.const$0,"ggml_cpu_init");
    }
    /**
     * {@snippet lang=c :
     * void ggml_cpu_init();
     * }
     */
    public static void ggml_cpu_init() {
        var mh$ = ggml_cpu_init$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_cpu_init$MH() {
        return RuntimeHelper.requireNonNull(constants$144.const$1,"ggml_backend_cpu_init");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend* ggml_backend_cpu_init();
     * }
     */
    public static MemorySegment ggml_backend_cpu_init() {
        var mh$ = ggml_backend_cpu_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_is_cpu$MH() {
        return RuntimeHelper.requireNonNull(constants$144.const$2,"ggml_backend_is_cpu");
    }
    /**
     * {@snippet lang=c :
     * _Bool ggml_backend_is_cpu(struct ggml_backend* backend);
     * }
     */
    public static boolean ggml_backend_is_cpu(MemorySegment backend) {
        var mh$ = ggml_backend_is_cpu$MH();
        try {
            return (boolean)mh$.invokeExact(backend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_cpu_set_n_threads$MH() {
        return RuntimeHelper.requireNonNull(constants$144.const$3,"ggml_backend_cpu_set_n_threads");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_cpu_set_n_threads(struct ggml_backend* backend_cpu, int n_threads);
     * }
     */
    public static void ggml_backend_cpu_set_n_threads(MemorySegment backend_cpu, int n_threads) {
        var mh$ = ggml_backend_cpu_set_n_threads$MH();
        try {
            mh$.invokeExact(backend_cpu, n_threads);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_cpu_set_threadpool$MH() {
        return RuntimeHelper.requireNonNull(constants$144.const$4,"ggml_backend_cpu_set_threadpool");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_cpu_set_threadpool(struct ggml_backend* backend_cpu, struct ggml_threadpool* threadpool);
     * }
     */
    public static void ggml_backend_cpu_set_threadpool(MemorySegment backend_cpu, MemorySegment threadpool) {
        var mh$ = ggml_backend_cpu_set_threadpool$MH();
        try {
            mh$.invokeExact(backend_cpu, threadpool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_cpu_set_abort_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$145.const$0,"ggml_backend_cpu_set_abort_callback");
    }
    /**
     * {@snippet lang=c :
     * void ggml_backend_cpu_set_abort_callback(struct ggml_backend* backend_cpu, _Bool (*abort_callback)(void*), void* abort_callback_data);
     * }
     */
    public static void ggml_backend_cpu_set_abort_callback(MemorySegment backend_cpu, MemorySegment abort_callback, MemorySegment abort_callback_data) {
        var mh$ = ggml_backend_cpu_set_abort_callback$MH();
        try {
            mh$.invokeExact(backend_cpu, abort_callback, abort_callback_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_cpu_reg$MH() {
        return RuntimeHelper.requireNonNull(constants$145.const$1,"ggml_backend_cpu_reg");
    }
    /**
     * {@snippet lang=c :
     * struct ggml_backend_reg* ggml_backend_cpu_reg();
     * }
     */
    public static MemorySegment ggml_backend_cpu_reg() {
        var mh$ = ggml_backend_cpu_reg$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned long rsize_t;
     * }
     */
    public static final OfLong rsize_t = JAVA_LONG;
    /**
     * {@snippet lang=c :
     * typedef int llama_pos;
     * }
     */
    public static final OfInt llama_pos = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef int llama_token;
     * }
     */
    public static final OfInt llama_token = JAVA_INT;
    /**
     * {@snippet lang=c :
     * typedef int llama_seq_id;
     * }
     */
    public static final OfInt llama_seq_id = JAVA_INT;
    /**
     * {@snippet lang=c :
     * enum llama_vocab_type.LLAMA_VOCAB_TYPE_NONE = 0;
     * }
     */
    public static int LLAMA_VOCAB_TYPE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_type.LLAMA_VOCAB_TYPE_SPM = 1;
     * }
     */
    public static int LLAMA_VOCAB_TYPE_SPM() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_type.LLAMA_VOCAB_TYPE_BPE = 2;
     * }
     */
    public static int LLAMA_VOCAB_TYPE_BPE() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_type.LLAMA_VOCAB_TYPE_WPM = 3;
     * }
     */
    public static int LLAMA_VOCAB_TYPE_WPM() {
        return (int)3L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_type.LLAMA_VOCAB_TYPE_UGM = 4;
     * }
     */
    public static int LLAMA_VOCAB_TYPE_UGM() {
        return (int)4L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_type.LLAMA_VOCAB_TYPE_RWKV = 5;
     * }
     */
    public static int LLAMA_VOCAB_TYPE_RWKV() {
        return (int)5L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_DEFAULT = 0;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_DEFAULT() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_LLAMA3 = 1;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_LLAMA3() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_DEEPSEEK_LLM = 2;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_DEEPSEEK_LLM() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_DEEPSEEK_CODER = 3;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_DEEPSEEK_CODER() {
        return (int)3L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_FALCON = 4;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_FALCON() {
        return (int)4L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_MPT = 5;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_MPT() {
        return (int)5L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_STARCODER = 6;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_STARCODER() {
        return (int)6L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_GPT2 = 7;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_GPT2() {
        return (int)7L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_REFACT = 8;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_REFACT() {
        return (int)8L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_COMMAND_R = 9;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_COMMAND_R() {
        return (int)9L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_STABLELM2 = 10;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_STABLELM2() {
        return (int)10L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_QWEN2 = 11;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_QWEN2() {
        return (int)11L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_OLMO = 12;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_OLMO() {
        return (int)12L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_DBRX = 13;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_DBRX() {
        return (int)13L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_SMAUG = 14;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_SMAUG() {
        return (int)14L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_PORO = 15;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_PORO() {
        return (int)15L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_CHATGLM3 = 16;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_CHATGLM3() {
        return (int)16L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_CHATGLM4 = 17;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_CHATGLM4() {
        return (int)17L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_VIKING = 18;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_VIKING() {
        return (int)18L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_JAIS = 19;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_JAIS() {
        return (int)19L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_TEKKEN = 20;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_TEKKEN() {
        return (int)20L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_SMOLLM = 21;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_SMOLLM() {
        return (int)21L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_CODESHELL = 22;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_CODESHELL() {
        return (int)22L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_BLOOM = 23;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_BLOOM() {
        return (int)23L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_GPT3_FINNISH = 24;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_GPT3_FINNISH() {
        return (int)24L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_EXAONE = 25;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_EXAONE() {
        return (int)25L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_CHAMELEON = 26;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_CHAMELEON() {
        return (int)26L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_MINERVA = 27;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_MINERVA() {
        return (int)27L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_DEEPSEEK3_LLM = 28;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_DEEPSEEK3_LLM() {
        return (int)28L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_GPT4O = 29;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_GPT4O() {
        return (int)29L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_SUPERBPE = 30;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_SUPERBPE() {
        return (int)30L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_TRILLION = 31;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_TRILLION() {
        return (int)31L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_BAILINGMOE = 32;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_BAILINGMOE() {
        return (int)32L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_rope_type.LLAMA_ROPE_TYPE_NONE = -1;
     * }
     */
    public static int LLAMA_ROPE_TYPE_NONE() {
        return (int)-1L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_rope_type.LLAMA_ROPE_TYPE_NORM = 0;
     * }
     */
    public static int LLAMA_ROPE_TYPE_NORM() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_rope_type.LLAMA_ROPE_TYPE_NEOX = 2;
     * }
     */
    public static int LLAMA_ROPE_TYPE_NEOX() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_rope_type.LLAMA_ROPE_TYPE_MROPE = 8;
     * }
     */
    public static int LLAMA_ROPE_TYPE_MROPE() {
        return (int)8L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_rope_type.LLAMA_ROPE_TYPE_VISION = 24;
     * }
     */
    public static int LLAMA_ROPE_TYPE_VISION() {
        return (int)24L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_token_type.LLAMA_TOKEN_TYPE_UNDEFINED = 0;
     * }
     */
    public static int LLAMA_TOKEN_TYPE_UNDEFINED() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_token_type.LLAMA_TOKEN_TYPE_NORMAL = 1;
     * }
     */
    public static int LLAMA_TOKEN_TYPE_NORMAL() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_token_type.LLAMA_TOKEN_TYPE_UNKNOWN = 2;
     * }
     */
    public static int LLAMA_TOKEN_TYPE_UNKNOWN() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_token_type.LLAMA_TOKEN_TYPE_CONTROL = 3;
     * }
     */
    public static int LLAMA_TOKEN_TYPE_CONTROL() {
        return (int)3L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_token_type.LLAMA_TOKEN_TYPE_USER_DEFINED = 4;
     * }
     */
    public static int LLAMA_TOKEN_TYPE_USER_DEFINED() {
        return (int)4L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_token_type.LLAMA_TOKEN_TYPE_UNUSED = 5;
     * }
     */
    public static int LLAMA_TOKEN_TYPE_UNUSED() {
        return (int)5L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_token_type.LLAMA_TOKEN_TYPE_BYTE = 6;
     * }
     */
    public static int LLAMA_TOKEN_TYPE_BYTE() {
        return (int)6L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_token_attr.LLAMA_TOKEN_ATTR_UNDEFINED = 0;
     * }
     */
    public static int LLAMA_TOKEN_ATTR_UNDEFINED() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_token_attr.LLAMA_TOKEN_ATTR_UNKNOWN = 1;
     * }
     */
    public static int LLAMA_TOKEN_ATTR_UNKNOWN() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_token_attr.LLAMA_TOKEN_ATTR_UNUSED = 2;
     * }
     */
    public static int LLAMA_TOKEN_ATTR_UNUSED() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_token_attr.LLAMA_TOKEN_ATTR_NORMAL = 4;
     * }
     */
    public static int LLAMA_TOKEN_ATTR_NORMAL() {
        return (int)4L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_token_attr.LLAMA_TOKEN_ATTR_CONTROL = 8;
     * }
     */
    public static int LLAMA_TOKEN_ATTR_CONTROL() {
        return (int)8L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_token_attr.LLAMA_TOKEN_ATTR_USER_DEFINED = 16;
     * }
     */
    public static int LLAMA_TOKEN_ATTR_USER_DEFINED() {
        return (int)16L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_token_attr.LLAMA_TOKEN_ATTR_BYTE = 32;
     * }
     */
    public static int LLAMA_TOKEN_ATTR_BYTE() {
        return (int)32L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_token_attr.LLAMA_TOKEN_ATTR_NORMALIZED = 64;
     * }
     */
    public static int LLAMA_TOKEN_ATTR_NORMALIZED() {
        return (int)64L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_token_attr.LLAMA_TOKEN_ATTR_LSTRIP = 128;
     * }
     */
    public static int LLAMA_TOKEN_ATTR_LSTRIP() {
        return (int)128L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_token_attr.LLAMA_TOKEN_ATTR_RSTRIP = 256;
     * }
     */
    public static int LLAMA_TOKEN_ATTR_RSTRIP() {
        return (int)256L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_token_attr.LLAMA_TOKEN_ATTR_SINGLE_WORD = 512;
     * }
     */
    public static int LLAMA_TOKEN_ATTR_SINGLE_WORD() {
        return (int)512L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_ALL_F32 = 0;
     * }
     */
    public static int LLAMA_FTYPE_ALL_F32() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_F16 = 1;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_F16() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q4_0 = 2;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q4_0() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q4_1 = 3;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q4_1() {
        return (int)3L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q8_0 = 7;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q8_0() {
        return (int)7L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q5_0 = 8;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q5_0() {
        return (int)8L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q5_1 = 9;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q5_1() {
        return (int)9L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q2_K = 10;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q2_K() {
        return (int)10L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q3_K_S = 11;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q3_K_S() {
        return (int)11L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q3_K_M = 12;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q3_K_M() {
        return (int)12L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q3_K_L = 13;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q3_K_L() {
        return (int)13L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q4_K_S = 14;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q4_K_S() {
        return (int)14L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q4_K_M = 15;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q4_K_M() {
        return (int)15L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q5_K_S = 16;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q5_K_S() {
        return (int)16L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q5_K_M = 17;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q5_K_M() {
        return (int)17L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q6_K = 18;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q6_K() {
        return (int)18L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_IQ2_XXS = 19;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_IQ2_XXS() {
        return (int)19L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_IQ2_XS = 20;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_IQ2_XS() {
        return (int)20L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q2_K_S = 21;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q2_K_S() {
        return (int)21L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_IQ3_XS = 22;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_IQ3_XS() {
        return (int)22L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_IQ3_XXS = 23;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_IQ3_XXS() {
        return (int)23L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_IQ1_S = 24;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_IQ1_S() {
        return (int)24L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_IQ4_NL = 25;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_IQ4_NL() {
        return (int)25L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_IQ3_S = 26;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_IQ3_S() {
        return (int)26L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_IQ3_M = 27;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_IQ3_M() {
        return (int)27L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_IQ2_S = 28;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_IQ2_S() {
        return (int)28L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_IQ2_M = 29;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_IQ2_M() {
        return (int)29L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_IQ4_XS = 30;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_IQ4_XS() {
        return (int)30L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_IQ1_M = 31;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_IQ1_M() {
        return (int)31L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_BF16 = 32;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_BF16() {
        return (int)32L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_TQ1_0 = 36;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_TQ1_0() {
        return (int)36L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_TQ2_0 = 37;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_TQ2_0() {
        return (int)37L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_ftype.LLAMA_FTYPE_GUESSED = 1024;
     * }
     */
    public static int LLAMA_FTYPE_GUESSED() {
        return (int)1024L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_rope_scaling_type.LLAMA_ROPE_SCALING_TYPE_UNSPECIFIED = -1;
     * }
     */
    public static int LLAMA_ROPE_SCALING_TYPE_UNSPECIFIED() {
        return (int)-1L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_rope_scaling_type.LLAMA_ROPE_SCALING_TYPE_NONE = 0;
     * }
     */
    public static int LLAMA_ROPE_SCALING_TYPE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_rope_scaling_type.LLAMA_ROPE_SCALING_TYPE_LINEAR = 1;
     * }
     */
    public static int LLAMA_ROPE_SCALING_TYPE_LINEAR() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_rope_scaling_type.LLAMA_ROPE_SCALING_TYPE_YARN = 2;
     * }
     */
    public static int LLAMA_ROPE_SCALING_TYPE_YARN() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_rope_scaling_type.LLAMA_ROPE_SCALING_TYPE_LONGROPE = 3;
     * }
     */
    public static int LLAMA_ROPE_SCALING_TYPE_LONGROPE() {
        return (int)3L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_rope_scaling_type.LLAMA_ROPE_SCALING_TYPE_MAX_VALUE = 3;
     * }
     */
    public static int LLAMA_ROPE_SCALING_TYPE_MAX_VALUE() {
        return (int)3L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_pooling_type.LLAMA_POOLING_TYPE_UNSPECIFIED = -1;
     * }
     */
    public static int LLAMA_POOLING_TYPE_UNSPECIFIED() {
        return (int)-1L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_pooling_type.LLAMA_POOLING_TYPE_NONE = 0;
     * }
     */
    public static int LLAMA_POOLING_TYPE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_pooling_type.LLAMA_POOLING_TYPE_MEAN = 1;
     * }
     */
    public static int LLAMA_POOLING_TYPE_MEAN() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_pooling_type.LLAMA_POOLING_TYPE_CLS = 2;
     * }
     */
    public static int LLAMA_POOLING_TYPE_CLS() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_pooling_type.LLAMA_POOLING_TYPE_LAST = 3;
     * }
     */
    public static int LLAMA_POOLING_TYPE_LAST() {
        return (int)3L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_pooling_type.LLAMA_POOLING_TYPE_RANK = 4;
     * }
     */
    public static int LLAMA_POOLING_TYPE_RANK() {
        return (int)4L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_attention_type.LLAMA_ATTENTION_TYPE_UNSPECIFIED = -1;
     * }
     */
    public static int LLAMA_ATTENTION_TYPE_UNSPECIFIED() {
        return (int)-1L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_attention_type.LLAMA_ATTENTION_TYPE_CAUSAL = 0;
     * }
     */
    public static int LLAMA_ATTENTION_TYPE_CAUSAL() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_attention_type.LLAMA_ATTENTION_TYPE_NON_CAUSAL = 1;
     * }
     */
    public static int LLAMA_ATTENTION_TYPE_NON_CAUSAL() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_split_mode.LLAMA_SPLIT_MODE_NONE = 0;
     * }
     */
    public static int LLAMA_SPLIT_MODE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_split_mode.LLAMA_SPLIT_MODE_LAYER = 1;
     * }
     */
    public static int LLAMA_SPLIT_MODE_LAYER() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_split_mode.LLAMA_SPLIT_MODE_ROW = 2;
     * }
     */
    public static int LLAMA_SPLIT_MODE_ROW() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_model_kv_override_type.LLAMA_KV_OVERRIDE_TYPE_INT = 0;
     * }
     */
    public static int LLAMA_KV_OVERRIDE_TYPE_INT() {
        return (int)0L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_model_kv_override_type.LLAMA_KV_OVERRIDE_TYPE_FLOAT = 1;
     * }
     */
    public static int LLAMA_KV_OVERRIDE_TYPE_FLOAT() {
        return (int)1L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_model_kv_override_type.LLAMA_KV_OVERRIDE_TYPE_BOOL = 2;
     * }
     */
    public static int LLAMA_KV_OVERRIDE_TYPE_BOOL() {
        return (int)2L;
    }
    /**
     * {@snippet lang=c :
     * enum llama_model_kv_override_type.LLAMA_KV_OVERRIDE_TYPE_STR = 3;
     * }
     */
    public static int LLAMA_KV_OVERRIDE_TYPE_STR() {
        return (int)3L;
    }
    public static MethodHandle llama_model_default_params$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$1,"llama_model_default_params");
    }
    /**
     * {@snippet lang=c :
     * struct llama_model_params llama_model_default_params();
     * }
     */
    public static MemorySegment llama_model_default_params(SegmentAllocator allocator) {
        var mh$ = llama_model_default_params$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_context_default_params$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$3,"llama_context_default_params");
    }
    /**
     * {@snippet lang=c :
     * struct llama_context_params llama_context_default_params();
     * }
     */
    public static MemorySegment llama_context_default_params(SegmentAllocator allocator) {
        var mh$ = llama_context_default_params$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_chain_default_params$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$5,"llama_sampler_chain_default_params");
    }
    /**
     * {@snippet lang=c :
     * struct llama_sampler_chain_params llama_sampler_chain_default_params();
     * }
     */
    public static MemorySegment llama_sampler_chain_default_params(SegmentAllocator allocator) {
        var mh$ = llama_sampler_chain_default_params$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_quantize_default_params$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$1,"llama_model_quantize_default_params");
    }
    /**
     * {@snippet lang=c :
     * struct llama_model_quantize_params llama_model_quantize_default_params();
     * }
     */
    public static MemorySegment llama_model_quantize_default_params(SegmentAllocator allocator) {
        var mh$ = llama_model_quantize_default_params$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_backend_init$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$2,"llama_backend_init");
    }
    /**
     * {@snippet lang=c :
     * void llama_backend_init();
     * }
     */
    public static void llama_backend_init() {
        var mh$ = llama_backend_init$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_backend_free$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$3,"llama_backend_free");
    }
    /**
     * {@snippet lang=c :
     * void llama_backend_free();
     * }
     */
    public static void llama_backend_free() {
        var mh$ = llama_backend_free$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_numa_init$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$4,"llama_numa_init");
    }
    /**
     * {@snippet lang=c :
     * void llama_numa_init(enum ggml_numa_strategy numa);
     * }
     */
    public static void llama_numa_init(int numa) {
        var mh$ = llama_numa_init$MH();
        try {
            mh$.invokeExact(numa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_attach_threadpool$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$5,"llama_attach_threadpool");
    }
    /**
     * {@snippet lang=c :
     * void llama_attach_threadpool(struct llama_context* ctx, struct ggml_threadpool* threadpool, struct ggml_threadpool* threadpool_batch);
     * }
     */
    public static void llama_attach_threadpool(MemorySegment ctx, MemorySegment threadpool, MemorySegment threadpool_batch) {
        var mh$ = llama_attach_threadpool$MH();
        try {
            mh$.invokeExact(ctx, threadpool, threadpool_batch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_detach_threadpool$MH() {
        return RuntimeHelper.requireNonNull(constants$163.const$0,"llama_detach_threadpool");
    }
    /**
     * {@snippet lang=c :
     * void llama_detach_threadpool(struct llama_context* ctx);
     * }
     */
    public static void llama_detach_threadpool(MemorySegment ctx) {
        var mh$ = llama_detach_threadpool$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_load_model_from_file$MH() {
        return RuntimeHelper.requireNonNull(constants$163.const$2,"llama_load_model_from_file");
    }
    /**
     * {@snippet lang=c :
     * struct llama_model* llama_load_model_from_file(char* path_model, struct llama_model_params params);
     * }
     */
    public static MemorySegment llama_load_model_from_file(MemorySegment path_model, MemorySegment params) {
        var mh$ = llama_load_model_from_file$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(path_model, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_load_from_file$MH() {
        return RuntimeHelper.requireNonNull(constants$163.const$3,"llama_model_load_from_file");
    }
    /**
     * {@snippet lang=c :
     * struct llama_model* llama_model_load_from_file(char* path_model, struct llama_model_params params);
     * }
     */
    public static MemorySegment llama_model_load_from_file(MemorySegment path_model, MemorySegment params) {
        var mh$ = llama_model_load_from_file$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(path_model, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_load_from_splits$MH() {
        return RuntimeHelper.requireNonNull(constants$163.const$5,"llama_model_load_from_splits");
    }
    /**
     * {@snippet lang=c :
     * struct llama_model* llama_model_load_from_splits(char** paths, unsigned long n_paths, struct llama_model_params params);
     * }
     */
    public static MemorySegment llama_model_load_from_splits(MemorySegment paths, long n_paths, MemorySegment params) {
        var mh$ = llama_model_load_from_splits$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(paths, n_paths, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_free_model$MH() {
        return RuntimeHelper.requireNonNull(constants$164.const$0,"llama_free_model");
    }
    /**
     * {@snippet lang=c :
     * void llama_free_model(struct llama_model* model);
     * }
     */
    public static void llama_free_model(MemorySegment model) {
        var mh$ = llama_free_model$MH();
        try {
            mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_free$MH() {
        return RuntimeHelper.requireNonNull(constants$164.const$1,"llama_model_free");
    }
    /**
     * {@snippet lang=c :
     * void llama_model_free(struct llama_model* model);
     * }
     */
    public static void llama_model_free(MemorySegment model) {
        var mh$ = llama_model_free$MH();
        try {
            mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_init_from_model$MH() {
        return RuntimeHelper.requireNonNull(constants$164.const$3,"llama_init_from_model");
    }
    /**
     * {@snippet lang=c :
     * struct llama_context* llama_init_from_model(struct llama_model* model, struct llama_context_params params);
     * }
     */
    public static MemorySegment llama_init_from_model(MemorySegment model, MemorySegment params) {
        var mh$ = llama_init_from_model$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(model, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_new_context_with_model$MH() {
        return RuntimeHelper.requireNonNull(constants$164.const$4,"llama_new_context_with_model");
    }
    /**
     * {@snippet lang=c :
     * struct llama_context* llama_new_context_with_model(struct llama_model* model, struct llama_context_params params);
     * }
     */
    public static MemorySegment llama_new_context_with_model(MemorySegment model, MemorySegment params) {
        var mh$ = llama_new_context_with_model$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(model, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_free$MH() {
        return RuntimeHelper.requireNonNull(constants$164.const$5,"llama_free");
    }
    /**
     * {@snippet lang=c :
     * void llama_free(struct llama_context* ctx);
     * }
     */
    public static void llama_free(MemorySegment ctx) {
        var mh$ = llama_free$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_time_us$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$0,"llama_time_us");
    }
    /**
     * {@snippet lang=c :
     * long long llama_time_us();
     * }
     */
    public static long llama_time_us() {
        var mh$ = llama_time_us$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_max_devices$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$1,"llama_max_devices");
    }
    /**
     * {@snippet lang=c :
     * unsigned long llama_max_devices();
     * }
     */
    public static long llama_max_devices() {
        var mh$ = llama_max_devices$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_supports_mmap$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$2,"llama_supports_mmap");
    }
    /**
     * {@snippet lang=c :
     * _Bool llama_supports_mmap();
     * }
     */
    public static boolean llama_supports_mmap() {
        var mh$ = llama_supports_mmap$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_supports_mlock$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$3,"llama_supports_mlock");
    }
    /**
     * {@snippet lang=c :
     * _Bool llama_supports_mlock();
     * }
     */
    public static boolean llama_supports_mlock() {
        var mh$ = llama_supports_mlock$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_supports_gpu_offload$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$4,"llama_supports_gpu_offload");
    }
    /**
     * {@snippet lang=c :
     * _Bool llama_supports_gpu_offload();
     * }
     */
    public static boolean llama_supports_gpu_offload() {
        var mh$ = llama_supports_gpu_offload$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_supports_rpc$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$5,"llama_supports_rpc");
    }
    /**
     * {@snippet lang=c :
     * _Bool llama_supports_rpc();
     * }
     */
    public static boolean llama_supports_rpc() {
        var mh$ = llama_supports_rpc$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_n_ctx$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$0,"llama_n_ctx");
    }
    /**
     * {@snippet lang=c :
     * unsigned int llama_n_ctx(struct llama_context* ctx);
     * }
     */
    public static int llama_n_ctx(MemorySegment ctx) {
        var mh$ = llama_n_ctx$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_n_batch$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$1,"llama_n_batch");
    }
    /**
     * {@snippet lang=c :
     * unsigned int llama_n_batch(struct llama_context* ctx);
     * }
     */
    public static int llama_n_batch(MemorySegment ctx) {
        var mh$ = llama_n_batch$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_n_ubatch$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$2,"llama_n_ubatch");
    }
    /**
     * {@snippet lang=c :
     * unsigned int llama_n_ubatch(struct llama_context* ctx);
     * }
     */
    public static int llama_n_ubatch(MemorySegment ctx) {
        var mh$ = llama_n_ubatch$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_n_seq_max$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$3,"llama_n_seq_max");
    }
    /**
     * {@snippet lang=c :
     * unsigned int llama_n_seq_max(struct llama_context* ctx);
     * }
     */
    public static int llama_n_seq_max(MemorySegment ctx) {
        var mh$ = llama_n_seq_max$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_n_ctx_train$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$4,"llama_n_ctx_train");
    }
    /**
     * {@snippet lang=c :
     * int llama_n_ctx_train(struct llama_model* model);
     * }
     */
    public static int llama_n_ctx_train(MemorySegment model) {
        var mh$ = llama_n_ctx_train$MH();
        try {
            return (int)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_n_embd$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$5,"llama_n_embd");
    }
    /**
     * {@snippet lang=c :
     * int llama_n_embd(struct llama_model* model);
     * }
     */
    public static int llama_n_embd(MemorySegment model) {
        var mh$ = llama_n_embd$MH();
        try {
            return (int)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_n_layer$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$0,"llama_n_layer");
    }
    /**
     * {@snippet lang=c :
     * int llama_n_layer(struct llama_model* model);
     * }
     */
    public static int llama_n_layer(MemorySegment model) {
        var mh$ = llama_n_layer$MH();
        try {
            return (int)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_n_head$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$1,"llama_n_head");
    }
    /**
     * {@snippet lang=c :
     * int llama_n_head(struct llama_model* model);
     * }
     */
    public static int llama_n_head(MemorySegment model) {
        var mh$ = llama_n_head$MH();
        try {
            return (int)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_n_vocab$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$2,"llama_n_vocab");
    }
    /**
     * {@snippet lang=c :
     * int llama_n_vocab(struct llama_vocab* vocab);
     * }
     */
    public static int llama_n_vocab(MemorySegment vocab) {
        var mh$ = llama_n_vocab$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_get_model$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$3,"llama_get_model");
    }
    /**
     * {@snippet lang=c :
     * struct llama_model* llama_get_model(struct llama_context* ctx);
     * }
     */
    public static MemorySegment llama_get_model(MemorySegment ctx) {
        var mh$ = llama_get_model$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_get_kv_self$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$4,"llama_get_kv_self");
    }
    /**
     * {@snippet lang=c :
     * struct llama_kv_cache* llama_get_kv_self(struct llama_context* ctx);
     * }
     */
    public static MemorySegment llama_get_kv_self(MemorySegment ctx) {
        var mh$ = llama_get_kv_self$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_pooling_type$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$5,"llama_pooling_type");
    }
    /**
     * {@snippet lang=c :
     * enum llama_pooling_type llama_pooling_type(struct llama_context* ctx);
     * }
     */
    public static int llama_pooling_type(MemorySegment ctx) {
        var mh$ = llama_pooling_type$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_get_vocab$MH() {
        return RuntimeHelper.requireNonNull(constants$168.const$0,"llama_model_get_vocab");
    }
    /**
     * {@snippet lang=c :
     * struct llama_vocab* llama_model_get_vocab(struct llama_model* model);
     * }
     */
    public static MemorySegment llama_model_get_vocab(MemorySegment model) {
        var mh$ = llama_model_get_vocab$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_rope_type$MH() {
        return RuntimeHelper.requireNonNull(constants$168.const$1,"llama_model_rope_type");
    }
    /**
     * {@snippet lang=c :
     * enum llama_rope_type llama_model_rope_type(struct llama_model* model);
     * }
     */
    public static int llama_model_rope_type(MemorySegment model) {
        var mh$ = llama_model_rope_type$MH();
        try {
            return (int)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_n_ctx_train$MH() {
        return RuntimeHelper.requireNonNull(constants$168.const$2,"llama_model_n_ctx_train");
    }
    /**
     * {@snippet lang=c :
     * int llama_model_n_ctx_train(struct llama_model* model);
     * }
     */
    public static int llama_model_n_ctx_train(MemorySegment model) {
        var mh$ = llama_model_n_ctx_train$MH();
        try {
            return (int)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_n_embd$MH() {
        return RuntimeHelper.requireNonNull(constants$168.const$3,"llama_model_n_embd");
    }
    /**
     * {@snippet lang=c :
     * int llama_model_n_embd(struct llama_model* model);
     * }
     */
    public static int llama_model_n_embd(MemorySegment model) {
        var mh$ = llama_model_n_embd$MH();
        try {
            return (int)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_n_layer$MH() {
        return RuntimeHelper.requireNonNull(constants$168.const$4,"llama_model_n_layer");
    }
    /**
     * {@snippet lang=c :
     * int llama_model_n_layer(struct llama_model* model);
     * }
     */
    public static int llama_model_n_layer(MemorySegment model) {
        var mh$ = llama_model_n_layer$MH();
        try {
            return (int)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_n_head$MH() {
        return RuntimeHelper.requireNonNull(constants$168.const$5,"llama_model_n_head");
    }
    /**
     * {@snippet lang=c :
     * int llama_model_n_head(struct llama_model* model);
     * }
     */
    public static int llama_model_n_head(MemorySegment model) {
        var mh$ = llama_model_n_head$MH();
        try {
            return (int)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_n_head_kv$MH() {
        return RuntimeHelper.requireNonNull(constants$169.const$0,"llama_model_n_head_kv");
    }
    /**
     * {@snippet lang=c :
     * int llama_model_n_head_kv(struct llama_model* model);
     * }
     */
    public static int llama_model_n_head_kv(MemorySegment model) {
        var mh$ = llama_model_n_head_kv$MH();
        try {
            return (int)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_rope_freq_scale_train$MH() {
        return RuntimeHelper.requireNonNull(constants$169.const$2,"llama_model_rope_freq_scale_train");
    }
    /**
     * {@snippet lang=c :
     * float llama_model_rope_freq_scale_train(struct llama_model* model);
     * }
     */
    public static float llama_model_rope_freq_scale_train(MemorySegment model) {
        var mh$ = llama_model_rope_freq_scale_train$MH();
        try {
            return (float)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_type$MH() {
        return RuntimeHelper.requireNonNull(constants$169.const$3,"llama_vocab_type");
    }
    /**
     * {@snippet lang=c :
     * enum llama_vocab_type llama_vocab_type(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_type(MemorySegment vocab) {
        var mh$ = llama_vocab_type$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_n_tokens$MH() {
        return RuntimeHelper.requireNonNull(constants$169.const$4,"llama_vocab_n_tokens");
    }
    /**
     * {@snippet lang=c :
     * int llama_vocab_n_tokens(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_n_tokens(MemorySegment vocab) {
        var mh$ = llama_vocab_n_tokens$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_meta_val_str$MH() {
        return RuntimeHelper.requireNonNull(constants$169.const$6,"llama_model_meta_val_str");
    }
    /**
     * {@snippet lang=c :
     * int llama_model_meta_val_str(struct llama_model* model, char* key, char* buf, unsigned long buf_size);
     * }
     */
    public static int llama_model_meta_val_str(MemorySegment model, MemorySegment key, MemorySegment buf, long buf_size) {
        var mh$ = llama_model_meta_val_str$MH();
        try {
            return (int)mh$.invokeExact(model, key, buf, buf_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_meta_count$MH() {
        return RuntimeHelper.requireNonNull(constants$170.const$0,"llama_model_meta_count");
    }
    /**
     * {@snippet lang=c :
     * int llama_model_meta_count(struct llama_model* model);
     * }
     */
    public static int llama_model_meta_count(MemorySegment model) {
        var mh$ = llama_model_meta_count$MH();
        try {
            return (int)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_meta_key_by_index$MH() {
        return RuntimeHelper.requireNonNull(constants$170.const$2,"llama_model_meta_key_by_index");
    }
    /**
     * {@snippet lang=c :
     * int llama_model_meta_key_by_index(struct llama_model* model, int i, char* buf, unsigned long buf_size);
     * }
     */
    public static int llama_model_meta_key_by_index(MemorySegment model, int i, MemorySegment buf, long buf_size) {
        var mh$ = llama_model_meta_key_by_index$MH();
        try {
            return (int)mh$.invokeExact(model, i, buf, buf_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_meta_val_str_by_index$MH() {
        return RuntimeHelper.requireNonNull(constants$170.const$3,"llama_model_meta_val_str_by_index");
    }
    /**
     * {@snippet lang=c :
     * int llama_model_meta_val_str_by_index(struct llama_model* model, int i, char* buf, unsigned long buf_size);
     * }
     */
    public static int llama_model_meta_val_str_by_index(MemorySegment model, int i, MemorySegment buf, long buf_size) {
        var mh$ = llama_model_meta_val_str_by_index$MH();
        try {
            return (int)mh$.invokeExact(model, i, buf, buf_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_desc$MH() {
        return RuntimeHelper.requireNonNull(constants$170.const$5,"llama_model_desc");
    }
    /**
     * {@snippet lang=c :
     * int llama_model_desc(struct llama_model* model, char* buf, unsigned long buf_size);
     * }
     */
    public static int llama_model_desc(MemorySegment model, MemorySegment buf, long buf_size) {
        var mh$ = llama_model_desc$MH();
        try {
            return (int)mh$.invokeExact(model, buf, buf_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_size$MH() {
        return RuntimeHelper.requireNonNull(constants$171.const$0,"llama_model_size");
    }
    /**
     * {@snippet lang=c :
     * unsigned long long llama_model_size(struct llama_model* model);
     * }
     */
    public static long llama_model_size(MemorySegment model) {
        var mh$ = llama_model_size$MH();
        try {
            return (long)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_chat_template$MH() {
        return RuntimeHelper.requireNonNull(constants$171.const$1,"llama_model_chat_template");
    }
    /**
     * {@snippet lang=c :
     * char* llama_model_chat_template(struct llama_model* model, char* name);
     * }
     */
    public static MemorySegment llama_model_chat_template(MemorySegment model, MemorySegment name) {
        var mh$ = llama_model_chat_template$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(model, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_n_params$MH() {
        return RuntimeHelper.requireNonNull(constants$171.const$2,"llama_model_n_params");
    }
    /**
     * {@snippet lang=c :
     * unsigned long long llama_model_n_params(struct llama_model* model);
     * }
     */
    public static long llama_model_n_params(MemorySegment model) {
        var mh$ = llama_model_n_params$MH();
        try {
            return (long)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_has_encoder$MH() {
        return RuntimeHelper.requireNonNull(constants$171.const$3,"llama_model_has_encoder");
    }
    /**
     * {@snippet lang=c :
     * _Bool llama_model_has_encoder(struct llama_model* model);
     * }
     */
    public static boolean llama_model_has_encoder(MemorySegment model) {
        var mh$ = llama_model_has_encoder$MH();
        try {
            return (boolean)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_has_decoder$MH() {
        return RuntimeHelper.requireNonNull(constants$171.const$4,"llama_model_has_decoder");
    }
    /**
     * {@snippet lang=c :
     * _Bool llama_model_has_decoder(struct llama_model* model);
     * }
     */
    public static boolean llama_model_has_decoder(MemorySegment model) {
        var mh$ = llama_model_has_decoder$MH();
        try {
            return (boolean)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_decoder_start_token$MH() {
        return RuntimeHelper.requireNonNull(constants$171.const$5,"llama_model_decoder_start_token");
    }
    /**
     * {@snippet lang=c :
     * int llama_model_decoder_start_token(struct llama_model* model);
     * }
     */
    public static int llama_model_decoder_start_token(MemorySegment model) {
        var mh$ = llama_model_decoder_start_token$MH();
        try {
            return (int)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_is_recurrent$MH() {
        return RuntimeHelper.requireNonNull(constants$172.const$0,"llama_model_is_recurrent");
    }
    /**
     * {@snippet lang=c :
     * _Bool llama_model_is_recurrent(struct llama_model* model);
     * }
     */
    public static boolean llama_model_is_recurrent(MemorySegment model) {
        var mh$ = llama_model_is_recurrent$MH();
        try {
            return (boolean)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_quantize$MH() {
        return RuntimeHelper.requireNonNull(constants$172.const$1,"llama_model_quantize");
    }
    /**
     * {@snippet lang=c :
     * unsigned int llama_model_quantize(char* fname_inp, char* fname_out, struct llama_model_quantize_params* params);
     * }
     */
    public static int llama_model_quantize(MemorySegment fname_inp, MemorySegment fname_out, MemorySegment params) {
        var mh$ = llama_model_quantize$MH();
        try {
            return (int)mh$.invokeExact(fname_inp, fname_out, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_adapter_lora_init$MH() {
        return RuntimeHelper.requireNonNull(constants$172.const$2,"llama_adapter_lora_init");
    }
    /**
     * {@snippet lang=c :
     * struct llama_adapter_lora* llama_adapter_lora_init(struct llama_model* model, char* path_lora);
     * }
     */
    public static MemorySegment llama_adapter_lora_init(MemorySegment model, MemorySegment path_lora) {
        var mh$ = llama_adapter_lora_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(model, path_lora);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_adapter_lora_free$MH() {
        return RuntimeHelper.requireNonNull(constants$172.const$3,"llama_adapter_lora_free");
    }
    /**
     * {@snippet lang=c :
     * void llama_adapter_lora_free(struct llama_adapter_lora* adapter);
     * }
     */
    public static void llama_adapter_lora_free(MemorySegment adapter) {
        var mh$ = llama_adapter_lora_free$MH();
        try {
            mh$.invokeExact(adapter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_set_adapter_lora$MH() {
        return RuntimeHelper.requireNonNull(constants$172.const$5,"llama_set_adapter_lora");
    }
    /**
     * {@snippet lang=c :
     * int llama_set_adapter_lora(struct llama_context* ctx, struct llama_adapter_lora* adapter, float scale);
     * }
     */
    public static int llama_set_adapter_lora(MemorySegment ctx, MemorySegment adapter, float scale) {
        var mh$ = llama_set_adapter_lora$MH();
        try {
            return (int)mh$.invokeExact(ctx, adapter, scale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_rm_adapter_lora$MH() {
        return RuntimeHelper.requireNonNull(constants$173.const$0,"llama_rm_adapter_lora");
    }
    /**
     * {@snippet lang=c :
     * int llama_rm_adapter_lora(struct llama_context* ctx, struct llama_adapter_lora* adapter);
     * }
     */
    public static int llama_rm_adapter_lora(MemorySegment ctx, MemorySegment adapter) {
        var mh$ = llama_rm_adapter_lora$MH();
        try {
            return (int)mh$.invokeExact(ctx, adapter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_clear_adapter_lora$MH() {
        return RuntimeHelper.requireNonNull(constants$173.const$1,"llama_clear_adapter_lora");
    }
    /**
     * {@snippet lang=c :
     * void llama_clear_adapter_lora(struct llama_context* ctx);
     * }
     */
    public static void llama_clear_adapter_lora(MemorySegment ctx) {
        var mh$ = llama_clear_adapter_lora$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_apply_adapter_cvec$MH() {
        return RuntimeHelper.requireNonNull(constants$173.const$3,"llama_apply_adapter_cvec");
    }
    /**
     * {@snippet lang=c :
     * int llama_apply_adapter_cvec(struct llama_context* ctx, float* data, unsigned long len, int n_embd, int il_start, int il_end);
     * }
     */
    public static int llama_apply_adapter_cvec(MemorySegment ctx, MemorySegment data, long len, int n_embd, int il_start, int il_end) {
        var mh$ = llama_apply_adapter_cvec$MH();
        try {
            return (int)mh$.invokeExact(ctx, data, len, n_embd, il_start, il_end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_cache_view_init$MH() {
        return RuntimeHelper.requireNonNull(constants$175.const$4,"llama_kv_cache_view_init");
    }
    /**
     * {@snippet lang=c :
     * struct llama_kv_cache_view llama_kv_cache_view_init(struct llama_context* ctx, int n_seq_max);
     * }
     */
    public static MemorySegment llama_kv_cache_view_init(SegmentAllocator allocator, MemorySegment ctx, int n_seq_max) {
        var mh$ = llama_kv_cache_view_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, n_seq_max);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_cache_view_free$MH() {
        return RuntimeHelper.requireNonNull(constants$175.const$5,"llama_kv_cache_view_free");
    }
    /**
     * {@snippet lang=c :
     * void llama_kv_cache_view_free(struct llama_kv_cache_view* view);
     * }
     */
    public static void llama_kv_cache_view_free(MemorySegment view) {
        var mh$ = llama_kv_cache_view_free$MH();
        try {
            mh$.invokeExact(view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_cache_view_update$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$0,"llama_kv_cache_view_update");
    }
    /**
     * {@snippet lang=c :
     * void llama_kv_cache_view_update(struct llama_context* ctx, struct llama_kv_cache_view* view);
     * }
     */
    public static void llama_kv_cache_view_update(MemorySegment ctx, MemorySegment view) {
        var mh$ = llama_kv_cache_view_update$MH();
        try {
            mh$.invokeExact(ctx, view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_self_n_tokens$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$1,"llama_kv_self_n_tokens");
    }
    /**
     * {@snippet lang=c :
     * int llama_kv_self_n_tokens(struct llama_context* ctx);
     * }
     */
    public static int llama_kv_self_n_tokens(MemorySegment ctx) {
        var mh$ = llama_kv_self_n_tokens$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_get_kv_cache_token_count$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$2,"llama_get_kv_cache_token_count");
    }
    /**
     * {@snippet lang=c :
     * int llama_get_kv_cache_token_count(struct llama_context* ctx);
     * }
     */
    public static int llama_get_kv_cache_token_count(MemorySegment ctx) {
        var mh$ = llama_get_kv_cache_token_count$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_self_used_cells$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$3,"llama_kv_self_used_cells");
    }
    /**
     * {@snippet lang=c :
     * int llama_kv_self_used_cells(struct llama_context* ctx);
     * }
     */
    public static int llama_kv_self_used_cells(MemorySegment ctx) {
        var mh$ = llama_kv_self_used_cells$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_get_kv_cache_used_cells$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$4,"llama_get_kv_cache_used_cells");
    }
    /**
     * {@snippet lang=c :
     * int llama_get_kv_cache_used_cells(struct llama_context* ctx);
     * }
     */
    public static int llama_get_kv_cache_used_cells(MemorySegment ctx) {
        var mh$ = llama_get_kv_cache_used_cells$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_self_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$5,"llama_kv_self_clear");
    }
    /**
     * {@snippet lang=c :
     * void llama_kv_self_clear(struct llama_context* ctx);
     * }
     */
    public static void llama_kv_self_clear(MemorySegment ctx) {
        var mh$ = llama_kv_self_clear$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_self_seq_rm$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$1,"llama_kv_self_seq_rm");
    }
    /**
     * {@snippet lang=c :
     * _Bool llama_kv_self_seq_rm(struct llama_context* ctx, int seq_id, int p0, int p1);
     * }
     */
    public static boolean llama_kv_self_seq_rm(MemorySegment ctx, int seq_id, int p0, int p1) {
        var mh$ = llama_kv_self_seq_rm$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, seq_id, p0, p1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_self_seq_cp$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$3,"llama_kv_self_seq_cp");
    }
    /**
     * {@snippet lang=c :
     * void llama_kv_self_seq_cp(struct llama_context* ctx, int seq_id_src, int seq_id_dst, int p0, int p1);
     * }
     */
    public static void llama_kv_self_seq_cp(MemorySegment ctx, int seq_id_src, int seq_id_dst, int p0, int p1) {
        var mh$ = llama_kv_self_seq_cp$MH();
        try {
            mh$.invokeExact(ctx, seq_id_src, seq_id_dst, p0, p1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_self_seq_keep$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$4,"llama_kv_self_seq_keep");
    }
    /**
     * {@snippet lang=c :
     * void llama_kv_self_seq_keep(struct llama_context* ctx, int seq_id);
     * }
     */
    public static void llama_kv_self_seq_keep(MemorySegment ctx, int seq_id) {
        var mh$ = llama_kv_self_seq_keep$MH();
        try {
            mh$.invokeExact(ctx, seq_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_self_seq_add$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$5,"llama_kv_self_seq_add");
    }
    /**
     * {@snippet lang=c :
     * void llama_kv_self_seq_add(struct llama_context* ctx, int seq_id, int p0, int p1, int delta);
     * }
     */
    public static void llama_kv_self_seq_add(MemorySegment ctx, int seq_id, int p0, int p1, int delta) {
        var mh$ = llama_kv_self_seq_add$MH();
        try {
            mh$.invokeExact(ctx, seq_id, p0, p1, delta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_self_seq_div$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$0,"llama_kv_self_seq_div");
    }
    /**
     * {@snippet lang=c :
     * void llama_kv_self_seq_div(struct llama_context* ctx, int seq_id, int p0, int p1, int d);
     * }
     */
    public static void llama_kv_self_seq_div(MemorySegment ctx, int seq_id, int p0, int p1, int d) {
        var mh$ = llama_kv_self_seq_div$MH();
        try {
            mh$.invokeExact(ctx, seq_id, p0, p1, d);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_self_seq_pos_max$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$1,"llama_kv_self_seq_pos_max");
    }
    /**
     * {@snippet lang=c :
     * int llama_kv_self_seq_pos_max(struct llama_context* ctx, int seq_id);
     * }
     */
    public static int llama_kv_self_seq_pos_max(MemorySegment ctx, int seq_id) {
        var mh$ = llama_kv_self_seq_pos_max$MH();
        try {
            return (int)mh$.invokeExact(ctx, seq_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_self_defrag$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$2,"llama_kv_self_defrag");
    }
    /**
     * {@snippet lang=c :
     * void llama_kv_self_defrag(struct llama_context* ctx);
     * }
     */
    public static void llama_kv_self_defrag(MemorySegment ctx) {
        var mh$ = llama_kv_self_defrag$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_self_can_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$3,"llama_kv_self_can_shift");
    }
    /**
     * {@snippet lang=c :
     * _Bool llama_kv_self_can_shift(struct llama_context* ctx);
     * }
     */
    public static boolean llama_kv_self_can_shift(MemorySegment ctx) {
        var mh$ = llama_kv_self_can_shift$MH();
        try {
            return (boolean)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_self_update$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$4,"llama_kv_self_update");
    }
    /**
     * {@snippet lang=c :
     * void llama_kv_self_update(struct llama_context* ctx);
     * }
     */
    public static void llama_kv_self_update(MemorySegment ctx) {
        var mh$ = llama_kv_self_update$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_cache_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$5,"llama_kv_cache_clear");
    }
    /**
     * {@snippet lang=c :
     * void llama_kv_cache_clear(struct llama_context* ctx);
     * }
     */
    public static void llama_kv_cache_clear(MemorySegment ctx) {
        var mh$ = llama_kv_cache_clear$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_cache_seq_rm$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$0,"llama_kv_cache_seq_rm");
    }
    /**
     * {@snippet lang=c :
     * _Bool llama_kv_cache_seq_rm(struct llama_context* ctx, int seq_id, int p0, int p1);
     * }
     */
    public static boolean llama_kv_cache_seq_rm(MemorySegment ctx, int seq_id, int p0, int p1) {
        var mh$ = llama_kv_cache_seq_rm$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, seq_id, p0, p1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_cache_seq_cp$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$1,"llama_kv_cache_seq_cp");
    }
    /**
     * {@snippet lang=c :
     * void llama_kv_cache_seq_cp(struct llama_context* ctx, int seq_id_src, int seq_id_dst, int p0, int p1);
     * }
     */
    public static void llama_kv_cache_seq_cp(MemorySegment ctx, int seq_id_src, int seq_id_dst, int p0, int p1) {
        var mh$ = llama_kv_cache_seq_cp$MH();
        try {
            mh$.invokeExact(ctx, seq_id_src, seq_id_dst, p0, p1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_cache_seq_keep$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$2,"llama_kv_cache_seq_keep");
    }
    /**
     * {@snippet lang=c :
     * void llama_kv_cache_seq_keep(struct llama_context* ctx, int seq_id);
     * }
     */
    public static void llama_kv_cache_seq_keep(MemorySegment ctx, int seq_id) {
        var mh$ = llama_kv_cache_seq_keep$MH();
        try {
            mh$.invokeExact(ctx, seq_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_cache_seq_add$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$3,"llama_kv_cache_seq_add");
    }
    /**
     * {@snippet lang=c :
     * void llama_kv_cache_seq_add(struct llama_context* ctx, int seq_id, int p0, int p1, int delta);
     * }
     */
    public static void llama_kv_cache_seq_add(MemorySegment ctx, int seq_id, int p0, int p1, int delta) {
        var mh$ = llama_kv_cache_seq_add$MH();
        try {
            mh$.invokeExact(ctx, seq_id, p0, p1, delta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_cache_seq_div$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$4,"llama_kv_cache_seq_div");
    }
    /**
     * {@snippet lang=c :
     * void llama_kv_cache_seq_div(struct llama_context* ctx, int seq_id, int p0, int p1, int d);
     * }
     */
    public static void llama_kv_cache_seq_div(MemorySegment ctx, int seq_id, int p0, int p1, int d) {
        var mh$ = llama_kv_cache_seq_div$MH();
        try {
            mh$.invokeExact(ctx, seq_id, p0, p1, d);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_cache_seq_pos_max$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$5,"llama_kv_cache_seq_pos_max");
    }
    /**
     * {@snippet lang=c :
     * int llama_kv_cache_seq_pos_max(struct llama_context* ctx, int seq_id);
     * }
     */
    public static int llama_kv_cache_seq_pos_max(MemorySegment ctx, int seq_id) {
        var mh$ = llama_kv_cache_seq_pos_max$MH();
        try {
            return (int)mh$.invokeExact(ctx, seq_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_cache_defrag$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$0,"llama_kv_cache_defrag");
    }
    /**
     * {@snippet lang=c :
     * void llama_kv_cache_defrag(struct llama_context* ctx);
     * }
     */
    public static void llama_kv_cache_defrag(MemorySegment ctx) {
        var mh$ = llama_kv_cache_defrag$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_cache_can_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$1,"llama_kv_cache_can_shift");
    }
    /**
     * {@snippet lang=c :
     * _Bool llama_kv_cache_can_shift(struct llama_context* ctx);
     * }
     */
    public static boolean llama_kv_cache_can_shift(MemorySegment ctx) {
        var mh$ = llama_kv_cache_can_shift$MH();
        try {
            return (boolean)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_cache_update$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$2,"llama_kv_cache_update");
    }
    /**
     * {@snippet lang=c :
     * void llama_kv_cache_update(struct llama_context* ctx);
     * }
     */
    public static void llama_kv_cache_update(MemorySegment ctx) {
        var mh$ = llama_kv_cache_update$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_state_get_size$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$3,"llama_state_get_size");
    }
    /**
     * {@snippet lang=c :
     * unsigned long llama_state_get_size(struct llama_context* ctx);
     * }
     */
    public static long llama_state_get_size(MemorySegment ctx) {
        var mh$ = llama_state_get_size$MH();
        try {
            return (long)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_get_state_size$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$4,"llama_get_state_size");
    }
    /**
     * {@snippet lang=c :
     * unsigned long llama_get_state_size(struct llama_context* ctx);
     * }
     */
    public static long llama_get_state_size(MemorySegment ctx) {
        var mh$ = llama_get_state_size$MH();
        try {
            return (long)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_state_get_data$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$6,"llama_state_get_data");
    }
    /**
     * {@snippet lang=c :
     * unsigned long llama_state_get_data(struct llama_context* ctx, unsigned char* dst, unsigned long size);
     * }
     */
    public static long llama_state_get_data(MemorySegment ctx, MemorySegment dst, long size) {
        var mh$ = llama_state_get_data$MH();
        try {
            return (long)mh$.invokeExact(ctx, dst, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_copy_state_data$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$0,"llama_copy_state_data");
    }
    /**
     * {@snippet lang=c :
     * unsigned long llama_copy_state_data(struct llama_context* ctx, unsigned char* dst);
     * }
     */
    public static long llama_copy_state_data(MemorySegment ctx, MemorySegment dst) {
        var mh$ = llama_copy_state_data$MH();
        try {
            return (long)mh$.invokeExact(ctx, dst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_state_set_data$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$1,"llama_state_set_data");
    }
    /**
     * {@snippet lang=c :
     * unsigned long llama_state_set_data(struct llama_context* ctx, unsigned char* src, unsigned long size);
     * }
     */
    public static long llama_state_set_data(MemorySegment ctx, MemorySegment src, long size) {
        var mh$ = llama_state_set_data$MH();
        try {
            return (long)mh$.invokeExact(ctx, src, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_set_state_data$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$2,"llama_set_state_data");
    }
    /**
     * {@snippet lang=c :
     * unsigned long llama_set_state_data(struct llama_context* ctx, unsigned char* src);
     * }
     */
    public static long llama_set_state_data(MemorySegment ctx, MemorySegment src) {
        var mh$ = llama_set_state_data$MH();
        try {
            return (long)mh$.invokeExact(ctx, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_state_load_file$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$4,"llama_state_load_file");
    }
    /**
     * {@snippet lang=c :
     * _Bool llama_state_load_file(struct llama_context* ctx, char* path_session, int* tokens_out, unsigned long n_token_capacity, unsigned long* n_token_count_out);
     * }
     */
    public static boolean llama_state_load_file(MemorySegment ctx, MemorySegment path_session, MemorySegment tokens_out, long n_token_capacity, MemorySegment n_token_count_out) {
        var mh$ = llama_state_load_file$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, path_session, tokens_out, n_token_capacity, n_token_count_out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_load_session_file$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$5,"llama_load_session_file");
    }
    /**
     * {@snippet lang=c :
     * _Bool llama_load_session_file(struct llama_context* ctx, char* path_session, int* tokens_out, unsigned long n_token_capacity, unsigned long* n_token_count_out);
     * }
     */
    public static boolean llama_load_session_file(MemorySegment ctx, MemorySegment path_session, MemorySegment tokens_out, long n_token_capacity, MemorySegment n_token_count_out) {
        var mh$ = llama_load_session_file$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, path_session, tokens_out, n_token_capacity, n_token_count_out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_state_save_file$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$1,"llama_state_save_file");
    }
    /**
     * {@snippet lang=c :
     * _Bool llama_state_save_file(struct llama_context* ctx, char* path_session, int* tokens, unsigned long n_token_count);
     * }
     */
    public static boolean llama_state_save_file(MemorySegment ctx, MemorySegment path_session, MemorySegment tokens, long n_token_count) {
        var mh$ = llama_state_save_file$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, path_session, tokens, n_token_count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_save_session_file$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$2,"llama_save_session_file");
    }
    /**
     * {@snippet lang=c :
     * _Bool llama_save_session_file(struct llama_context* ctx, char* path_session, int* tokens, unsigned long n_token_count);
     * }
     */
    public static boolean llama_save_session_file(MemorySegment ctx, MemorySegment path_session, MemorySegment tokens, long n_token_count) {
        var mh$ = llama_save_session_file$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, path_session, tokens, n_token_count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_state_seq_get_size$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$3,"llama_state_seq_get_size");
    }
    /**
     * {@snippet lang=c :
     * unsigned long llama_state_seq_get_size(struct llama_context* ctx, int seq_id);
     * }
     */
    public static long llama_state_seq_get_size(MemorySegment ctx, int seq_id) {
        var mh$ = llama_state_seq_get_size$MH();
        try {
            return (long)mh$.invokeExact(ctx, seq_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_state_seq_get_data$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$5,"llama_state_seq_get_data");
    }
    /**
     * {@snippet lang=c :
     * unsigned long llama_state_seq_get_data(struct llama_context* ctx, unsigned char* dst, unsigned long size, int seq_id);
     * }
     */
    public static long llama_state_seq_get_data(MemorySegment ctx, MemorySegment dst, long size, int seq_id) {
        var mh$ = llama_state_seq_get_data$MH();
        try {
            return (long)mh$.invokeExact(ctx, dst, size, seq_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_state_seq_set_data$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$0,"llama_state_seq_set_data");
    }
    /**
     * {@snippet lang=c :
     * unsigned long llama_state_seq_set_data(struct llama_context* ctx, unsigned char* src, unsigned long size, int dest_seq_id);
     * }
     */
    public static long llama_state_seq_set_data(MemorySegment ctx, MemorySegment src, long size, int dest_seq_id) {
        var mh$ = llama_state_seq_set_data$MH();
        try {
            return (long)mh$.invokeExact(ctx, src, size, dest_seq_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_state_seq_save_file$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$2,"llama_state_seq_save_file");
    }
    /**
     * {@snippet lang=c :
     * unsigned long llama_state_seq_save_file(struct llama_context* ctx, char* filepath, int seq_id, int* tokens, unsigned long n_token_count);
     * }
     */
    public static long llama_state_seq_save_file(MemorySegment ctx, MemorySegment filepath, int seq_id, MemorySegment tokens, long n_token_count) {
        var mh$ = llama_state_seq_save_file$MH();
        try {
            return (long)mh$.invokeExact(ctx, filepath, seq_id, tokens, n_token_count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_state_seq_load_file$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$4,"llama_state_seq_load_file");
    }
    /**
     * {@snippet lang=c :
     * unsigned long llama_state_seq_load_file(struct llama_context* ctx, char* filepath, int dest_seq_id, int* tokens_out, unsigned long n_token_capacity, unsigned long* n_token_count_out);
     * }
     */
    public static long llama_state_seq_load_file(MemorySegment ctx, MemorySegment filepath, int dest_seq_id, MemorySegment tokens_out, long n_token_capacity, MemorySegment n_token_count_out) {
        var mh$ = llama_state_seq_load_file$MH();
        try {
            return (long)mh$.invokeExact(ctx, filepath, dest_seq_id, tokens_out, n_token_capacity, n_token_count_out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_batch_get_one$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$6,"llama_batch_get_one");
    }
    /**
     * {@snippet lang=c :
     * struct llama_batch llama_batch_get_one(int* tokens, int n_tokens);
     * }
     */
    public static MemorySegment llama_batch_get_one(SegmentAllocator allocator, MemorySegment tokens, int n_tokens) {
        var mh$ = llama_batch_get_one$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, tokens, n_tokens);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_batch_init$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$1,"llama_batch_init");
    }
    /**
     * {@snippet lang=c :
     * struct llama_batch llama_batch_init(int n_tokens, int embd, int n_seq_max);
     * }
     */
    public static MemorySegment llama_batch_init(SegmentAllocator allocator, int n_tokens, int embd, int n_seq_max) {
        var mh$ = llama_batch_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, n_tokens, embd, n_seq_max);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_batch_free$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$3,"llama_batch_free");
    }
    /**
     * {@snippet lang=c :
     * void llama_batch_free(struct llama_batch batch);
     * }
     */
    public static void llama_batch_free(MemorySegment batch) {
        var mh$ = llama_batch_free$MH();
        try {
            mh$.invokeExact(batch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_encode$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$5,"llama_encode");
    }
    /**
     * {@snippet lang=c :
     * int llama_encode(struct llama_context* ctx, struct llama_batch batch);
     * }
     */
    public static int llama_encode(MemorySegment ctx, MemorySegment batch) {
        var mh$ = llama_encode$MH();
        try {
            return (int)mh$.invokeExact(ctx, batch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_decode$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$0,"llama_decode");
    }
    /**
     * {@snippet lang=c :
     * int llama_decode(struct llama_context* ctx, struct llama_batch batch);
     * }
     */
    public static int llama_decode(MemorySegment ctx, MemorySegment batch) {
        var mh$ = llama_decode$MH();
        try {
            return (int)mh$.invokeExact(ctx, batch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_set_n_threads$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$1,"llama_set_n_threads");
    }
    /**
     * {@snippet lang=c :
     * void llama_set_n_threads(struct llama_context* ctx, int n_threads, int n_threads_batch);
     * }
     */
    public static void llama_set_n_threads(MemorySegment ctx, int n_threads, int n_threads_batch) {
        var mh$ = llama_set_n_threads$MH();
        try {
            mh$.invokeExact(ctx, n_threads, n_threads_batch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_n_threads$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$2,"llama_n_threads");
    }
    /**
     * {@snippet lang=c :
     * int llama_n_threads(struct llama_context* ctx);
     * }
     */
    public static int llama_n_threads(MemorySegment ctx) {
        var mh$ = llama_n_threads$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_n_threads_batch$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$3,"llama_n_threads_batch");
    }
    /**
     * {@snippet lang=c :
     * int llama_n_threads_batch(struct llama_context* ctx);
     * }
     */
    public static int llama_n_threads_batch(MemorySegment ctx) {
        var mh$ = llama_n_threads_batch$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_set_embeddings$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$4,"llama_set_embeddings");
    }
    /**
     * {@snippet lang=c :
     * void llama_set_embeddings(struct llama_context* ctx, _Bool embeddings);
     * }
     */
    public static void llama_set_embeddings(MemorySegment ctx, boolean embeddings) {
        var mh$ = llama_set_embeddings$MH();
        try {
            mh$.invokeExact(ctx, embeddings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_set_causal_attn$MH() {
        return RuntimeHelper.requireNonNull(constants$185.const$5,"llama_set_causal_attn");
    }
    /**
     * {@snippet lang=c :
     * void llama_set_causal_attn(struct llama_context* ctx, _Bool causal_attn);
     * }
     */
    public static void llama_set_causal_attn(MemorySegment ctx, boolean causal_attn) {
        var mh$ = llama_set_causal_attn$MH();
        try {
            mh$.invokeExact(ctx, causal_attn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_set_warmup$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$0,"llama_set_warmup");
    }
    /**
     * {@snippet lang=c :
     * void llama_set_warmup(struct llama_context* ctx, _Bool warmup);
     * }
     */
    public static void llama_set_warmup(MemorySegment ctx, boolean warmup) {
        var mh$ = llama_set_warmup$MH();
        try {
            mh$.invokeExact(ctx, warmup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_set_abort_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$2,"llama_set_abort_callback");
    }
    /**
     * {@snippet lang=c :
     * void llama_set_abort_callback(struct llama_context* ctx, _Bool (*abort_callback)(void*), void* abort_callback_data);
     * }
     */
    public static void llama_set_abort_callback(MemorySegment ctx, MemorySegment abort_callback, MemorySegment abort_callback_data) {
        var mh$ = llama_set_abort_callback$MH();
        try {
            mh$.invokeExact(ctx, abort_callback, abort_callback_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_synchronize$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$3,"llama_synchronize");
    }
    /**
     * {@snippet lang=c :
     * void llama_synchronize(struct llama_context* ctx);
     * }
     */
    public static void llama_synchronize(MemorySegment ctx) {
        var mh$ = llama_synchronize$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_get_logits$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$4,"llama_get_logits");
    }
    /**
     * {@snippet lang=c :
     * float* llama_get_logits(struct llama_context* ctx);
     * }
     */
    public static MemorySegment llama_get_logits(MemorySegment ctx) {
        var mh$ = llama_get_logits$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_get_logits_ith$MH() {
        return RuntimeHelper.requireNonNull(constants$186.const$5,"llama_get_logits_ith");
    }
    /**
     * {@snippet lang=c :
     * float* llama_get_logits_ith(struct llama_context* ctx, int i);
     * }
     */
    public static MemorySegment llama_get_logits_ith(MemorySegment ctx, int i) {
        var mh$ = llama_get_logits_ith$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_get_embeddings$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$0,"llama_get_embeddings");
    }
    /**
     * {@snippet lang=c :
     * float* llama_get_embeddings(struct llama_context* ctx);
     * }
     */
    public static MemorySegment llama_get_embeddings(MemorySegment ctx) {
        var mh$ = llama_get_embeddings$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_get_embeddings_ith$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$1,"llama_get_embeddings_ith");
    }
    /**
     * {@snippet lang=c :
     * float* llama_get_embeddings_ith(struct llama_context* ctx, int i);
     * }
     */
    public static MemorySegment llama_get_embeddings_ith(MemorySegment ctx, int i) {
        var mh$ = llama_get_embeddings_ith$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_get_embeddings_seq$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$2,"llama_get_embeddings_seq");
    }
    /**
     * {@snippet lang=c :
     * float* llama_get_embeddings_seq(struct llama_context* ctx, int seq_id);
     * }
     */
    public static MemorySegment llama_get_embeddings_seq(MemorySegment ctx, int seq_id) {
        var mh$ = llama_get_embeddings_seq$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, seq_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_get_text$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$3,"llama_vocab_get_text");
    }
    /**
     * {@snippet lang=c :
     * char* llama_vocab_get_text(struct llama_vocab* vocab, int token);
     * }
     */
    public static MemorySegment llama_vocab_get_text(MemorySegment vocab, int token) {
        var mh$ = llama_vocab_get_text$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(vocab, token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_get_score$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$4,"llama_vocab_get_score");
    }
    /**
     * {@snippet lang=c :
     * float llama_vocab_get_score(struct llama_vocab* vocab, int token);
     * }
     */
    public static float llama_vocab_get_score(MemorySegment vocab, int token) {
        var mh$ = llama_vocab_get_score$MH();
        try {
            return (float)mh$.invokeExact(vocab, token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_get_attr$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$5,"llama_vocab_get_attr");
    }
    /**
     * {@snippet lang=c :
     * enum llama_token_attr llama_vocab_get_attr(struct llama_vocab* vocab, int token);
     * }
     */
    public static int llama_vocab_get_attr(MemorySegment vocab, int token) {
        var mh$ = llama_vocab_get_attr$MH();
        try {
            return (int)mh$.invokeExact(vocab, token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_is_eog$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$1,"llama_vocab_is_eog");
    }
    /**
     * {@snippet lang=c :
     * _Bool llama_vocab_is_eog(struct llama_vocab* vocab, int token);
     * }
     */
    public static boolean llama_vocab_is_eog(MemorySegment vocab, int token) {
        var mh$ = llama_vocab_is_eog$MH();
        try {
            return (boolean)mh$.invokeExact(vocab, token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_is_control$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$2,"llama_vocab_is_control");
    }
    /**
     * {@snippet lang=c :
     * _Bool llama_vocab_is_control(struct llama_vocab* vocab, int token);
     * }
     */
    public static boolean llama_vocab_is_control(MemorySegment vocab, int token) {
        var mh$ = llama_vocab_is_control$MH();
        try {
            return (boolean)mh$.invokeExact(vocab, token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_bos$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$3,"llama_vocab_bos");
    }
    /**
     * {@snippet lang=c :
     * int llama_vocab_bos(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_bos(MemorySegment vocab) {
        var mh$ = llama_vocab_bos$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_eos$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$4,"llama_vocab_eos");
    }
    /**
     * {@snippet lang=c :
     * int llama_vocab_eos(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_eos(MemorySegment vocab) {
        var mh$ = llama_vocab_eos$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_eot$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$5,"llama_vocab_eot");
    }
    /**
     * {@snippet lang=c :
     * int llama_vocab_eot(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_eot(MemorySegment vocab) {
        var mh$ = llama_vocab_eot$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_sep$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$0,"llama_vocab_sep");
    }
    /**
     * {@snippet lang=c :
     * int llama_vocab_sep(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_sep(MemorySegment vocab) {
        var mh$ = llama_vocab_sep$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_nl$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$1,"llama_vocab_nl");
    }
    /**
     * {@snippet lang=c :
     * int llama_vocab_nl(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_nl(MemorySegment vocab) {
        var mh$ = llama_vocab_nl$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_pad$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$2,"llama_vocab_pad");
    }
    /**
     * {@snippet lang=c :
     * int llama_vocab_pad(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_pad(MemorySegment vocab) {
        var mh$ = llama_vocab_pad$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_get_add_bos$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$3,"llama_vocab_get_add_bos");
    }
    /**
     * {@snippet lang=c :
     * _Bool llama_vocab_get_add_bos(struct llama_vocab* vocab);
     * }
     */
    public static boolean llama_vocab_get_add_bos(MemorySegment vocab) {
        var mh$ = llama_vocab_get_add_bos$MH();
        try {
            return (boolean)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_get_add_eos$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$4,"llama_vocab_get_add_eos");
    }
    /**
     * {@snippet lang=c :
     * _Bool llama_vocab_get_add_eos(struct llama_vocab* vocab);
     * }
     */
    public static boolean llama_vocab_get_add_eos(MemorySegment vocab) {
        var mh$ = llama_vocab_get_add_eos$MH();
        try {
            return (boolean)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_fim_pre$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$5,"llama_vocab_fim_pre");
    }
    /**
     * {@snippet lang=c :
     * int llama_vocab_fim_pre(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_fim_pre(MemorySegment vocab) {
        var mh$ = llama_vocab_fim_pre$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_fim_suf$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$0,"llama_vocab_fim_suf");
    }
    /**
     * {@snippet lang=c :
     * int llama_vocab_fim_suf(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_fim_suf(MemorySegment vocab) {
        var mh$ = llama_vocab_fim_suf$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_fim_mid$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$1,"llama_vocab_fim_mid");
    }
    /**
     * {@snippet lang=c :
     * int llama_vocab_fim_mid(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_fim_mid(MemorySegment vocab) {
        var mh$ = llama_vocab_fim_mid$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_fim_pad$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$2,"llama_vocab_fim_pad");
    }
    /**
     * {@snippet lang=c :
     * int llama_vocab_fim_pad(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_fim_pad(MemorySegment vocab) {
        var mh$ = llama_vocab_fim_pad$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_fim_rep$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$3,"llama_vocab_fim_rep");
    }
    /**
     * {@snippet lang=c :
     * int llama_vocab_fim_rep(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_fim_rep(MemorySegment vocab) {
        var mh$ = llama_vocab_fim_rep$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_fim_sep$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$4,"llama_vocab_fim_sep");
    }
    /**
     * {@snippet lang=c :
     * int llama_vocab_fim_sep(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_fim_sep(MemorySegment vocab) {
        var mh$ = llama_vocab_fim_sep$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_get_text$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$5,"llama_token_get_text");
    }
    /**
     * {@snippet lang=c :
     * char* llama_token_get_text(struct llama_vocab* vocab, int token);
     * }
     */
    public static MemorySegment llama_token_get_text(MemorySegment vocab, int token) {
        var mh$ = llama_token_get_text$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(vocab, token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_get_score$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$0,"llama_token_get_score");
    }
    /**
     * {@snippet lang=c :
     * float llama_token_get_score(struct llama_vocab* vocab, int token);
     * }
     */
    public static float llama_token_get_score(MemorySegment vocab, int token) {
        var mh$ = llama_token_get_score$MH();
        try {
            return (float)mh$.invokeExact(vocab, token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_get_attr$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$1,"llama_token_get_attr");
    }
    /**
     * {@snippet lang=c :
     * enum llama_token_attr llama_token_get_attr(struct llama_vocab* vocab, int token);
     * }
     */
    public static int llama_token_get_attr(MemorySegment vocab, int token) {
        var mh$ = llama_token_get_attr$MH();
        try {
            return (int)mh$.invokeExact(vocab, token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_is_eog$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$2,"llama_token_is_eog");
    }
    /**
     * {@snippet lang=c :
     * _Bool llama_token_is_eog(struct llama_vocab* vocab, int token);
     * }
     */
    public static boolean llama_token_is_eog(MemorySegment vocab, int token) {
        var mh$ = llama_token_is_eog$MH();
        try {
            return (boolean)mh$.invokeExact(vocab, token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_is_control$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$3,"llama_token_is_control");
    }
    /**
     * {@snippet lang=c :
     * _Bool llama_token_is_control(struct llama_vocab* vocab, int token);
     * }
     */
    public static boolean llama_token_is_control(MemorySegment vocab, int token) {
        var mh$ = llama_token_is_control$MH();
        try {
            return (boolean)mh$.invokeExact(vocab, token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_bos$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$4,"llama_token_bos");
    }
    /**
     * {@snippet lang=c :
     * int llama_token_bos(struct llama_vocab* vocab);
     * }
     */
    public static int llama_token_bos(MemorySegment vocab) {
        var mh$ = llama_token_bos$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_eos$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$5,"llama_token_eos");
    }
    /**
     * {@snippet lang=c :
     * int llama_token_eos(struct llama_vocab* vocab);
     * }
     */
    public static int llama_token_eos(MemorySegment vocab) {
        var mh$ = llama_token_eos$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_eot$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$0,"llama_token_eot");
    }
    /**
     * {@snippet lang=c :
     * int llama_token_eot(struct llama_vocab* vocab);
     * }
     */
    public static int llama_token_eot(MemorySegment vocab) {
        var mh$ = llama_token_eot$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_cls$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$1,"llama_token_cls");
    }
    /**
     * {@snippet lang=c :
     * int llama_token_cls(struct llama_vocab* vocab);
     * }
     */
    public static int llama_token_cls(MemorySegment vocab) {
        var mh$ = llama_token_cls$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_sep$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$2,"llama_token_sep");
    }
    /**
     * {@snippet lang=c :
     * int llama_token_sep(struct llama_vocab* vocab);
     * }
     */
    public static int llama_token_sep(MemorySegment vocab) {
        var mh$ = llama_token_sep$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_nl$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$3,"llama_token_nl");
    }
    /**
     * {@snippet lang=c :
     * int llama_token_nl(struct llama_vocab* vocab);
     * }
     */
    public static int llama_token_nl(MemorySegment vocab) {
        var mh$ = llama_token_nl$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_pad$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$4,"llama_token_pad");
    }
    /**
     * {@snippet lang=c :
     * int llama_token_pad(struct llama_vocab* vocab);
     * }
     */
    public static int llama_token_pad(MemorySegment vocab) {
        var mh$ = llama_token_pad$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_add_bos_token$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$5,"llama_add_bos_token");
    }
    /**
     * {@snippet lang=c :
     * _Bool llama_add_bos_token(struct llama_vocab* vocab);
     * }
     */
    public static boolean llama_add_bos_token(MemorySegment vocab) {
        var mh$ = llama_add_bos_token$MH();
        try {
            return (boolean)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_add_eos_token$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$0,"llama_add_eos_token");
    }
    /**
     * {@snippet lang=c :
     * _Bool llama_add_eos_token(struct llama_vocab* vocab);
     * }
     */
    public static boolean llama_add_eos_token(MemorySegment vocab) {
        var mh$ = llama_add_eos_token$MH();
        try {
            return (boolean)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_fim_pre$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$1,"llama_token_fim_pre");
    }
    /**
     * {@snippet lang=c :
     * int llama_token_fim_pre(struct llama_vocab* vocab);
     * }
     */
    public static int llama_token_fim_pre(MemorySegment vocab) {
        var mh$ = llama_token_fim_pre$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_fim_suf$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$2,"llama_token_fim_suf");
    }
    /**
     * {@snippet lang=c :
     * int llama_token_fim_suf(struct llama_vocab* vocab);
     * }
     */
    public static int llama_token_fim_suf(MemorySegment vocab) {
        var mh$ = llama_token_fim_suf$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_fim_mid$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$3,"llama_token_fim_mid");
    }
    /**
     * {@snippet lang=c :
     * int llama_token_fim_mid(struct llama_vocab* vocab);
     * }
     */
    public static int llama_token_fim_mid(MemorySegment vocab) {
        var mh$ = llama_token_fim_mid$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_fim_pad$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$4,"llama_token_fim_pad");
    }
    /**
     * {@snippet lang=c :
     * int llama_token_fim_pad(struct llama_vocab* vocab);
     * }
     */
    public static int llama_token_fim_pad(MemorySegment vocab) {
        var mh$ = llama_token_fim_pad$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_fim_rep$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$5,"llama_token_fim_rep");
    }
    /**
     * {@snippet lang=c :
     * int llama_token_fim_rep(struct llama_vocab* vocab);
     * }
     */
    public static int llama_token_fim_rep(MemorySegment vocab) {
        var mh$ = llama_token_fim_rep$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_fim_sep$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$0,"llama_token_fim_sep");
    }
    /**
     * {@snippet lang=c :
     * int llama_token_fim_sep(struct llama_vocab* vocab);
     * }
     */
    public static int llama_token_fim_sep(MemorySegment vocab) {
        var mh$ = llama_token_fim_sep$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_cls$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$1,"llama_vocab_cls");
    }
    /**
     * {@snippet lang=c :
     * int llama_vocab_cls(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_cls(MemorySegment vocab) {
        var mh$ = llama_vocab_cls$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_tokenize$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$3,"llama_tokenize");
    }
    /**
     * {@snippet lang=c :
     * int llama_tokenize(struct llama_vocab* vocab, char* text, int text_len, int* tokens, int n_tokens_max, _Bool add_special, _Bool parse_special);
     * }
     */
    public static int llama_tokenize(MemorySegment vocab, MemorySegment text, int text_len, MemorySegment tokens, int n_tokens_max, boolean add_special, boolean parse_special) {
        var mh$ = llama_tokenize$MH();
        try {
            return (int)mh$.invokeExact(vocab, text, text_len, tokens, n_tokens_max, add_special, parse_special);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_to_piece$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$5,"llama_token_to_piece");
    }
    /**
     * {@snippet lang=c :
     * int llama_token_to_piece(struct llama_vocab* vocab, int token, char* buf, int length, int lstrip, _Bool special);
     * }
     */
    public static int llama_token_to_piece(MemorySegment vocab, int token, MemorySegment buf, int length, int lstrip, boolean special) {
        var mh$ = llama_token_to_piece$MH();
        try {
            return (int)mh$.invokeExact(vocab, token, buf, length, lstrip, special);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_detokenize$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$0,"llama_detokenize");
    }
    /**
     * {@snippet lang=c :
     * int llama_detokenize(struct llama_vocab* vocab, int* tokens, int n_tokens, char* text, int text_len_max, _Bool remove_special, _Bool unparse_special);
     * }
     */
    public static int llama_detokenize(MemorySegment vocab, MemorySegment tokens, int n_tokens, MemorySegment text, int text_len_max, boolean remove_special, boolean unparse_special) {
        var mh$ = llama_detokenize$MH();
        try {
            return (int)mh$.invokeExact(vocab, tokens, n_tokens, text, text_len_max, remove_special, unparse_special);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_chat_apply_template$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$2,"llama_chat_apply_template");
    }
    /**
     * {@snippet lang=c :
     * int llama_chat_apply_template(char* tmpl, struct llama_chat_message* chat, unsigned long n_msg, _Bool add_ass, char* buf, int length);
     * }
     */
    public static int llama_chat_apply_template(MemorySegment tmpl, MemorySegment chat, long n_msg, boolean add_ass, MemorySegment buf, int length) {
        var mh$ = llama_chat_apply_template$MH();
        try {
            return (int)mh$.invokeExact(tmpl, chat, n_msg, add_ass, buf, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_chat_builtin_templates$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$4,"llama_chat_builtin_templates");
    }
    /**
     * {@snippet lang=c :
     * int llama_chat_builtin_templates(char** output, unsigned long len);
     * }
     */
    public static int llama_chat_builtin_templates(MemorySegment output, long len) {
        var mh$ = llama_chat_builtin_templates$MH();
        try {
            return (int)mh$.invokeExact(output, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef void* llama_sampler_context_t;
     * }
     */
    public static final AddressLayout llama_sampler_context_t = RuntimeHelper.POINTER;
    public static MethodHandle llama_sampler_init$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$3,"llama_sampler_init");
    }
    /**
     * {@snippet lang=c :
     * struct llama_sampler* llama_sampler_init(struct llama_sampler_i* iface, void* ctx);
     * }
     */
    public static MemorySegment llama_sampler_init(MemorySegment iface, MemorySegment ctx) {
        var mh$ = llama_sampler_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(iface, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_name$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$4,"llama_sampler_name");
    }
    /**
     * {@snippet lang=c :
     * char* llama_sampler_name(struct llama_sampler* smpl);
     * }
     */
    public static MemorySegment llama_sampler_name(MemorySegment smpl) {
        var mh$ = llama_sampler_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(smpl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_accept$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$5,"llama_sampler_accept");
    }
    /**
     * {@snippet lang=c :
     * void llama_sampler_accept(struct llama_sampler* smpl, int token);
     * }
     */
    public static void llama_sampler_accept(MemorySegment smpl, int token) {
        var mh$ = llama_sampler_accept$MH();
        try {
            mh$.invokeExact(smpl, token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_apply$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$0,"llama_sampler_apply");
    }
    /**
     * {@snippet lang=c :
     * void llama_sampler_apply(struct llama_sampler* smpl, struct llama_token_data_array* cur_p);
     * }
     */
    public static void llama_sampler_apply(MemorySegment smpl, MemorySegment cur_p) {
        var mh$ = llama_sampler_apply$MH();
        try {
            mh$.invokeExact(smpl, cur_p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$1,"llama_sampler_reset");
    }
    /**
     * {@snippet lang=c :
     * void llama_sampler_reset(struct llama_sampler* smpl);
     * }
     */
    public static void llama_sampler_reset(MemorySegment smpl) {
        var mh$ = llama_sampler_reset$MH();
        try {
            mh$.invokeExact(smpl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_clone$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$2,"llama_sampler_clone");
    }
    /**
     * {@snippet lang=c :
     * struct llama_sampler* llama_sampler_clone(struct llama_sampler* smpl);
     * }
     */
    public static MemorySegment llama_sampler_clone(MemorySegment smpl) {
        var mh$ = llama_sampler_clone$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(smpl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_free$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$3,"llama_sampler_free");
    }
    /**
     * {@snippet lang=c :
     * void llama_sampler_free(struct llama_sampler* smpl);
     * }
     */
    public static void llama_sampler_free(MemorySegment smpl) {
        var mh$ = llama_sampler_free$MH();
        try {
            mh$.invokeExact(smpl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_chain_init$MH() {
        return RuntimeHelper.requireNonNull(constants$199.const$5,"llama_sampler_chain_init");
    }
    /**
     * {@snippet lang=c :
     * struct llama_sampler* llama_sampler_chain_init(struct llama_sampler_chain_params params);
     * }
     */
    public static MemorySegment llama_sampler_chain_init(MemorySegment params) {
        var mh$ = llama_sampler_chain_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_chain_add$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$0,"llama_sampler_chain_add");
    }
    /**
     * {@snippet lang=c :
     * void llama_sampler_chain_add(struct llama_sampler* chain, struct llama_sampler* smpl);
     * }
     */
    public static void llama_sampler_chain_add(MemorySegment chain, MemorySegment smpl) {
        var mh$ = llama_sampler_chain_add$MH();
        try {
            mh$.invokeExact(chain, smpl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_chain_get$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$1,"llama_sampler_chain_get");
    }
    /**
     * {@snippet lang=c :
     * struct llama_sampler* llama_sampler_chain_get(struct llama_sampler* chain, int i);
     * }
     */
    public static MemorySegment llama_sampler_chain_get(MemorySegment chain, int i) {
        var mh$ = llama_sampler_chain_get$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(chain, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_chain_n$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$2,"llama_sampler_chain_n");
    }
    /**
     * {@snippet lang=c :
     * int llama_sampler_chain_n(struct llama_sampler* chain);
     * }
     */
    public static int llama_sampler_chain_n(MemorySegment chain) {
        var mh$ = llama_sampler_chain_n$MH();
        try {
            return (int)mh$.invokeExact(chain);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_chain_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$3,"llama_sampler_chain_remove");
    }
    /**
     * {@snippet lang=c :
     * struct llama_sampler* llama_sampler_chain_remove(struct llama_sampler* chain, int i);
     * }
     */
    public static MemorySegment llama_sampler_chain_remove(MemorySegment chain, int i) {
        var mh$ = llama_sampler_chain_remove$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(chain, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_greedy$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$4,"llama_sampler_init_greedy");
    }
    /**
     * {@snippet lang=c :
     * struct llama_sampler* llama_sampler_init_greedy();
     * }
     */
    public static MemorySegment llama_sampler_init_greedy() {
        var mh$ = llama_sampler_init_greedy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_dist$MH() {
        return RuntimeHelper.requireNonNull(constants$200.const$5,"llama_sampler_init_dist");
    }
    /**
     * {@snippet lang=c :
     * struct llama_sampler* llama_sampler_init_dist(unsigned int seed);
     * }
     */
    public static MemorySegment llama_sampler_init_dist(int seed) {
        var mh$ = llama_sampler_init_dist$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_softmax$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$0,"llama_sampler_init_softmax");
    }
    /**
     * {@snippet lang=c :
     * struct llama_sampler* llama_sampler_init_softmax();
     * }
     */
    public static MemorySegment llama_sampler_init_softmax() {
        var mh$ = llama_sampler_init_softmax$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_top_k$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$1,"llama_sampler_init_top_k");
    }
    /**
     * {@snippet lang=c :
     * struct llama_sampler* llama_sampler_init_top_k(int k);
     * }
     */
    public static MemorySegment llama_sampler_init_top_k(int k) {
        var mh$ = llama_sampler_init_top_k$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(k);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_top_p$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$3,"llama_sampler_init_top_p");
    }
    /**
     * {@snippet lang=c :
     * struct llama_sampler* llama_sampler_init_top_p(float p, unsigned long min_keep);
     * }
     */
    public static MemorySegment llama_sampler_init_top_p(float p, long min_keep) {
        var mh$ = llama_sampler_init_top_p$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(p, min_keep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_min_p$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$4,"llama_sampler_init_min_p");
    }
    /**
     * {@snippet lang=c :
     * struct llama_sampler* llama_sampler_init_min_p(float p, unsigned long min_keep);
     * }
     */
    public static MemorySegment llama_sampler_init_min_p(float p, long min_keep) {
        var mh$ = llama_sampler_init_min_p$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(p, min_keep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_typical$MH() {
        return RuntimeHelper.requireNonNull(constants$201.const$5,"llama_sampler_init_typical");
    }
    /**
     * {@snippet lang=c :
     * struct llama_sampler* llama_sampler_init_typical(float p, unsigned long min_keep);
     * }
     */
    public static MemorySegment llama_sampler_init_typical(float p, long min_keep) {
        var mh$ = llama_sampler_init_typical$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(p, min_keep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_temp$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$1,"llama_sampler_init_temp");
    }
    /**
     * {@snippet lang=c :
     * struct llama_sampler* llama_sampler_init_temp(float t);
     * }
     */
    public static MemorySegment llama_sampler_init_temp(float t) {
        var mh$ = llama_sampler_init_temp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_temp_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$3,"llama_sampler_init_temp_ext");
    }
    /**
     * {@snippet lang=c :
     * struct llama_sampler* llama_sampler_init_temp_ext(float t, float delta, float exponent);
     * }
     */
    public static MemorySegment llama_sampler_init_temp_ext(float t, float delta, float exponent) {
        var mh$ = llama_sampler_init_temp_ext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(t, delta, exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_xtc$MH() {
        return RuntimeHelper.requireNonNull(constants$202.const$5,"llama_sampler_init_xtc");
    }
    /**
     * {@snippet lang=c :
     * struct llama_sampler* llama_sampler_init_xtc(float p, float t, unsigned long min_keep, unsigned int seed);
     * }
     */
    public static MemorySegment llama_sampler_init_xtc(float p, float t, long min_keep, int seed) {
        var mh$ = llama_sampler_init_xtc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(p, t, min_keep, seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_top_n_sigma$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$0,"llama_sampler_init_top_n_sigma");
    }
    /**
     * {@snippet lang=c :
     * struct llama_sampler* llama_sampler_init_top_n_sigma(float n);
     * }
     */
    public static MemorySegment llama_sampler_init_top_n_sigma(float n) {
        var mh$ = llama_sampler_init_top_n_sigma$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_mirostat$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$2,"llama_sampler_init_mirostat");
    }
    /**
     * {@snippet lang=c :
     * struct llama_sampler* llama_sampler_init_mirostat(int n_vocab, unsigned int seed, float tau, float eta, int m);
     * }
     */
    public static MemorySegment llama_sampler_init_mirostat(int n_vocab, int seed, float tau, float eta, int m) {
        var mh$ = llama_sampler_init_mirostat$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(n_vocab, seed, tau, eta, m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_mirostat_v2$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$4,"llama_sampler_init_mirostat_v2");
    }
    /**
     * {@snippet lang=c :
     * struct llama_sampler* llama_sampler_init_mirostat_v2(unsigned int seed, float tau, float eta);
     * }
     */
    public static MemorySegment llama_sampler_init_mirostat_v2(int seed, float tau, float eta) {
        var mh$ = llama_sampler_init_mirostat_v2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(seed, tau, eta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_grammar$MH() {
        return RuntimeHelper.requireNonNull(constants$203.const$5,"llama_sampler_init_grammar");
    }
    /**
     * {@snippet lang=c :
     * struct llama_sampler* llama_sampler_init_grammar(struct llama_vocab* vocab, char* grammar_str, char* grammar_root);
     * }
     */
    public static MemorySegment llama_sampler_init_grammar(MemorySegment vocab, MemorySegment grammar_str, MemorySegment grammar_root) {
        var mh$ = llama_sampler_init_grammar$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(vocab, grammar_str, grammar_root);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_grammar_lazy$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$1,"llama_sampler_init_grammar_lazy");
    }
    /**
     * {@snippet lang=c :
     * struct llama_sampler* llama_sampler_init_grammar_lazy(struct llama_vocab* vocab, char* grammar_str, char* grammar_root, char** trigger_words, unsigned long num_trigger_words, int* trigger_tokens, unsigned long num_trigger_tokens);
     * }
     */
    public static MemorySegment llama_sampler_init_grammar_lazy(MemorySegment vocab, MemorySegment grammar_str, MemorySegment grammar_root, MemorySegment trigger_words, long num_trigger_words, MemorySegment trigger_tokens, long num_trigger_tokens) {
        var mh$ = llama_sampler_init_grammar_lazy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(vocab, grammar_str, grammar_root, trigger_words, num_trigger_words, trigger_tokens, num_trigger_tokens);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_grammar_lazy_patterns$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$2,"llama_sampler_init_grammar_lazy_patterns");
    }
    /**
     * {@snippet lang=c :
     * struct llama_sampler* llama_sampler_init_grammar_lazy_patterns(struct llama_vocab* vocab, char* grammar_str, char* grammar_root, char** trigger_patterns, unsigned long num_trigger_patterns, int* trigger_tokens, unsigned long num_trigger_tokens);
     * }
     */
    public static MemorySegment llama_sampler_init_grammar_lazy_patterns(MemorySegment vocab, MemorySegment grammar_str, MemorySegment grammar_root, MemorySegment trigger_patterns, long num_trigger_patterns, MemorySegment trigger_tokens, long num_trigger_tokens) {
        var mh$ = llama_sampler_init_grammar_lazy_patterns$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(vocab, grammar_str, grammar_root, trigger_patterns, num_trigger_patterns, trigger_tokens, num_trigger_tokens);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_penalties$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$4,"llama_sampler_init_penalties");
    }
    /**
     * {@snippet lang=c :
     * struct llama_sampler* llama_sampler_init_penalties(int penalty_last_n, float penalty_repeat, float penalty_freq, float penalty_present);
     * }
     */
    public static MemorySegment llama_sampler_init_penalties(int penalty_last_n, float penalty_repeat, float penalty_freq, float penalty_present) {
        var mh$ = llama_sampler_init_penalties$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(penalty_last_n, penalty_repeat, penalty_freq, penalty_present);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_dry$MH() {
        return RuntimeHelper.requireNonNull(constants$204.const$6,"llama_sampler_init_dry");
    }
    /**
     * {@snippet lang=c :
     * struct llama_sampler* llama_sampler_init_dry(struct llama_vocab* vocab, int n_ctx_train, float dry_multiplier, float dry_base, int dry_allowed_length, int dry_penalty_last_n, char** seq_breakers, unsigned long num_breakers);
     * }
     */
    public static MemorySegment llama_sampler_init_dry(MemorySegment vocab, int n_ctx_train, float dry_multiplier, float dry_base, int dry_allowed_length, int dry_penalty_last_n, MemorySegment seq_breakers, long num_breakers) {
        var mh$ = llama_sampler_init_dry$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(vocab, n_ctx_train, dry_multiplier, dry_base, dry_allowed_length, dry_penalty_last_n, seq_breakers, num_breakers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_logit_bias$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$1,"llama_sampler_init_logit_bias");
    }
    /**
     * {@snippet lang=c :
     * struct llama_sampler* llama_sampler_init_logit_bias(int n_vocab, int n_logit_bias, struct llama_logit_bias* logit_bias);
     * }
     */
    public static MemorySegment llama_sampler_init_logit_bias(int n_vocab, int n_logit_bias, MemorySegment logit_bias) {
        var mh$ = llama_sampler_init_logit_bias$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(n_vocab, n_logit_bias, logit_bias);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_infill$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$2,"llama_sampler_init_infill");
    }
    /**
     * {@snippet lang=c :
     * struct llama_sampler* llama_sampler_init_infill(struct llama_vocab* vocab);
     * }
     */
    public static MemorySegment llama_sampler_init_infill(MemorySegment vocab) {
        var mh$ = llama_sampler_init_infill$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_get_seed$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$3,"llama_sampler_get_seed");
    }
    /**
     * {@snippet lang=c :
     * unsigned int llama_sampler_get_seed(struct llama_sampler* smpl);
     * }
     */
    public static int llama_sampler_get_seed(MemorySegment smpl) {
        var mh$ = llama_sampler_get_seed$MH();
        try {
            return (int)mh$.invokeExact(smpl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_sample$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$4,"llama_sampler_sample");
    }
    /**
     * {@snippet lang=c :
     * int llama_sampler_sample(struct llama_sampler* smpl, struct llama_context* ctx, int idx);
     * }
     */
    public static int llama_sampler_sample(MemorySegment smpl, MemorySegment ctx, int idx) {
        var mh$ = llama_sampler_sample$MH();
        try {
            return (int)mh$.invokeExact(smpl, ctx, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_split_path$MH() {
        return RuntimeHelper.requireNonNull(constants$205.const$6,"llama_split_path");
    }
    /**
     * {@snippet lang=c :
     * int llama_split_path(char* split_path, unsigned long maxlen, char* path_prefix, int split_no, int split_count);
     * }
     */
    public static int llama_split_path(MemorySegment split_path, long maxlen, MemorySegment path_prefix, int split_no, int split_count) {
        var mh$ = llama_split_path$MH();
        try {
            return (int)mh$.invokeExact(split_path, maxlen, path_prefix, split_no, split_count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_split_prefix$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$0,"llama_split_prefix");
    }
    /**
     * {@snippet lang=c :
     * int llama_split_prefix(char* split_prefix, unsigned long maxlen, char* split_path, int split_no, int split_count);
     * }
     */
    public static int llama_split_prefix(MemorySegment split_prefix, long maxlen, MemorySegment split_path, int split_no, int split_count) {
        var mh$ = llama_split_prefix$MH();
        try {
            return (int)mh$.invokeExact(split_prefix, maxlen, split_path, split_no, split_count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_print_system_info$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$1,"llama_print_system_info");
    }
    /**
     * {@snippet lang=c :
     * char* llama_print_system_info();
     * }
     */
    public static MemorySegment llama_print_system_info() {
        var mh$ = llama_print_system_info$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_log_set$MH() {
        return RuntimeHelper.requireNonNull(constants$206.const$3,"llama_log_set");
    }
    /**
     * {@snippet lang=c :
     * void llama_log_set(void (*log_callback)(enum ggml_log_level,char*,void*), void* user_data);
     * }
     */
    public static void llama_log_set(MemorySegment log_callback, MemorySegment user_data) {
        var mh$ = llama_log_set$MH();
        try {
            mh$.invokeExact(log_callback, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_perf_context$MH() {
        return RuntimeHelper.requireNonNull(constants$208.const$3,"llama_perf_context");
    }
    /**
     * {@snippet lang=c :
     * struct llama_perf_context_data llama_perf_context(struct llama_context* ctx);
     * }
     */
    public static MemorySegment llama_perf_context(SegmentAllocator allocator, MemorySegment ctx) {
        var mh$ = llama_perf_context$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_perf_context_print$MH() {
        return RuntimeHelper.requireNonNull(constants$208.const$4,"llama_perf_context_print");
    }
    /**
     * {@snippet lang=c :
     * void llama_perf_context_print(struct llama_context* ctx);
     * }
     */
    public static void llama_perf_context_print(MemorySegment ctx) {
        var mh$ = llama_perf_context_print$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_perf_context_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$208.const$5,"llama_perf_context_reset");
    }
    /**
     * {@snippet lang=c :
     * void llama_perf_context_reset(struct llama_context* ctx);
     * }
     */
    public static void llama_perf_context_reset(MemorySegment ctx) {
        var mh$ = llama_perf_context_reset$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_perf_sampler$MH() {
        return RuntimeHelper.requireNonNull(constants$209.const$1,"llama_perf_sampler");
    }
    /**
     * {@snippet lang=c :
     * struct llama_perf_sampler_data llama_perf_sampler(struct llama_sampler* chain);
     * }
     */
    public static MemorySegment llama_perf_sampler(SegmentAllocator allocator, MemorySegment chain) {
        var mh$ = llama_perf_sampler$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, chain);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_perf_sampler_print$MH() {
        return RuntimeHelper.requireNonNull(constants$209.const$2,"llama_perf_sampler_print");
    }
    /**
     * {@snippet lang=c :
     * void llama_perf_sampler_print(struct llama_sampler* chain);
     * }
     */
    public static void llama_perf_sampler_print(MemorySegment chain) {
        var mh$ = llama_perf_sampler_print$MH();
        try {
            mh$.invokeExact(chain);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_perf_sampler_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$209.const$3,"llama_perf_sampler_reset");
    }
    /**
     * {@snippet lang=c :
     * void llama_perf_sampler_reset(struct llama_sampler* chain);
     * }
     */
    public static void llama_perf_sampler_reset(MemorySegment chain) {
        var mh$ = llama_perf_sampler_reset$MH();
        try {
            mh$.invokeExact(chain);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * #define NULL 0
     * }
     */
    public static MemorySegment NULL() {
        return constants$209.const$4;
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_SUF_EXTSN "$DARWIN_EXTSN"
     * }
     */
    public static MemorySegment __DARWIN_SUF_EXTSN() {
        return constants$209.const$5;
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_ANSI 4096
     * }
     */
    public static long __DARWIN_C_ANSI() {
        return 4096L;
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_FULL 900000
     * }
     */
    public static long __DARWIN_C_FULL() {
        return 900000L;
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_C_LEVEL 900000
     * }
     */
    public static long __DARWIN_C_LEVEL() {
        return 900000L;
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NULL 0
     * }
     */
    public static MemorySegment __DARWIN_NULL() {
        return constants$209.const$4;
    }
    /**
     * {@snippet lang=c :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet lang=c :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet lang=c :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet lang=c :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet lang=c :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet lang=c :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet lang=c :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return -1L;
    }
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet lang=c :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet lang=c :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet lang=c :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet lang=c :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet lang=c :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MIN -32768
     * }
     */
    public static int INT_FAST16_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MIN -2147483648
     * }
     */
    public static int INT_FAST32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet lang=c :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet lang=c :
     * #define INT_FAST16_MAX 32767
     * }
     */
    public static int INT_FAST16_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet lang=c :
     * #define INT_FAST32_MAX 2147483647
     * }
     */
    public static int INT_FAST32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet lang=c :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet lang=c :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet lang=c :
     * #define UINT_FAST16_MAX 65535
     * }
     */
    public static int UINT_FAST16_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet lang=c :
     * #define UINT_FAST32_MAX 4294967295
     * }
     */
    public static int UINT_FAST32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet lang=c :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    /**
     * {@snippet lang=c :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet lang=c :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet lang=c :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return -1L;
    }
    /**
     * {@snippet lang=c :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet lang=c :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return -1L;
    }
    /**
     * {@snippet lang=c :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet lang=c :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet lang=c :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return -1L;
    }
    /**
     * {@snippet lang=c :
     * #define RSIZE_MAX 9223372036854775807
     * }
     */
    public static long RSIZE_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet lang=c :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet lang=c :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet lang=c :
     * #define WINT_MIN -2147483648
     * }
     */
    public static int WINT_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet lang=c :
     * #define WINT_MAX 2147483647
     * }
     */
    public static int WINT_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet lang=c :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_0 1000
     * }
     */
    public static int MAC_OS_X_VERSION_10_0() {
        return (int)1000L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_1 1010
     * }
     */
    public static int MAC_OS_X_VERSION_10_1() {
        return (int)1010L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_2 1020
     * }
     */
    public static int MAC_OS_X_VERSION_10_2() {
        return (int)1020L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_3 1030
     * }
     */
    public static int MAC_OS_X_VERSION_10_3() {
        return (int)1030L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_4 1040
     * }
     */
    public static int MAC_OS_X_VERSION_10_4() {
        return (int)1040L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_5 1050
     * }
     */
    public static int MAC_OS_X_VERSION_10_5() {
        return (int)1050L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_6 1060
     * }
     */
    public static int MAC_OS_X_VERSION_10_6() {
        return (int)1060L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_7 1070
     * }
     */
    public static int MAC_OS_X_VERSION_10_7() {
        return (int)1070L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_8 1080
     * }
     */
    public static int MAC_OS_X_VERSION_10_8() {
        return (int)1080L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_9 1090
     * }
     */
    public static int MAC_OS_X_VERSION_10_9() {
        return (int)1090L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_10 101000
     * }
     */
    public static int MAC_OS_X_VERSION_10_10() {
        return (int)101000L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_10_2 101002
     * }
     */
    public static int MAC_OS_X_VERSION_10_10_2() {
        return (int)101002L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_10_3 101003
     * }
     */
    public static int MAC_OS_X_VERSION_10_10_3() {
        return (int)101003L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_11 101100
     * }
     */
    public static int MAC_OS_X_VERSION_10_11() {
        return (int)101100L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_11_2 101102
     * }
     */
    public static int MAC_OS_X_VERSION_10_11_2() {
        return (int)101102L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_11_3 101103
     * }
     */
    public static int MAC_OS_X_VERSION_10_11_3() {
        return (int)101103L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_11_4 101104
     * }
     */
    public static int MAC_OS_X_VERSION_10_11_4() {
        return (int)101104L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_12 101200
     * }
     */
    public static int MAC_OS_X_VERSION_10_12() {
        return (int)101200L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_12_1 101201
     * }
     */
    public static int MAC_OS_X_VERSION_10_12_1() {
        return (int)101201L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_12_2 101202
     * }
     */
    public static int MAC_OS_X_VERSION_10_12_2() {
        return (int)101202L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_12_4 101204
     * }
     */
    public static int MAC_OS_X_VERSION_10_12_4() {
        return (int)101204L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_13 101300
     * }
     */
    public static int MAC_OS_X_VERSION_10_13() {
        return (int)101300L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_13_1 101301
     * }
     */
    public static int MAC_OS_X_VERSION_10_13_1() {
        return (int)101301L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_13_2 101302
     * }
     */
    public static int MAC_OS_X_VERSION_10_13_2() {
        return (int)101302L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_13_4 101304
     * }
     */
    public static int MAC_OS_X_VERSION_10_13_4() {
        return (int)101304L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14 101400
     * }
     */
    public static int MAC_OS_X_VERSION_10_14() {
        return (int)101400L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14_1 101401
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_1() {
        return (int)101401L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14_4 101404
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_4() {
        return (int)101404L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14_5 101405
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_5() {
        return (int)101405L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_14_6 101406
     * }
     */
    public static int MAC_OS_X_VERSION_10_14_6() {
        return (int)101406L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_15 101500
     * }
     */
    public static int MAC_OS_X_VERSION_10_15() {
        return (int)101500L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_15_1 101501
     * }
     */
    public static int MAC_OS_X_VERSION_10_15_1() {
        return (int)101501L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_15_4 101504
     * }
     */
    public static int MAC_OS_X_VERSION_10_15_4() {
        return (int)101504L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_X_VERSION_10_16 101600
     * }
     */
    public static int MAC_OS_X_VERSION_10_16() {
        return (int)101600L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_0 110000
     * }
     */
    public static int MAC_OS_VERSION_11_0() {
        return (int)110000L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_1 110100
     * }
     */
    public static int MAC_OS_VERSION_11_1() {
        return (int)110100L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_3 110300
     * }
     */
    public static int MAC_OS_VERSION_11_3() {
        return (int)110300L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_4 110400
     * }
     */
    public static int MAC_OS_VERSION_11_4() {
        return (int)110400L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_5 110500
     * }
     */
    public static int MAC_OS_VERSION_11_5() {
        return (int)110500L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_11_6 110600
     * }
     */
    public static int MAC_OS_VERSION_11_6() {
        return (int)110600L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_0 120000
     * }
     */
    public static int MAC_OS_VERSION_12_0() {
        return (int)120000L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_1 120100
     * }
     */
    public static int MAC_OS_VERSION_12_1() {
        return (int)120100L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_2 120200
     * }
     */
    public static int MAC_OS_VERSION_12_2() {
        return (int)120200L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_3 120300
     * }
     */
    public static int MAC_OS_VERSION_12_3() {
        return (int)120300L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_4 120400
     * }
     */
    public static int MAC_OS_VERSION_12_4() {
        return (int)120400L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_5 120500
     * }
     */
    public static int MAC_OS_VERSION_12_5() {
        return (int)120500L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_6 120600
     * }
     */
    public static int MAC_OS_VERSION_12_6() {
        return (int)120600L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_12_7 120700
     * }
     */
    public static int MAC_OS_VERSION_12_7() {
        return (int)120700L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_0 130000
     * }
     */
    public static int MAC_OS_VERSION_13_0() {
        return (int)130000L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_1 130100
     * }
     */
    public static int MAC_OS_VERSION_13_1() {
        return (int)130100L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_2 130200
     * }
     */
    public static int MAC_OS_VERSION_13_2() {
        return (int)130200L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_3 130300
     * }
     */
    public static int MAC_OS_VERSION_13_3() {
        return (int)130300L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_4 130400
     * }
     */
    public static int MAC_OS_VERSION_13_4() {
        return (int)130400L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_5 130500
     * }
     */
    public static int MAC_OS_VERSION_13_5() {
        return (int)130500L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_13_6 130600
     * }
     */
    public static int MAC_OS_VERSION_13_6() {
        return (int)130600L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_0 140000
     * }
     */
    public static int MAC_OS_VERSION_14_0() {
        return (int)140000L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_1 140100
     * }
     */
    public static int MAC_OS_VERSION_14_1() {
        return (int)140100L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_2 140200
     * }
     */
    public static int MAC_OS_VERSION_14_2() {
        return (int)140200L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_3 140300
     * }
     */
    public static int MAC_OS_VERSION_14_3() {
        return (int)140300L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_4 140400
     * }
     */
    public static int MAC_OS_VERSION_14_4() {
        return (int)140400L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_14_5 140500
     * }
     */
    public static int MAC_OS_VERSION_14_5() {
        return (int)140500L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_15_0 150000
     * }
     */
    public static int MAC_OS_VERSION_15_0() {
        return (int)150000L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_15_1 150100
     * }
     */
    public static int MAC_OS_VERSION_15_1() {
        return (int)150100L;
    }
    /**
     * {@snippet lang=c :
     * #define MAC_OS_VERSION_15_2 150200
     * }
     */
    public static int MAC_OS_VERSION_15_2() {
        return (int)150200L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_OS_X_VERSION_MIN_REQUIRED 150000
     * }
     */
    public static int __MAC_OS_X_VERSION_MIN_REQUIRED() {
        return (int)150000L;
    }
    /**
     * {@snippet lang=c :
     * #define __MAC_OS_X_VERSION_MAX_ALLOWED 150200
     * }
     */
    public static int __MAC_OS_X_VERSION_MAX_ALLOWED() {
        return (int)150200L;
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_WCHAR_MAX 2147483647
     * }
     */
    public static int __DARWIN_WCHAR_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_WCHAR_MIN -2147483648
     * }
     */
    public static int __DARWIN_WCHAR_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet lang=c :
     * #define __DARWIN_WEOF -1
     * }
     */
    public static int __DARWIN_WEOF() {
        return (int)-1L;
    }
    /**
     * {@snippet lang=c :
     * #define USER_ADDR_NULL 0
     * }
     */
    public static long USER_ADDR_NULL() {
        return 0L;
    }
    /**
     * {@snippet lang=c :
     * #define EOF -1
     * }
     */
    public static int EOF() {
        return (int)-1L;
    }
    /**
     * {@snippet lang=c :
     * #define P_tmpdir "/var/tmp/"
     * }
     */
    public static MemorySegment P_tmpdir() {
        return constants$210.const$0;
    }
    /**
     * {@snippet lang=c :
     * #define GGML_N_TASKS_MAX -1
     * }
     */
    public static int GGML_N_TASKS_MAX() {
        return (int)-1L;
    }
    /**
     * {@snippet lang=c :
     * #define LLAMA_DEFAULT_SEED 4294967295
     * }
     */
    public static int LLAMA_DEFAULT_SEED() {
        return (int)4294967295L;
    }
    /**
     * {@snippet lang=c :
     * #define LLAMA_TOKEN_NULL -1
     * }
     */
    public static int LLAMA_TOKEN_NULL() {
        return (int)-1L;
    }
    /**
     * {@snippet lang=c :
     * #define LLAMA_FILE_MAGIC_GGLA 1734831201
     * }
     */
    public static int LLAMA_FILE_MAGIC_GGLA() {
        return (int)1734831201L;
    }
    /**
     * {@snippet lang=c :
     * #define LLAMA_FILE_MAGIC_GGSN 1734833006
     * }
     */
    public static int LLAMA_FILE_MAGIC_GGSN() {
        return (int)1734833006L;
    }
    /**
     * {@snippet lang=c :
     * #define LLAMA_FILE_MAGIC_GGSQ 1734833009
     * }
     */
    public static int LLAMA_FILE_MAGIC_GGSQ() {
        return (int)1734833009L;
    }
    /**
     * {@snippet lang=c :
     * #define LLAMA_SESSION_MAGIC 1734833006
     * }
     */
    public static int LLAMA_SESSION_MAGIC() {
        return (int)1734833006L;
    }
    /**
     * {@snippet lang=c :
     * #define LLAMA_STATE_SEQ_MAGIC 1734833009
     * }
     */
    public static int LLAMA_STATE_SEQ_MAGIC() {
        return (int)1734833009L;
    }
}


