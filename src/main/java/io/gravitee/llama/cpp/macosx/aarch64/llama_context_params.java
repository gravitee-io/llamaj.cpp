// Generated by jextract

package io.gravitee.llama.cpp.macosx.aarch64;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet lang=c :
 * struct llama_context_params {
 *     unsigned int n_ctx;
 *     unsigned int n_batch;
 *     unsigned int n_ubatch;
 *     unsigned int n_seq_max;
 *     int n_threads;
 *     int n_threads_batch;
 *     enum llama_rope_scaling_type rope_scaling_type;
 *     enum llama_pooling_type pooling_type;
 *     enum llama_attention_type attention_type;
 *     float rope_freq_base;
 *     float rope_freq_scale;
 *     float yarn_ext_factor;
 *     float yarn_attn_factor;
 *     float yarn_beta_fast;
 *     float yarn_beta_slow;
 *     unsigned int yarn_orig_ctx;
 *     float defrag_thold;
 *     _Bool (*cb_eval)(struct ggml_tensor*,_Bool,void*);
 *     void* cb_eval_user_data;
 *     enum ggml_type type_k;
 *     enum ggml_type type_v;
 *     _Bool logits_all;
 *     _Bool embeddings;
 *     _Bool offload_kqv;
 *     _Bool flash_attn;
 *     _Bool no_perf;
 *     _Bool (*abort_callback)(void*);
 *     void* abort_callback_data;
 * };
 * }
 */
public class llama_context_params {

    public static MemoryLayout $LAYOUT() {
        return constants$150.const$1;
    }
    public static VarHandle n_ctx$VH() {
        return constants$150.const$2;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int n_ctx;
     * }
     */
    public static int n_ctx$get(MemorySegment seg) {
        return (int)constants$150.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int n_ctx;
     * }
     */
    public static void n_ctx$set(MemorySegment seg, int x) {
        constants$150.const$2.set(seg, x);
    }
    public static int n_ctx$get(MemorySegment seg, long index) {
        return (int)constants$150.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void n_ctx$set(MemorySegment seg, long index, int x) {
        constants$150.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle n_batch$VH() {
        return constants$150.const$3;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int n_batch;
     * }
     */
    public static int n_batch$get(MemorySegment seg) {
        return (int)constants$150.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int n_batch;
     * }
     */
    public static void n_batch$set(MemorySegment seg, int x) {
        constants$150.const$3.set(seg, x);
    }
    public static int n_batch$get(MemorySegment seg, long index) {
        return (int)constants$150.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void n_batch$set(MemorySegment seg, long index, int x) {
        constants$150.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle n_ubatch$VH() {
        return constants$150.const$4;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int n_ubatch;
     * }
     */
    public static int n_ubatch$get(MemorySegment seg) {
        return (int)constants$150.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int n_ubatch;
     * }
     */
    public static void n_ubatch$set(MemorySegment seg, int x) {
        constants$150.const$4.set(seg, x);
    }
    public static int n_ubatch$get(MemorySegment seg, long index) {
        return (int)constants$150.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void n_ubatch$set(MemorySegment seg, long index, int x) {
        constants$150.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle n_seq_max$VH() {
        return constants$150.const$5;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int n_seq_max;
     * }
     */
    public static int n_seq_max$get(MemorySegment seg) {
        return (int)constants$150.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int n_seq_max;
     * }
     */
    public static void n_seq_max$set(MemorySegment seg, int x) {
        constants$150.const$5.set(seg, x);
    }
    public static int n_seq_max$get(MemorySegment seg, long index) {
        return (int)constants$150.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void n_seq_max$set(MemorySegment seg, long index, int x) {
        constants$150.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle n_threads$VH() {
        return constants$151.const$0;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * int n_threads;
     * }
     */
    public static int n_threads$get(MemorySegment seg) {
        return (int)constants$151.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * int n_threads;
     * }
     */
    public static void n_threads$set(MemorySegment seg, int x) {
        constants$151.const$0.set(seg, x);
    }
    public static int n_threads$get(MemorySegment seg, long index) {
        return (int)constants$151.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void n_threads$set(MemorySegment seg, long index, int x) {
        constants$151.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle n_threads_batch$VH() {
        return constants$151.const$1;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * int n_threads_batch;
     * }
     */
    public static int n_threads_batch$get(MemorySegment seg) {
        return (int)constants$151.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * int n_threads_batch;
     * }
     */
    public static void n_threads_batch$set(MemorySegment seg, int x) {
        constants$151.const$1.set(seg, x);
    }
    public static int n_threads_batch$get(MemorySegment seg, long index) {
        return (int)constants$151.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void n_threads_batch$set(MemorySegment seg, long index, int x) {
        constants$151.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rope_scaling_type$VH() {
        return constants$151.const$2;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum llama_rope_scaling_type rope_scaling_type;
     * }
     */
    public static int rope_scaling_type$get(MemorySegment seg) {
        return (int)constants$151.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum llama_rope_scaling_type rope_scaling_type;
     * }
     */
    public static void rope_scaling_type$set(MemorySegment seg, int x) {
        constants$151.const$2.set(seg, x);
    }
    public static int rope_scaling_type$get(MemorySegment seg, long index) {
        return (int)constants$151.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void rope_scaling_type$set(MemorySegment seg, long index, int x) {
        constants$151.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pooling_type$VH() {
        return constants$151.const$3;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum llama_pooling_type pooling_type;
     * }
     */
    public static int pooling_type$get(MemorySegment seg) {
        return (int)constants$151.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum llama_pooling_type pooling_type;
     * }
     */
    public static void pooling_type$set(MemorySegment seg, int x) {
        constants$151.const$3.set(seg, x);
    }
    public static int pooling_type$get(MemorySegment seg, long index) {
        return (int)constants$151.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pooling_type$set(MemorySegment seg, long index, int x) {
        constants$151.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle attention_type$VH() {
        return constants$151.const$4;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum llama_attention_type attention_type;
     * }
     */
    public static int attention_type$get(MemorySegment seg) {
        return (int)constants$151.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum llama_attention_type attention_type;
     * }
     */
    public static void attention_type$set(MemorySegment seg, int x) {
        constants$151.const$4.set(seg, x);
    }
    public static int attention_type$get(MemorySegment seg, long index) {
        return (int)constants$151.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void attention_type$set(MemorySegment seg, long index, int x) {
        constants$151.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rope_freq_base$VH() {
        return constants$151.const$5;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * float rope_freq_base;
     * }
     */
    public static float rope_freq_base$get(MemorySegment seg) {
        return (float)constants$151.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * float rope_freq_base;
     * }
     */
    public static void rope_freq_base$set(MemorySegment seg, float x) {
        constants$151.const$5.set(seg, x);
    }
    public static float rope_freq_base$get(MemorySegment seg, long index) {
        return (float)constants$151.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void rope_freq_base$set(MemorySegment seg, long index, float x) {
        constants$151.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rope_freq_scale$VH() {
        return constants$152.const$0;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * float rope_freq_scale;
     * }
     */
    public static float rope_freq_scale$get(MemorySegment seg) {
        return (float)constants$152.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * float rope_freq_scale;
     * }
     */
    public static void rope_freq_scale$set(MemorySegment seg, float x) {
        constants$152.const$0.set(seg, x);
    }
    public static float rope_freq_scale$get(MemorySegment seg, long index) {
        return (float)constants$152.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void rope_freq_scale$set(MemorySegment seg, long index, float x) {
        constants$152.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle yarn_ext_factor$VH() {
        return constants$152.const$1;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * float yarn_ext_factor;
     * }
     */
    public static float yarn_ext_factor$get(MemorySegment seg) {
        return (float)constants$152.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * float yarn_ext_factor;
     * }
     */
    public static void yarn_ext_factor$set(MemorySegment seg, float x) {
        constants$152.const$1.set(seg, x);
    }
    public static float yarn_ext_factor$get(MemorySegment seg, long index) {
        return (float)constants$152.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void yarn_ext_factor$set(MemorySegment seg, long index, float x) {
        constants$152.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle yarn_attn_factor$VH() {
        return constants$152.const$2;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * float yarn_attn_factor;
     * }
     */
    public static float yarn_attn_factor$get(MemorySegment seg) {
        return (float)constants$152.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * float yarn_attn_factor;
     * }
     */
    public static void yarn_attn_factor$set(MemorySegment seg, float x) {
        constants$152.const$2.set(seg, x);
    }
    public static float yarn_attn_factor$get(MemorySegment seg, long index) {
        return (float)constants$152.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void yarn_attn_factor$set(MemorySegment seg, long index, float x) {
        constants$152.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle yarn_beta_fast$VH() {
        return constants$152.const$3;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * float yarn_beta_fast;
     * }
     */
    public static float yarn_beta_fast$get(MemorySegment seg) {
        return (float)constants$152.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * float yarn_beta_fast;
     * }
     */
    public static void yarn_beta_fast$set(MemorySegment seg, float x) {
        constants$152.const$3.set(seg, x);
    }
    public static float yarn_beta_fast$get(MemorySegment seg, long index) {
        return (float)constants$152.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void yarn_beta_fast$set(MemorySegment seg, long index, float x) {
        constants$152.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle yarn_beta_slow$VH() {
        return constants$152.const$4;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * float yarn_beta_slow;
     * }
     */
    public static float yarn_beta_slow$get(MemorySegment seg) {
        return (float)constants$152.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * float yarn_beta_slow;
     * }
     */
    public static void yarn_beta_slow$set(MemorySegment seg, float x) {
        constants$152.const$4.set(seg, x);
    }
    public static float yarn_beta_slow$get(MemorySegment seg, long index) {
        return (float)constants$152.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void yarn_beta_slow$set(MemorySegment seg, long index, float x) {
        constants$152.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle yarn_orig_ctx$VH() {
        return constants$152.const$5;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int yarn_orig_ctx;
     * }
     */
    public static int yarn_orig_ctx$get(MemorySegment seg) {
        return (int)constants$152.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int yarn_orig_ctx;
     * }
     */
    public static void yarn_orig_ctx$set(MemorySegment seg, int x) {
        constants$152.const$5.set(seg, x);
    }
    public static int yarn_orig_ctx$get(MemorySegment seg, long index) {
        return (int)constants$152.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void yarn_orig_ctx$set(MemorySegment seg, long index, int x) {
        constants$152.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle defrag_thold$VH() {
        return constants$153.const$0;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * float defrag_thold;
     * }
     */
    public static float defrag_thold$get(MemorySegment seg) {
        return (float)constants$153.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * float defrag_thold;
     * }
     */
    public static void defrag_thold$set(MemorySegment seg, float x) {
        constants$153.const$0.set(seg, x);
    }
    public static float defrag_thold$get(MemorySegment seg, long index) {
        return (float)constants$153.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void defrag_thold$set(MemorySegment seg, long index, float x) {
        constants$153.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet lang=c :
 * _Bool (*cb_eval)(struct ggml_tensor*,_Bool,void*);
     * }
     */
    public interface cb_eval {

        boolean apply(MemorySegment t, boolean ask, MemorySegment user_data);
        static MemorySegment allocate(cb_eval fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$153.const$1, fi, constants$123.const$0, scope);
        }
        static cb_eval ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (MemorySegment _t, boolean _ask, MemorySegment _user_data) -> {
                try {
                    return (boolean)constants$123.const$2.invokeExact(symbol, _t, _ask, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle cb_eval$VH() {
        return constants$153.const$2;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * _Bool (*cb_eval)(struct ggml_tensor*,_Bool,void*);
     * }
     */
    public static MemorySegment cb_eval$get(MemorySegment seg) {
        return (MemorySegment)constants$153.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * _Bool (*cb_eval)(struct ggml_tensor*,_Bool,void*);
     * }
     */
    public static void cb_eval$set(MemorySegment seg, MemorySegment x) {
        constants$153.const$2.set(seg, x);
    }
    public static MemorySegment cb_eval$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$153.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void cb_eval$set(MemorySegment seg, long index, MemorySegment x) {
        constants$153.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static cb_eval cb_eval(MemorySegment segment, Arena scope) {
        return cb_eval.ofAddress(cb_eval$get(segment), scope);
    }
    public static VarHandle cb_eval_user_data$VH() {
        return constants$153.const$3;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * void* cb_eval_user_data;
     * }
     */
    public static MemorySegment cb_eval_user_data$get(MemorySegment seg) {
        return (MemorySegment)constants$153.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * void* cb_eval_user_data;
     * }
     */
    public static void cb_eval_user_data$set(MemorySegment seg, MemorySegment x) {
        constants$153.const$3.set(seg, x);
    }
    public static MemorySegment cb_eval_user_data$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$153.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void cb_eval_user_data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$153.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle type_k$VH() {
        return constants$153.const$4;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum ggml_type type_k;
     * }
     */
    public static int type_k$get(MemorySegment seg) {
        return (int)constants$153.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum ggml_type type_k;
     * }
     */
    public static void type_k$set(MemorySegment seg, int x) {
        constants$153.const$4.set(seg, x);
    }
    public static int type_k$get(MemorySegment seg, long index) {
        return (int)constants$153.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void type_k$set(MemorySegment seg, long index, int x) {
        constants$153.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle type_v$VH() {
        return constants$153.const$5;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum ggml_type type_v;
     * }
     */
    public static int type_v$get(MemorySegment seg) {
        return (int)constants$153.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum ggml_type type_v;
     * }
     */
    public static void type_v$set(MemorySegment seg, int x) {
        constants$153.const$5.set(seg, x);
    }
    public static int type_v$get(MemorySegment seg, long index) {
        return (int)constants$153.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void type_v$set(MemorySegment seg, long index, int x) {
        constants$153.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle logits_all$VH() {
        return constants$154.const$0;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * _Bool logits_all;
     * }
     */
    public static boolean logits_all$get(MemorySegment seg) {
        return (boolean)constants$154.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * _Bool logits_all;
     * }
     */
    public static void logits_all$set(MemorySegment seg, boolean x) {
        constants$154.const$0.set(seg, x);
    }
    public static boolean logits_all$get(MemorySegment seg, long index) {
        return (boolean)constants$154.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void logits_all$set(MemorySegment seg, long index, boolean x) {
        constants$154.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle embeddings$VH() {
        return constants$154.const$1;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * _Bool embeddings;
     * }
     */
    public static boolean embeddings$get(MemorySegment seg) {
        return (boolean)constants$154.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * _Bool embeddings;
     * }
     */
    public static void embeddings$set(MemorySegment seg, boolean x) {
        constants$154.const$1.set(seg, x);
    }
    public static boolean embeddings$get(MemorySegment seg, long index) {
        return (boolean)constants$154.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void embeddings$set(MemorySegment seg, long index, boolean x) {
        constants$154.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle offload_kqv$VH() {
        return constants$154.const$2;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * _Bool offload_kqv;
     * }
     */
    public static boolean offload_kqv$get(MemorySegment seg) {
        return (boolean)constants$154.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * _Bool offload_kqv;
     * }
     */
    public static void offload_kqv$set(MemorySegment seg, boolean x) {
        constants$154.const$2.set(seg, x);
    }
    public static boolean offload_kqv$get(MemorySegment seg, long index) {
        return (boolean)constants$154.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void offload_kqv$set(MemorySegment seg, long index, boolean x) {
        constants$154.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle flash_attn$VH() {
        return constants$154.const$3;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * _Bool flash_attn;
     * }
     */
    public static boolean flash_attn$get(MemorySegment seg) {
        return (boolean)constants$154.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * _Bool flash_attn;
     * }
     */
    public static void flash_attn$set(MemorySegment seg, boolean x) {
        constants$154.const$3.set(seg, x);
    }
    public static boolean flash_attn$get(MemorySegment seg, long index) {
        return (boolean)constants$154.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void flash_attn$set(MemorySegment seg, long index, boolean x) {
        constants$154.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle no_perf$VH() {
        return constants$154.const$4;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * _Bool no_perf;
     * }
     */
    public static boolean no_perf$get(MemorySegment seg) {
        return (boolean)constants$154.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * _Bool no_perf;
     * }
     */
    public static void no_perf$set(MemorySegment seg, boolean x) {
        constants$154.const$4.set(seg, x);
    }
    public static boolean no_perf$get(MemorySegment seg, long index) {
        return (boolean)constants$154.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void no_perf$set(MemorySegment seg, long index, boolean x) {
        constants$154.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet lang=c :
 * _Bool (*abort_callback)(void*);
     * }
     */
    public interface abort_callback {

        boolean apply(MemorySegment data);
        static MemorySegment allocate(abort_callback fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$154.const$5, fi, constants$35.const$4, scope);
        }
        static abort_callback ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (MemorySegment _data) -> {
                try {
                    return (boolean)constants$36.const$0.invokeExact(symbol, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle abort_callback$VH() {
        return constants$155.const$0;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * _Bool (*abort_callback)(void*);
     * }
     */
    public static MemorySegment abort_callback$get(MemorySegment seg) {
        return (MemorySegment)constants$155.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * _Bool (*abort_callback)(void*);
     * }
     */
    public static void abort_callback$set(MemorySegment seg, MemorySegment x) {
        constants$155.const$0.set(seg, x);
    }
    public static MemorySegment abort_callback$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$155.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void abort_callback$set(MemorySegment seg, long index, MemorySegment x) {
        constants$155.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static abort_callback abort_callback(MemorySegment segment, Arena scope) {
        return abort_callback.ofAddress(abort_callback$get(segment), scope);
    }
    public static VarHandle abort_callback_data$VH() {
        return constants$155.const$1;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * void* abort_callback_data;
     * }
     */
    public static MemorySegment abort_callback_data$get(MemorySegment seg) {
        return (MemorySegment)constants$155.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * void* abort_callback_data;
     * }
     */
    public static void abort_callback_data$set(MemorySegment seg, MemorySegment x) {
        constants$155.const$1.set(seg, x);
    }
    public static MemorySegment abort_callback_data$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$155.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void abort_callback_data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$155.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


