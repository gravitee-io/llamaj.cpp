// Generated by jextract

package io.gravitee.llama.cpp.macosx.aarch64;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet lang=c :
 * struct llama_sampler_i {
 *     char* (*name)(struct llama_sampler*);
 *     void (*accept)(struct llama_sampler*,int);
 *     void (*apply)(struct llama_sampler*,struct llama_token_data_array*);
 *     void (*reset)(struct llama_sampler*);
 *     struct llama_sampler* (*clone)(struct llama_sampler*);
 *     void (*free)(struct llama_sampler*);
 * };
 * }
 */
public class llama_sampler_i {

    public static MemoryLayout $LAYOUT() {
        return constants$190.const$2;
    }
    /**
     * {@snippet lang=c :
 * char* (*name)(struct llama_sampler*);
     * }
     */
    public interface name {

        MemorySegment apply(MemorySegment reg);
        static MemorySegment allocate(name fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$190.const$3, fi, constants$16.const$0, scope);
        }
        static name ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (MemorySegment _reg) -> {
                try {
                    return (MemorySegment)constants$119.const$3.invokeExact(symbol, _reg);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle name$VH() {
        return constants$190.const$4;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * char* (*name)(struct llama_sampler*);
     * }
     */
    public static MemorySegment name$get(MemorySegment seg) {
        return (MemorySegment)constants$190.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * char* (*name)(struct llama_sampler*);
     * }
     */
    public static void name$set(MemorySegment seg, MemorySegment x) {
        constants$190.const$4.set(seg, x);
    }
    public static MemorySegment name$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$190.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemorySegment x) {
        constants$190.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static name name(MemorySegment segment, Arena scope) {
        return name.ofAddress(name$get(segment), scope);
    }
    /**
     * {@snippet lang=c :
 * void (*accept)(struct llama_sampler*,int);
     * }
     */
    public interface accept {

        void apply(MemorySegment backend, int n_threads);
        static MemorySegment allocate(accept fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$190.const$5, fi, constants$62.const$4, scope);
        }
        static accept ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (MemorySegment _backend, int _n_threads) -> {
                try {
                    constants$119.const$1.invokeExact(symbol, _backend, _n_threads);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle accept$VH() {
        return constants$191.const$0;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*accept)(struct llama_sampler*,int);
     * }
     */
    public static MemorySegment accept$get(MemorySegment seg) {
        return (MemorySegment)constants$191.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*accept)(struct llama_sampler*,int);
     * }
     */
    public static void accept$set(MemorySegment seg, MemorySegment x) {
        constants$191.const$0.set(seg, x);
    }
    public static MemorySegment accept$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$191.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void accept$set(MemorySegment seg, long index, MemorySegment x) {
        constants$191.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static accept accept(MemorySegment segment, Arena scope) {
        return accept.ofAddress(accept$get(segment), scope);
    }
    /**
     * {@snippet lang=c :
 * void (*apply)(struct llama_sampler*,struct llama_token_data_array*);
     * }
     */
    public interface apply {

        void apply(MemorySegment _x0, MemorySegment _x1);
        static MemorySegment allocate(apply fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$191.const$1, fi, constants$17.const$5, scope);
        }
        static apply ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (MemorySegment __x0, MemorySegment __x1) -> {
                try {
                    constants$83.const$0.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle apply$VH() {
        return constants$191.const$2;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*apply)(struct llama_sampler*,struct llama_token_data_array*);
     * }
     */
    public static MemorySegment apply$get(MemorySegment seg) {
        return (MemorySegment)constants$191.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*apply)(struct llama_sampler*,struct llama_token_data_array*);
     * }
     */
    public static void apply$set(MemorySegment seg, MemorySegment x) {
        constants$191.const$2.set(seg, x);
    }
    public static MemorySegment apply$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$191.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void apply$set(MemorySegment seg, long index, MemorySegment x) {
        constants$191.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static apply apply(MemorySegment segment, Arena scope) {
        return apply.ofAddress(apply$get(segment), scope);
    }
    /**
     * {@snippet lang=c :
 * void (*reset)(struct llama_sampler*);
     * }
     */
    public interface reset {

        void apply(MemorySegment _x0);
        static MemorySegment allocate(reset fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$191.const$3, fi, constants$0.const$3, scope);
        }
        static reset ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (MemorySegment __x0) -> {
                try {
                    constants$0.const$5.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle reset$VH() {
        return constants$191.const$4;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*reset)(struct llama_sampler*);
     * }
     */
    public static MemorySegment reset$get(MemorySegment seg) {
        return (MemorySegment)constants$191.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*reset)(struct llama_sampler*);
     * }
     */
    public static void reset$set(MemorySegment seg, MemorySegment x) {
        constants$191.const$4.set(seg, x);
    }
    public static MemorySegment reset$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$191.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void reset$set(MemorySegment seg, long index, MemorySegment x) {
        constants$191.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static reset reset(MemorySegment segment, Arena scope) {
        return reset.ofAddress(reset$get(segment), scope);
    }
    /**
     * {@snippet lang=c :
 * struct llama_sampler* (*clone)(struct llama_sampler*);
     * }
     */
    public interface clone {

        MemorySegment apply(MemorySegment reg);
        static MemorySegment allocate(clone fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$191.const$5, fi, constants$16.const$0, scope);
        }
        static clone ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (MemorySegment _reg) -> {
                try {
                    return (MemorySegment)constants$119.const$3.invokeExact(symbol, _reg);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle clone$VH() {
        return constants$192.const$0;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct llama_sampler* (*clone)(struct llama_sampler*);
     * }
     */
    public static MemorySegment clone$get(MemorySegment seg) {
        return (MemorySegment)constants$192.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct llama_sampler* (*clone)(struct llama_sampler*);
     * }
     */
    public static void clone$set(MemorySegment seg, MemorySegment x) {
        constants$192.const$0.set(seg, x);
    }
    public static MemorySegment clone$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$192.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void clone$set(MemorySegment seg, long index, MemorySegment x) {
        constants$192.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static clone clone(MemorySegment segment, Arena scope) {
        return clone.ofAddress(clone$get(segment), scope);
    }
    /**
     * {@snippet lang=c :
 * void (*free)(struct llama_sampler*);
     * }
     */
    public interface free {

        void apply(MemorySegment _x0);
        static MemorySegment allocate(free fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$192.const$1, fi, constants$0.const$3, scope);
        }
        static free ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (MemorySegment __x0) -> {
                try {
                    constants$0.const$5.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle free$VH() {
        return constants$192.const$2;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*free)(struct llama_sampler*);
     * }
     */
    public static MemorySegment free$get(MemorySegment seg) {
        return (MemorySegment)constants$192.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*free)(struct llama_sampler*);
     * }
     */
    public static void free$set(MemorySegment seg, MemorySegment x) {
        constants$192.const$2.set(seg, x);
    }
    public static MemorySegment free$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$192.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void free$set(MemorySegment seg, long index, MemorySegment x) {
        constants$192.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static free free(MemorySegment segment, Arena scope) {
        return free.ofAddress(free$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


