// Generated by jextract

package io.gravitee.llama.cpp.macosx.aarch64;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet lang=c :
 * _Bool (*ggml_backend_compare_graph_backend$callback)(int,struct ggml_tensor*,struct ggml_tensor*,void*);
 * }
 */
public interface ggml_backend_compare_graph_backend$callback {

    boolean apply(int node_index, java.lang.foreign.MemorySegment t1, java.lang.foreign.MemorySegment t2, java.lang.foreign.MemorySegment user_data);
    static MemorySegment allocate(ggml_backend_compare_graph_backend$callback fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$130.const$1, fi, constants$129.const$4, scope);
    }
    static ggml_backend_compare_graph_backend$callback ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (int _node_index, java.lang.foreign.MemorySegment _t1, java.lang.foreign.MemorySegment _t2, java.lang.foreign.MemorySegment _user_data) -> {
            try {
                return (boolean)constants$130.const$0.invokeExact(symbol, _node_index, _t1, _t2, _user_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


