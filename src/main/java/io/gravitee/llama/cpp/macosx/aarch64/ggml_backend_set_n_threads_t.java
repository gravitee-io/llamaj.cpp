// Generated by jextract

package io.gravitee.llama.cpp.macosx.aarch64;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet lang=c :
 * void (*ggml_backend_set_n_threads_t)(struct ggml_backend* backend,int n_threads);
 * }
 */
public interface ggml_backend_set_n_threads_t {

    void apply(MemorySegment backend, int n_threads);
    static MemorySegment allocate(ggml_backend_set_n_threads_t fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$119.const$0, fi, constants$62.const$4, scope);
    }
    static ggml_backend_set_n_threads_t ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (MemorySegment _backend, int _n_threads) -> {
            try {
                constants$119.const$1.invokeExact(symbol, _backend, _n_threads);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


