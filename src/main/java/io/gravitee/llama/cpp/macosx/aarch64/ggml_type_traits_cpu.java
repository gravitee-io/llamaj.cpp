// Generated by jextract

package io.gravitee.llama.cpp.macosx.aarch64;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet lang=c :
 * struct ggml_type_traits_cpu {
 *     void (*from_float)(float*,void*,long long);
 *     void (*vec_dot)(int,float*,unsigned long,void*,unsigned long,void*,unsigned long,int);
 *     enum ggml_type vec_dot_type;
 *     long long nrows;
 * };
 * }
 */
public class ggml_type_traits_cpu {

    public static MemoryLayout $LAYOUT() {
        return constants$142.const$4;
    }
    /**
     * {@snippet lang=c :
 * void (*from_float)(float*,void*,long long);
     * }
     */
    public interface from_float {

        void apply(java.lang.foreign.MemorySegment x, java.lang.foreign.MemorySegment y, long k);
        static MemorySegment allocate(from_float fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$142.const$5, fi, constants$31.const$4, scope);
        }
        static from_float ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _x, java.lang.foreign.MemorySegment _y, long _k) -> {
                try {
                    constants$99.const$3.invokeExact(symbol, _x, _y, _k);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle from_float$VH() {
        return constants$143.const$0;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*from_float)(float*,void*,long long);
     * }
     */
    public static MemorySegment from_float$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$143.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*from_float)(float*,void*,long long);
     * }
     */
    public static void from_float$set(MemorySegment seg, MemorySegment x) {
        constants$143.const$0.set(seg, x);
    }
    public static MemorySegment from_float$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$143.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void from_float$set(MemorySegment seg, long index, MemorySegment x) {
        constants$143.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static from_float from_float(MemorySegment segment, Arena scope) {
        return from_float.ofAddress(from_float$get(segment), scope);
    }
    /**
     * {@snippet lang=c :
 * void (*vec_dot)(int,float*,unsigned long,void*,unsigned long,void*,unsigned long,int);
     * }
     */
    public interface vec_dot {

        void apply(int n, java.lang.foreign.MemorySegment s, long bs, java.lang.foreign.MemorySegment x, long bx, java.lang.foreign.MemorySegment y, long by, int nrc);
        static MemorySegment allocate(vec_dot fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$143.const$1, fi, constants$142.const$1, scope);
        }
        static vec_dot ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (int _n, java.lang.foreign.MemorySegment _s, long _bs, java.lang.foreign.MemorySegment _x, long _bx, java.lang.foreign.MemorySegment _y, long _by, int _nrc) -> {
                try {
                    constants$142.const$3.invokeExact(symbol, _n, _s, _bs, _x, _bx, _y, _by, _nrc);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle vec_dot$VH() {
        return constants$143.const$2;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*vec_dot)(int,float*,unsigned long,void*,unsigned long,void*,unsigned long,int);
     * }
     */
    public static MemorySegment vec_dot$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$143.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*vec_dot)(int,float*,unsigned long,void*,unsigned long,void*,unsigned long,int);
     * }
     */
    public static void vec_dot$set(MemorySegment seg, MemorySegment x) {
        constants$143.const$2.set(seg, x);
    }
    public static MemorySegment vec_dot$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$143.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void vec_dot$set(MemorySegment seg, long index, MemorySegment x) {
        constants$143.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static vec_dot vec_dot(MemorySegment segment, Arena scope) {
        return vec_dot.ofAddress(vec_dot$get(segment), scope);
    }
    public static VarHandle vec_dot_type$VH() {
        return constants$143.const$3;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum ggml_type vec_dot_type;
     * }
     */
    public static int vec_dot_type$get(MemorySegment seg) {
        return (int)constants$143.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum ggml_type vec_dot_type;
     * }
     */
    public static void vec_dot_type$set(MemorySegment seg, int x) {
        constants$143.const$3.set(seg, x);
    }
    public static int vec_dot_type$get(MemorySegment seg, long index) {
        return (int)constants$143.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void vec_dot_type$set(MemorySegment seg, long index, int x) {
        constants$143.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nrows$VH() {
        return constants$143.const$4;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * long long nrows;
     * }
     */
    public static long nrows$get(MemorySegment seg) {
        return (long)constants$143.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * long long nrows;
     * }
     */
    public static void nrows$set(MemorySegment seg, long x) {
        constants$143.const$4.set(seg, x);
    }
    public static long nrows$get(MemorySegment seg, long index) {
        return (long)constants$143.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void nrows$set(MemorySegment seg, long index, long x) {
        constants$143.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


