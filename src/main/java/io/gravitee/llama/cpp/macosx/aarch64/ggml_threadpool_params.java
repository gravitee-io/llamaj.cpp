// Generated by jextract

package io.gravitee.llama.cpp.macosx.aarch64;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet lang=c :
 * struct ggml_threadpool_params {
 *     _Bool cpumask[512];
 *     int n_threads;
 *     enum ggml_sched_priority prio;
 *     unsigned int poll;
 *     _Bool strict_cpu;
 *     _Bool paused;
 * };
 * }
 */
public class ggml_threadpool_params {

    public static MemoryLayout $LAYOUT() {
        return constants$100.const$0;
    }
    public static MemorySegment cpumask$slice(MemorySegment seg) {
        return seg.asSlice(0, 512);
    }
    public static VarHandle n_threads$VH() {
        return constants$100.const$1;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * int n_threads;
     * }
     */
    public static int n_threads$get(MemorySegment seg) {
        return (int)constants$100.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * int n_threads;
     * }
     */
    public static void n_threads$set(MemorySegment seg, int x) {
        constants$100.const$1.set(seg, x);
    }
    public static int n_threads$get(MemorySegment seg, long index) {
        return (int)constants$100.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void n_threads$set(MemorySegment seg, long index, int x) {
        constants$100.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle prio$VH() {
        return constants$100.const$2;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum ggml_sched_priority prio;
     * }
     */
    public static int prio$get(MemorySegment seg) {
        return (int)constants$100.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum ggml_sched_priority prio;
     * }
     */
    public static void prio$set(MemorySegment seg, int x) {
        constants$100.const$2.set(seg, x);
    }
    public static int prio$get(MemorySegment seg, long index) {
        return (int)constants$100.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void prio$set(MemorySegment seg, long index, int x) {
        constants$100.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle poll$VH() {
        return constants$100.const$3;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int poll;
     * }
     */
    public static int poll$get(MemorySegment seg) {
        return (int)constants$100.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int poll;
     * }
     */
    public static void poll$set(MemorySegment seg, int x) {
        constants$100.const$3.set(seg, x);
    }
    public static int poll$get(MemorySegment seg, long index) {
        return (int)constants$100.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void poll$set(MemorySegment seg, long index, int x) {
        constants$100.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle strict_cpu$VH() {
        return constants$100.const$4;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * _Bool strict_cpu;
     * }
     */
    public static boolean strict_cpu$get(MemorySegment seg) {
        return (boolean)constants$100.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * _Bool strict_cpu;
     * }
     */
    public static void strict_cpu$set(MemorySegment seg, boolean x) {
        constants$100.const$4.set(seg, x);
    }
    public static boolean strict_cpu$get(MemorySegment seg, long index) {
        return (boolean)constants$100.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void strict_cpu$set(MemorySegment seg, long index, boolean x) {
        constants$100.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle paused$VH() {
        return constants$100.const$5;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * _Bool paused;
     * }
     */
    public static boolean paused$get(MemorySegment seg) {
        return (boolean)constants$100.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * _Bool paused;
     * }
     */
    public static void paused$set(MemorySegment seg, boolean x) {
        constants$100.const$5.set(seg, x);
    }
    public static boolean paused$get(MemorySegment seg, long index) {
        return (boolean)constants$100.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void paused$set(MemorySegment seg, long index, boolean x) {
        constants$100.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


