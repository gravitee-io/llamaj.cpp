// Generated by jextract

package io.gravitee.llama.cpp.macosx.aarch64;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet lang=c :
 * struct ggml_cplan {
 *     unsigned long work_size;
 *     unsigned char* work_data;
 *     int n_threads;
 *     struct ggml_threadpool* threadpool;
 *     _Bool (*abort_callback)(void*);
 *     void* abort_callback_data;
 * };
 * }
 */
public class ggml_cplan {

    public static MemoryLayout $LAYOUT() {
        return constants$131.const$2;
    }
    public static VarHandle work_size$VH() {
        return constants$131.const$3;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned long work_size;
     * }
     */
    public static long work_size$get(MemorySegment seg) {
        return (long)constants$131.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned long work_size;
     * }
     */
    public static void work_size$set(MemorySegment seg, long x) {
        constants$131.const$3.set(seg, x);
    }
    public static long work_size$get(MemorySegment seg, long index) {
        return (long)constants$131.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void work_size$set(MemorySegment seg, long index, long x) {
        constants$131.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle work_data$VH() {
        return constants$131.const$4;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned char* work_data;
     * }
     */
    public static MemorySegment work_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$131.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned char* work_data;
     * }
     */
    public static void work_data$set(MemorySegment seg, MemorySegment x) {
        constants$131.const$4.set(seg, x);
    }
    public static MemorySegment work_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$131.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void work_data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$131.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle n_threads$VH() {
        return constants$131.const$5;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * int n_threads;
     * }
     */
    public static int n_threads$get(MemorySegment seg) {
        return (int)constants$131.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * int n_threads;
     * }
     */
    public static void n_threads$set(MemorySegment seg, int x) {
        constants$131.const$5.set(seg, x);
    }
    public static int n_threads$get(MemorySegment seg, long index) {
        return (int)constants$131.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void n_threads$set(MemorySegment seg, long index, int x) {
        constants$131.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle threadpool$VH() {
        return constants$132.const$0;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct ggml_threadpool* threadpool;
     * }
     */
    public static MemorySegment threadpool$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$132.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct ggml_threadpool* threadpool;
     * }
     */
    public static void threadpool$set(MemorySegment seg, MemorySegment x) {
        constants$132.const$0.set(seg, x);
    }
    public static MemorySegment threadpool$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$132.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void threadpool$set(MemorySegment seg, long index, MemorySegment x) {
        constants$132.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet lang=c :
 * _Bool (*abort_callback)(void*);
     * }
     */
    public interface abort_callback {

        boolean apply(java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(abort_callback fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$132.const$1, fi, constants$35.const$4, scope);
        }
        static abort_callback ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _data) -> {
                try {
                    return (boolean)constants$36.const$0.invokeExact(symbol, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle abort_callback$VH() {
        return constants$132.const$2;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * _Bool (*abort_callback)(void*);
     * }
     */
    public static MemorySegment abort_callback$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$132.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * _Bool (*abort_callback)(void*);
     * }
     */
    public static void abort_callback$set(MemorySegment seg, MemorySegment x) {
        constants$132.const$2.set(seg, x);
    }
    public static MemorySegment abort_callback$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$132.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void abort_callback$set(MemorySegment seg, long index, MemorySegment x) {
        constants$132.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static abort_callback abort_callback(MemorySegment segment, Arena scope) {
        return abort_callback.ofAddress(abort_callback$get(segment), scope);
    }
    public static VarHandle abort_callback_data$VH() {
        return constants$132.const$3;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * void* abort_callback_data;
     * }
     */
    public static MemorySegment abort_callback_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$132.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * void* abort_callback_data;
     * }
     */
    public static void abort_callback_data$set(MemorySegment seg, MemorySegment x) {
        constants$132.const$3.set(seg, x);
    }
    public static MemorySegment abort_callback_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$132.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void abort_callback_data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$132.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


