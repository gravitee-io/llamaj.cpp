// Generated by jextract

package io.gravitee.llama.cpp.macosx.aarch64;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet lang=c :
 * void (*ggml_map_unary_f32$fun)(int,float*,float*);
 * }
 */
public interface ggml_map_unary_f32$fun {

    void apply(int _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
    static MemorySegment allocate(ggml_map_unary_f32$fun fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$85.const$2, fi, constants$83.const$0, scope);
    }
    static ggml_map_unary_f32$fun ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (int __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
            try {
                constants$83.const$2.invokeExact(symbol, __x0, __x1, __x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


