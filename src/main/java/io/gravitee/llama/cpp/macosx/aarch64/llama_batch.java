// Generated by jextract

package io.gravitee.llama.cpp.macosx.aarch64;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet lang=c :
 * struct llama_batch {
 *     int n_tokens;
 *     int* token;
 *     float* embd;
 *     int* pos;
 *     int* n_seq_id;
 *     int** seq_id;
 *     signed char* logits;
 * };
 * }
 */
public class llama_batch {

    public static MemoryLayout $LAYOUT() {
        return constants$145.const$4;
    }
    public static VarHandle n_tokens$VH() {
        return constants$145.const$5;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * int n_tokens;
     * }
     */
    public static int n_tokens$get(MemorySegment seg) {
        return (int)constants$145.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * int n_tokens;
     * }
     */
    public static void n_tokens$set(MemorySegment seg, int x) {
        constants$145.const$5.set(seg, x);
    }
    public static int n_tokens$get(MemorySegment seg, long index) {
        return (int)constants$145.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void n_tokens$set(MemorySegment seg, long index, int x) {
        constants$145.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle token$VH() {
        return constants$146.const$0;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * int* token;
     * }
     */
    public static MemorySegment token$get(MemorySegment seg) {
        return (MemorySegment)constants$146.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * int* token;
     * }
     */
    public static void token$set(MemorySegment seg, MemorySegment x) {
        constants$146.const$0.set(seg, x);
    }
    public static MemorySegment token$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$146.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void token$set(MemorySegment seg, long index, MemorySegment x) {
        constants$146.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle embd$VH() {
        return constants$146.const$1;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * float* embd;
     * }
     */
    public static MemorySegment embd$get(MemorySegment seg) {
        return (MemorySegment)constants$146.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * float* embd;
     * }
     */
    public static void embd$set(MemorySegment seg, MemorySegment x) {
        constants$146.const$1.set(seg, x);
    }
    public static MemorySegment embd$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$146.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void embd$set(MemorySegment seg, long index, MemorySegment x) {
        constants$146.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pos$VH() {
        return constants$146.const$2;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * int* pos;
     * }
     */
    public static MemorySegment pos$get(MemorySegment seg) {
        return (MemorySegment)constants$146.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * int* pos;
     * }
     */
    public static void pos$set(MemorySegment seg, MemorySegment x) {
        constants$146.const$2.set(seg, x);
    }
    public static MemorySegment pos$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$146.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pos$set(MemorySegment seg, long index, MemorySegment x) {
        constants$146.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle n_seq_id$VH() {
        return constants$146.const$3;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * int* n_seq_id;
     * }
     */
    public static MemorySegment n_seq_id$get(MemorySegment seg) {
        return (MemorySegment)constants$146.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * int* n_seq_id;
     * }
     */
    public static void n_seq_id$set(MemorySegment seg, MemorySegment x) {
        constants$146.const$3.set(seg, x);
    }
    public static MemorySegment n_seq_id$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$146.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void n_seq_id$set(MemorySegment seg, long index, MemorySegment x) {
        constants$146.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle seq_id$VH() {
        return constants$146.const$4;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * int** seq_id;
     * }
     */
    public static MemorySegment seq_id$get(MemorySegment seg) {
        return (MemorySegment)constants$146.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * int** seq_id;
     * }
     */
    public static void seq_id$set(MemorySegment seg, MemorySegment x) {
        constants$146.const$4.set(seg, x);
    }
    public static MemorySegment seq_id$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$146.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void seq_id$set(MemorySegment seg, long index, MemorySegment x) {
        constants$146.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle logits$VH() {
        return constants$146.const$5;
    }
    /**
     * Getter for field:
     * {@snippet lang=c :
     * signed char* logits;
     * }
     */
    public static MemorySegment logits$get(MemorySegment seg) {
        return (MemorySegment)constants$146.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet lang=c :
     * signed char* logits;
     * }
     */
    public static void logits$set(MemorySegment seg, MemorySegment x) {
        constants$146.const$5.set(seg, x);
    }
    public static MemorySegment logits$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$146.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void logits$set(MemorySegment seg, long index, MemorySegment x) {
        constants$146.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


