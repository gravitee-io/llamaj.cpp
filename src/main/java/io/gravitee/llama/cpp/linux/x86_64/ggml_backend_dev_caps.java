// Generated by jextract

package io.gravitee.llama.cpp.linux.x86_64;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct ggml_backend_dev_caps {
 *     _Bool async;
 *     _Bool host_buffer;
 *     _Bool buffer_from_host_ptr;
 *     _Bool events;
 * };
 * }
 */
public class ggml_backend_dev_caps {

    public static MemoryLayout $LAYOUT() {
        return constants$106.const$3;
    }
    public static VarHandle async$VH() {
        return constants$106.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool async;
     * }
     */
    public static boolean async$get(MemorySegment seg) {
        return (boolean)constants$106.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool async;
     * }
     */
    public static void async$set(MemorySegment seg, boolean x) {
        constants$106.const$4.set(seg, x);
    }
    public static boolean async$get(MemorySegment seg, long index) {
        return (boolean)constants$106.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void async$set(MemorySegment seg, long index, boolean x) {
        constants$106.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle host_buffer$VH() {
        return constants$106.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool host_buffer;
     * }
     */
    public static boolean host_buffer$get(MemorySegment seg) {
        return (boolean)constants$106.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool host_buffer;
     * }
     */
    public static void host_buffer$set(MemorySegment seg, boolean x) {
        constants$106.const$5.set(seg, x);
    }
    public static boolean host_buffer$get(MemorySegment seg, long index) {
        return (boolean)constants$106.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void host_buffer$set(MemorySegment seg, long index, boolean x) {
        constants$106.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle buffer_from_host_ptr$VH() {
        return constants$107.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool buffer_from_host_ptr;
     * }
     */
    public static boolean buffer_from_host_ptr$get(MemorySegment seg) {
        return (boolean)constants$107.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool buffer_from_host_ptr;
     * }
     */
    public static void buffer_from_host_ptr$set(MemorySegment seg, boolean x) {
        constants$107.const$0.set(seg, x);
    }
    public static boolean buffer_from_host_ptr$get(MemorySegment seg, long index) {
        return (boolean)constants$107.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void buffer_from_host_ptr$set(MemorySegment seg, long index, boolean x) {
        constants$107.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle events$VH() {
        return constants$107.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool events;
     * }
     */
    public static boolean events$get(MemorySegment seg) {
        return (boolean)constants$107.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool events;
     * }
     */
    public static void events$set(MemorySegment seg, boolean x) {
        constants$107.const$1.set(seg, x);
    }
    public static boolean events$get(MemorySegment seg, long index) {
        return (boolean)constants$107.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void events$set(MemorySegment seg, long index, boolean x) {
        constants$107.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


