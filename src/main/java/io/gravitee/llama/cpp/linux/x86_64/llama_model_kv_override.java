// Generated by jextract

package io.gravitee.llama.cpp.linux.x86_64;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct llama_model_kv_override {
 *     enum llama_model_kv_override_type tag;
 *     char key[128];
 *     union {
 *         int64_t val_i64;
 *         double val_f64;
 *         _Bool val_bool;
 *         char val_str[128];
 *     };
 * };
 * }
 */
public class llama_model_kv_override {

    public static MemoryLayout $LAYOUT() {
        return constants$138.const$4;
    }
    public static VarHandle tag$VH() {
        return constants$138.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum llama_model_kv_override_type tag;
     * }
     */
    public static int tag$get(MemorySegment seg) {
        return (int)constants$138.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum llama_model_kv_override_type tag;
     * }
     */
    public static void tag$set(MemorySegment seg, int x) {
        constants$138.const$5.set(seg, x);
    }
    public static int tag$get(MemorySegment seg, long index) {
        return (int)constants$138.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void tag$set(MemorySegment seg, long index, int x) {
        constants$138.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment key$slice(MemorySegment seg) {
        return seg.asSlice(4, 128);
    }
    public static VarHandle val_i64$VH() {
        return constants$139.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t val_i64;
     * }
     */
    public static long val_i64$get(MemorySegment seg) {
        return (long)constants$139.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t val_i64;
     * }
     */
    public static void val_i64$set(MemorySegment seg, long x) {
        constants$139.const$0.set(seg, x);
    }
    public static long val_i64$get(MemorySegment seg, long index) {
        return (long)constants$139.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void val_i64$set(MemorySegment seg, long index, long x) {
        constants$139.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle val_f64$VH() {
        return constants$139.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double val_f64;
     * }
     */
    public static double val_f64$get(MemorySegment seg) {
        return (double)constants$139.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double val_f64;
     * }
     */
    public static void val_f64$set(MemorySegment seg, double x) {
        constants$139.const$1.set(seg, x);
    }
    public static double val_f64$get(MemorySegment seg, long index) {
        return (double)constants$139.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void val_f64$set(MemorySegment seg, long index, double x) {
        constants$139.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle val_bool$VH() {
        return constants$139.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool val_bool;
     * }
     */
    public static boolean val_bool$get(MemorySegment seg) {
        return (boolean)constants$139.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool val_bool;
     * }
     */
    public static void val_bool$set(MemorySegment seg, boolean x) {
        constants$139.const$2.set(seg, x);
    }
    public static boolean val_bool$get(MemorySegment seg, long index) {
        return (boolean)constants$139.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void val_bool$set(MemorySegment seg, long index, boolean x) {
        constants$139.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment val_str$slice(MemorySegment seg) {
        return seg.asSlice(136, 128);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


