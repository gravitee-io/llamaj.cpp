// Generated by jextract

package io.gravitee.llama.cpp.linux.x86_64;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct llama_sampler {
 *     struct llama_sampler_i* iface;
 *     llama_sampler_context_t ctx;
 * };
 * }
 */
public class llama_sampler {

    public static MemoryLayout $LAYOUT() {
        return constants$186.const$4;
    }
    public static VarHandle iface$VH() {
        return constants$186.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct llama_sampler_i* iface;
     * }
     */
    public static MemorySegment iface$get(MemorySegment seg) {
        return (MemorySegment)constants$186.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct llama_sampler_i* iface;
     * }
     */
    public static void iface$set(MemorySegment seg, MemorySegment x) {
        constants$186.const$5.set(seg, x);
    }
    public static MemorySegment iface$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$186.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void iface$set(MemorySegment seg, long index, MemorySegment x) {
        constants$186.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ctx$VH() {
        return constants$187.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * llama_sampler_context_t ctx;
     * }
     */
    public static MemorySegment ctx$get(MemorySegment seg) {
        return (MemorySegment)constants$187.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * llama_sampler_context_t ctx;
     * }
     */
    public static void ctx$set(MemorySegment seg, MemorySegment x) {
        constants$187.const$0.set(seg, x);
    }
    public static MemorySegment ctx$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$187.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ctx$set(MemorySegment seg, long index, MemorySegment x) {
        constants$187.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


