// Generated by jextract

package io.gravitee.llama.cpp.linux.x86_64;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct ggml_tallocr {
 *     ggml_backend_buffer_t buffer;
 *     void* base;
 *     size_t alignment;
 *     size_t offset;
 * };
 * }
 */
public class ggml_tallocr {

    public static MemoryLayout $LAYOUT() {
        return constants$94.const$2;
    }
    public static VarHandle buffer$VH() {
        return constants$94.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ggml_backend_buffer_t buffer;
     * }
     */
    public static MemorySegment buffer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$94.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ggml_backend_buffer_t buffer;
     * }
     */
    public static void buffer$set(MemorySegment seg, MemorySegment x) {
        constants$94.const$3.set(seg, x);
    }
    public static MemorySegment buffer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$94.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void buffer$set(MemorySegment seg, long index, MemorySegment x) {
        constants$94.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle base$VH() {
        return constants$94.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* base;
     * }
     */
    public static MemorySegment base$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$94.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* base;
     * }
     */
    public static void base$set(MemorySegment seg, MemorySegment x) {
        constants$94.const$4.set(seg, x);
    }
    public static MemorySegment base$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$94.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void base$set(MemorySegment seg, long index, MemorySegment x) {
        constants$94.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle alignment$VH() {
        return constants$94.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t alignment;
     * }
     */
    public static long alignment$get(MemorySegment seg) {
        return (long)constants$94.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t alignment;
     * }
     */
    public static void alignment$set(MemorySegment seg, long x) {
        constants$94.const$5.set(seg, x);
    }
    public static long alignment$get(MemorySegment seg, long index) {
        return (long)constants$94.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void alignment$set(MemorySegment seg, long index, long x) {
        constants$94.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle offset$VH() {
        return constants$95.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t offset;
     * }
     */
    public static long offset$get(MemorySegment seg) {
        return (long)constants$95.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t offset;
     * }
     */
    public static void offset$set(MemorySegment seg, long x) {
        constants$95.const$0.set(seg, x);
    }
    public static long offset$get(MemorySegment seg, long index) {
        return (long)constants$95.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void offset$set(MemorySegment seg, long index, long x) {
        constants$95.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


