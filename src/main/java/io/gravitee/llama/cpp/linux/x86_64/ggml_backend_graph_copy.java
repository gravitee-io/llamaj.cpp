// Generated by jextract

package io.gravitee.llama.cpp.linux.x86_64;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct ggml_backend_graph_copy {
 *     ggml_backend_buffer_t buffer;
 *     struct ggml_context* ctx_allocated;
 *     struct ggml_context* ctx_unallocated;
 *     struct ggml_cgraph* graph;
 * };
 * }
 */
public class ggml_backend_graph_copy {

    public static MemoryLayout $LAYOUT() {
        return constants$121.const$2;
    }
    public static VarHandle buffer$VH() {
        return constants$121.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ggml_backend_buffer_t buffer;
     * }
     */
    public static MemorySegment buffer$get(MemorySegment seg) {
        return (MemorySegment)constants$121.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ggml_backend_buffer_t buffer;
     * }
     */
    public static void buffer$set(MemorySegment seg, MemorySegment x) {
        constants$121.const$3.set(seg, x);
    }
    public static MemorySegment buffer$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$121.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void buffer$set(MemorySegment seg, long index, MemorySegment x) {
        constants$121.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ctx_allocated$VH() {
        return constants$121.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct ggml_context* ctx_allocated;
     * }
     */
    public static MemorySegment ctx_allocated$get(MemorySegment seg) {
        return (MemorySegment)constants$121.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct ggml_context* ctx_allocated;
     * }
     */
    public static void ctx_allocated$set(MemorySegment seg, MemorySegment x) {
        constants$121.const$4.set(seg, x);
    }
    public static MemorySegment ctx_allocated$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$121.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void ctx_allocated$set(MemorySegment seg, long index, MemorySegment x) {
        constants$121.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ctx_unallocated$VH() {
        return constants$121.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct ggml_context* ctx_unallocated;
     * }
     */
    public static MemorySegment ctx_unallocated$get(MemorySegment seg) {
        return (MemorySegment)constants$121.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct ggml_context* ctx_unallocated;
     * }
     */
    public static void ctx_unallocated$set(MemorySegment seg, MemorySegment x) {
        constants$121.const$5.set(seg, x);
    }
    public static MemorySegment ctx_unallocated$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$121.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ctx_unallocated$set(MemorySegment seg, long index, MemorySegment x) {
        constants$121.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle graph$VH() {
        return constants$122.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct ggml_cgraph* graph;
     * }
     */
    public static MemorySegment graph$get(MemorySegment seg) {
        return (MemorySegment)constants$122.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct ggml_cgraph* graph;
     * }
     */
    public static void graph$set(MemorySegment seg, MemorySegment x) {
        constants$122.const$0.set(seg, x);
    }
    public static MemorySegment graph$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$122.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void graph$set(MemorySegment seg, long index, MemorySegment x) {
        constants$122.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


