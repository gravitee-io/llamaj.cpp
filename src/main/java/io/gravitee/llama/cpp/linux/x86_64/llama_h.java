// Generated by jextract

package io.gravitee.llama.cpp.linux.x86_64;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class llama_h extends llama_h_1 {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfLong C_LONG = JAVA_LONG;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * #define true 1
     * }
     */
    public static int true_() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define false 0
     * }
     */
    public static int false_() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __bool_true_false_are_defined 1
     * }
     */
    public static int __bool_true_false_are_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _STDINT_H 1
     * }
     */
    public static int _STDINT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _FEATURES_H 1
     * }
     */
    public static int _FEATURES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _DEFAULT_SOURCE 1
     * }
     */
    public static int _DEFAULT_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_ISOC2X 0
     * }
     */
    public static int __GLIBC_USE_ISOC2X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC11 1
     * }
     */
    public static int __USE_ISOC11() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC99 1
     * }
     */
    public static int __USE_ISOC99() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC95 1
     * }
     */
    public static int __USE_ISOC95() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX_IMPLICITLY 1
     * }
     */
    public static int __USE_POSIX_IMPLICITLY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SOURCE 1
     * }
     */
    public static int _POSIX_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX 1
     * }
     */
    public static int __USE_POSIX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX2 1
     * }
     */
    public static int __USE_POSIX2() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX199309 1
     * }
     */
    public static int __USE_POSIX199309() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX199506 1
     * }
     */
    public static int __USE_POSIX199506() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_XOPEN2K 1
     * }
     */
    public static int __USE_XOPEN2K() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_XOPEN2K8 1
     * }
     */
    public static int __USE_XOPEN2K8() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _ATFILE_SOURCE 1
     * }
     */
    public static int _ATFILE_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __WORDSIZE_TIME64_COMPAT32 1
     * }
     */
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __SYSCALL_WORDSIZE 64
     * }
     */
    public static int __SYSCALL_WORDSIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __USE_MISC 1
     * }
     */
    public static int __USE_MISC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ATFILE 1
     * }
     */
    public static int __USE_ATFILE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_FORTIFY_LEVEL 0
     * }
     */
    public static int __USE_FORTIFY_LEVEL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_DEPRECATED_GETS 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_DEPRECATED_SCANF 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_C2X_STRTOL 0
     * }
     */
    public static int __GLIBC_USE_C2X_STRTOL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _STDC_PREDEF_H 1
     * }
     */
    public static int _STDC_PREDEF_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_559__ 1
     * }
     */
    public static int __STDC_IEC_559__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_559_COMPLEX__ 1
     * }
     */
    public static int __STDC_IEC_559_COMPLEX__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GNU_LIBRARY__ 6
     * }
     */
    public static int __GNU_LIBRARY__() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define __GLIBC__ 2
     * }
     */
    public static int __GLIBC__() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_MINOR__ 39
     * }
     */
    public static int __GLIBC_MINOR__() {
        return (int)39L;
    }
    /**
     * {@snippet :
     * #define _SYS_CDEFS_H 1
     * }
     */
    public static int _SYS_CDEFS_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __glibc_c99_flexarr_available 1
     * }
     */
    public static int __glibc_c99_flexarr_available() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI 0
     * }
     */
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_GENERIC_SELECTION 1
     * }
     */
    public static int __HAVE_GENERIC_SELECTION() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_LIB_EXT2 0
     * }
     */
    public static int __GLIBC_USE_LIB_EXT2() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_TYPES_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _BITS_TYPES_H 1
     * }
     */
    public static int _BITS_TYPES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_TYPESIZES_H 1
     * }
     */
    public static int _BITS_TYPESIZES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __OFF_T_MATCHES_OFF64_T 1
     * }
     */
    public static int __OFF_T_MATCHES_OFF64_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __INO_T_MATCHES_INO64_T 1
     * }
     */
    public static int __INO_T_MATCHES_INO64_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __RLIM_T_MATCHES_RLIM64_T 1
     * }
     */
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STATFS_MATCHES_STATFS64 1
     * }
     */
    public static int __STATFS_MATCHES_STATFS64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 1
     * }
     */
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __FD_SETSIZE 1024
     * }
     */
    public static int __FD_SETSIZE() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define _BITS_TIME64_H 1
     * }
     */
    public static int _BITS_TIME64_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_WCHAR_H 1
     * }
     */
    public static int _BITS_WCHAR_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_STDINT_INTN_H 1
     * }
     */
    public static int _BITS_STDINT_INTN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_STDINT_UINTN_H 1
     * }
     */
    public static int _BITS_STDINT_UINTN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_STDINT_LEAST_H 1
     * }
     */
    public static int _BITS_STDINT_LEAST_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _STDIO_H 1
     * }
     */
    public static int _STDIO_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GNUC_VA_LIST 1
     * }
     */
    public static int __GNUC_VA_LIST() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _____fpos_t_defined 1
     * }
     */
    public static int _____fpos_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define ____mbstate_t_defined 1
     * }
     */
    public static int ____mbstate_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _____fpos64_t_defined 1
     * }
     */
    public static int _____fpos64_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define ____FILE_defined 1
     * }
     */
    public static int ____FILE_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __FILE_defined 1
     * }
     */
    public static int __FILE_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __struct_FILE_defined 1
     * }
     */
    public static int __struct_FILE_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _IO_EOF_SEEN 16
     * }
     */
    public static int _IO_EOF_SEEN() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define _IO_ERR_SEEN 32
     * }
     */
    public static int _IO_ERR_SEEN() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _IO_USER_LOCK 32768
     * }
     */
    public static int _IO_USER_LOCK() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define __cookie_io_functions_t_defined 1
     * }
     */
    public static int __cookie_io_functions_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _IOFBF 0
     * }
     */
    public static int _IOFBF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _IOLBF 1
     * }
     */
    public static int _IOLBF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _IONBF 2
     * }
     */
    public static int _IONBF() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define BUFSIZ 8192
     * }
     */
    public static int BUFSIZ() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define SEEK_SET 0
     * }
     */
    public static int SEEK_SET() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SEEK_CUR 1
     * }
     */
    public static int SEEK_CUR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SEEK_END 2
     * }
     */
    public static int SEEK_END() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define L_tmpnam 20
     * }
     */
    public static int L_tmpnam() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define TMP_MAX 238328
     * }
     */
    public static int TMP_MAX() {
        return (int)238328L;
    }
    /**
     * {@snippet :
     * #define _BITS_STDIO_LIM_H 1
     * }
     */
    public static int _BITS_STDIO_LIM_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FILENAME_MAX 4096
     * }
     */
    public static int FILENAME_MAX() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define L_ctermid 9
     * }
     */
    public static int L_ctermid() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define FOPEN_MAX 16
     * }
     */
    public static int FOPEN_MAX() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT128 0
     * }
     */
    public static int __HAVE_FLOAT128() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT128 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT64X 1
     * }
     */
    public static int __HAVE_FLOAT64X() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT64X_LONG_DOUBLE 1
     * }
     */
    public static int __HAVE_FLOAT64X_LONG_DOUBLE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT16 0
     * }
     */
    public static int __HAVE_FLOAT16() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT32 1
     * }
     */
    public static int __HAVE_FLOAT32() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT64 1
     * }
     */
    public static int __HAVE_FLOAT64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT32X 1
     * }
     */
    public static int __HAVE_FLOAT32X() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT128X 0
     * }
     */
    public static int __HAVE_FLOAT128X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT32 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT32() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT64 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT64() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT32X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT32X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT64X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT64X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOATN_NOT_TYPEDEF 0
     * }
     */
    public static int __HAVE_FLOATN_NOT_TYPEDEF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define GGML_FILE_MAGIC 1734831468
     * }
     */
    public static int GGML_FILE_MAGIC() {
        return (int)1734831468L;
    }
    /**
     * {@snippet :
     * #define GGML_FILE_VERSION 2
     * }
     */
    public static int GGML_FILE_VERSION() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define GGML_QNT_VERSION 2
     * }
     */
    public static int GGML_QNT_VERSION() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define GGML_QNT_VERSION_FACTOR 1000
     * }
     */
    public static int GGML_QNT_VERSION_FACTOR() {
        return (int)1000L;
    }
    /**
     * {@snippet :
     * #define GGML_MAX_DIMS 4
     * }
     */
    public static int GGML_MAX_DIMS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define GGML_MAX_PARAMS 2048
     * }
     */
    public static int GGML_MAX_PARAMS() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define GGML_MAX_SRC 10
     * }
     */
    public static int GGML_MAX_SRC() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define GGML_MAX_N_THREADS 512
     * }
     */
    public static int GGML_MAX_N_THREADS() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define GGML_MAX_OP_PARAMS 64
     * }
     */
    public static int GGML_MAX_OP_PARAMS() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define GGML_MAX_NAME 64
     * }
     */
    public static int GGML_MAX_NAME() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define GGML_DEFAULT_N_THREADS 4
     * }
     */
    public static int GGML_DEFAULT_N_THREADS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define GGML_DEFAULT_GRAPH_SIZE 2048
     * }
     */
    public static int GGML_DEFAULT_GRAPH_SIZE() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define GGML_MEM_ALIGN 16
     * }
     */
    public static int GGML_MEM_ALIGN() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define GGML_EXIT_SUCCESS 0
     * }
     */
    public static int GGML_EXIT_SUCCESS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define GGML_EXIT_ABORTED 1
     * }
     */
    public static int GGML_EXIT_ABORTED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define GGML_ROPE_TYPE_NEOX 2
     * }
     */
    public static int GGML_ROPE_TYPE_NEOX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define GGML_ROPE_TYPE_MROPE 8
     * }
     */
    public static int GGML_ROPE_TYPE_MROPE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define GGML_ROPE_TYPE_VISION 24
     * }
     */
    public static int GGML_ROPE_TYPE_VISION() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * #define GGML_KQ_MASK_PAD 64
     * }
     */
    public static int GGML_KQ_MASK_PAD() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define LLAMA_SESSION_VERSION 9
     * }
     */
    public static int LLAMA_SESSION_VERSION() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define LLAMA_STATE_SEQ_VERSION 2
     * }
     */
    public static int LLAMA_STATE_SEQ_VERSION() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * typedef long ptrdiff_t;
     * }
     */
    public static final OfLong ptrdiff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long size_t;
     * }
     */
    public static final OfLong size_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int wchar_t;
     * }
     */
    public static final OfInt wchar_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned char __u_char;
     * }
     */
    public static final OfByte __u_char = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short __u_short;
     * }
     */
    public static final OfShort __u_short = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int __u_int;
     * }
     */
    public static final OfInt __u_int = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __u_long;
     * }
     */
    public static final OfLong __u_long = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char __int8_t;
     * }
     */
    public static final OfByte __int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned char __uint8_t;
     * }
     */
    public static final OfByte __uint8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short __int16_t;
     * }
     */
    public static final OfShort __int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short __uint16_t;
     * }
     */
    public static final OfShort __uint16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int __int32_t;
     * }
     */
    public static final OfInt __int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __uint32_t;
     * }
     */
    public static final OfInt __uint32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __int64_t;
     * }
     */
    public static final OfLong __int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __uint64_t;
     * }
     */
    public static final OfLong __uint64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char __int_least8_t;
     * }
     */
    public static final OfByte __int_least8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned char __uint_least8_t;
     * }
     */
    public static final OfByte __uint_least8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short __int_least16_t;
     * }
     */
    public static final OfShort __int_least16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short __uint_least16_t;
     * }
     */
    public static final OfShort __uint_least16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int __int_least32_t;
     * }
     */
    public static final OfInt __int_least32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __uint_least32_t;
     * }
     */
    public static final OfInt __uint_least32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __int_least64_t;
     * }
     */
    public static final OfLong __int_least64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __uint_least64_t;
     * }
     */
    public static final OfLong __uint_least64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __quad_t;
     * }
     */
    public static final OfLong __quad_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __u_quad_t;
     * }
     */
    public static final OfLong __u_quad_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __intmax_t;
     * }
     */
    public static final OfLong __intmax_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __uintmax_t;
     * }
     */
    public static final OfLong __uintmax_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __dev_t;
     * }
     */
    public static final OfLong __dev_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __uid_t;
     * }
     */
    public static final OfInt __uid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __gid_t;
     * }
     */
    public static final OfInt __gid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __ino_t;
     * }
     */
    public static final OfLong __ino_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __ino64_t;
     * }
     */
    public static final OfLong __ino64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __mode_t;
     * }
     */
    public static final OfInt __mode_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __nlink_t;
     * }
     */
    public static final OfLong __nlink_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __off_t;
     * }
     */
    public static final OfLong __off_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __off64_t;
     * }
     */
    public static final OfLong __off64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __pid_t;
     * }
     */
    public static final OfInt __pid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __clock_t;
     * }
     */
    public static final OfLong __clock_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __rlim_t;
     * }
     */
    public static final OfLong __rlim_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __rlim64_t;
     * }
     */
    public static final OfLong __rlim64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __id_t;
     * }
     */
    public static final OfInt __id_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __time_t;
     * }
     */
    public static final OfLong __time_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __useconds_t;
     * }
     */
    public static final OfInt __useconds_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __suseconds_t;
     * }
     */
    public static final OfLong __suseconds_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __suseconds64_t;
     * }
     */
    public static final OfLong __suseconds64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __daddr_t;
     * }
     */
    public static final OfInt __daddr_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __key_t;
     * }
     */
    public static final OfInt __key_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __clockid_t;
     * }
     */
    public static final OfInt __clockid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef void* __timer_t;
     * }
     */
    public static final AddressLayout __timer_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef long __blksize_t;
     * }
     */
    public static final OfLong __blksize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __blkcnt_t;
     * }
     */
    public static final OfLong __blkcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __blkcnt64_t;
     * }
     */
    public static final OfLong __blkcnt64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __fsblkcnt_t;
     * }
     */
    public static final OfLong __fsblkcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __fsblkcnt64_t;
     * }
     */
    public static final OfLong __fsblkcnt64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __fsfilcnt_t;
     * }
     */
    public static final OfLong __fsfilcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __fsfilcnt64_t;
     * }
     */
    public static final OfLong __fsfilcnt64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __fsword_t;
     * }
     */
    public static final OfLong __fsword_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __ssize_t;
     * }
     */
    public static final OfLong __ssize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __syscall_slong_t;
     * }
     */
    public static final OfLong __syscall_slong_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __syscall_ulong_t;
     * }
     */
    public static final OfLong __syscall_ulong_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __loff_t;
     * }
     */
    public static final OfLong __loff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef char* __caddr_t;
     * }
     */
    public static final AddressLayout __caddr_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef long __intptr_t;
     * }
     */
    public static final OfLong __intptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __socklen_t;
     * }
     */
    public static final OfInt __socklen_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __sig_atomic_t;
     * }
     */
    public static final OfInt __sig_atomic_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef signed char int8_t;
     * }
     */
    public static final OfByte int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short int16_t;
     * }
     */
    public static final OfShort int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int int32_t;
     * }
     */
    public static final OfInt int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long int64_t;
     * }
     */
    public static final OfLong int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char uint8_t;
     * }
     */
    public static final OfByte uint8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short uint16_t;
     * }
     */
    public static final OfShort uint16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int uint32_t;
     * }
     */
    public static final OfInt uint32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long uint64_t;
     * }
     */
    public static final OfLong uint64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char int_least8_t;
     * }
     */
    public static final OfByte int_least8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short int_least16_t;
     * }
     */
    public static final OfShort int_least16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int int_least32_t;
     * }
     */
    public static final OfInt int_least32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long int_least64_t;
     * }
     */
    public static final OfLong int_least64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char uint_least8_t;
     * }
     */
    public static final OfByte uint_least8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short uint_least16_t;
     * }
     */
    public static final OfShort uint_least16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int uint_least32_t;
     * }
     */
    public static final OfInt uint_least32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long uint_least64_t;
     * }
     */
    public static final OfLong uint_least64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char int_fast8_t;
     * }
     */
    public static final OfByte int_fast8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef long int_fast16_t;
     * }
     */
    public static final OfLong int_fast16_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long int_fast32_t;
     * }
     */
    public static final OfLong int_fast32_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long int_fast64_t;
     * }
     */
    public static final OfLong int_fast64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char uint_fast8_t;
     * }
     */
    public static final OfByte uint_fast8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned long uint_fast16_t;
     * }
     */
    public static final OfLong uint_fast16_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long uint_fast32_t;
     * }
     */
    public static final OfLong uint_fast32_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long uint_fast64_t;
     * }
     */
    public static final OfLong uint_fast64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long intptr_t;
     * }
     */
    public static final OfLong intptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long uintptr_t;
     * }
     */
    public static final OfLong uintptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long intmax_t;
     * }
     */
    public static final OfLong intmax_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long uintmax_t;
     * }
     */
    public static final OfLong uintmax_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long off_t;
     * }
     */
    public static final OfLong off_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long ssize_t;
     * }
     */
    public static final OfLong ssize_t = JAVA_LONG;
    public static MemoryLayout stdin$LAYOUT() {
        return RuntimeHelper.POINTER;
    }
    public static VarHandle stdin$VH() {
        return constants$9.const$0;
    }
    public static MemorySegment stdin$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$9.const$1,"stdin");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * FILE* stdin;
     * }
     */
    public static MemorySegment stdin$get() {
        return (MemorySegment) constants$9.const$0.get(RuntimeHelper.requireNonNull(constants$9.const$1, "stdin"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * FILE* stdin;
     * }
     */
    public static void stdin$set(MemorySegment x) {
        constants$9.const$0.set(RuntimeHelper.requireNonNull(constants$9.const$1, "stdin"), x);
    }
    public static MemoryLayout stdout$LAYOUT() {
        return RuntimeHelper.POINTER;
    }
    public static VarHandle stdout$VH() {
        return constants$9.const$0;
    }
    public static MemorySegment stdout$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$9.const$2,"stdout");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * FILE* stdout;
     * }
     */
    public static MemorySegment stdout$get() {
        return (MemorySegment) constants$9.const$0.get(RuntimeHelper.requireNonNull(constants$9.const$2, "stdout"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * FILE* stdout;
     * }
     */
    public static void stdout$set(MemorySegment x) {
        constants$9.const$0.set(RuntimeHelper.requireNonNull(constants$9.const$2, "stdout"), x);
    }
    public static MemoryLayout stderr$LAYOUT() {
        return RuntimeHelper.POINTER;
    }
    public static VarHandle stderr$VH() {
        return constants$9.const$0;
    }
    public static MemorySegment stderr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$9.const$3,"stderr");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * FILE* stderr;
     * }
     */
    public static MemorySegment stderr$get() {
        return (MemorySegment) constants$9.const$0.get(RuntimeHelper.requireNonNull(constants$9.const$3, "stderr"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * FILE* stderr;
     * }
     */
    public static void stderr$set(MemorySegment x) {
        constants$9.const$0.set(RuntimeHelper.requireNonNull(constants$9.const$3, "stderr"), x);
    }
    public static MethodHandle remove$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$4,"remove");
    }
    /**
     * {@snippet :
     * int remove(char* __filename);
     * }
     */
    public static int remove(MemorySegment __filename) {
        var mh$ = remove$MH();
        try {
            return (int)mh$.invokeExact(__filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rename$MH() {
        return RuntimeHelper.requireNonNull(constants$9.const$6,"rename");
    }
    /**
     * {@snippet :
     * int rename(char* __old, char* __new);
     * }
     */
    public static int rename(MemorySegment __old, MemorySegment __new) {
        var mh$ = rename$MH();
        try {
            return (int)mh$.invokeExact(__old, __new);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle renameat$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$1,"renameat");
    }
    /**
     * {@snippet :
     * int renameat(int __oldfd, char* __old, int __newfd, char* __new);
     * }
     */
    public static int renameat(int __oldfd, MemorySegment __old, int __newfd, MemorySegment __new) {
        var mh$ = renameat$MH();
        try {
            return (int)mh$.invokeExact(__oldfd, __old, __newfd, __new);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fclose$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$2,"fclose");
    }
    /**
     * {@snippet :
     * int fclose(FILE* __stream);
     * }
     */
    public static int fclose(MemorySegment __stream) {
        var mh$ = fclose$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpfile$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$4,"tmpfile");
    }
    /**
     * {@snippet :
     * FILE* tmpfile();
     * }
     */
    public static MemorySegment tmpfile() {
        var mh$ = tmpfile$MH();
        try {
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpnam$MH() {
        return RuntimeHelper.requireNonNull(constants$10.const$6,"tmpnam");
    }
    /**
     * {@snippet :
     * char* tmpnam(char [20]);
     * }
     */
    public static MemorySegment tmpnam(MemorySegment x0) {
        var mh$ = tmpnam$MH();
        try {
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpnam_r$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$0,"tmpnam_r");
    }
    /**
     * {@snippet :
     * char* tmpnam_r(char __s[20]);
     * }
     */
    public static MemorySegment tmpnam_r(MemorySegment __s) {
        var mh$ = tmpnam_r$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tempnam$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$2,"tempnam");
    }
    /**
     * {@snippet :
     * char* tempnam(char* __dir, char* __pfx);
     * }
     */
    public static MemorySegment tempnam(MemorySegment __dir, MemorySegment __pfx) {
        var mh$ = tempnam$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__dir, __pfx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fflush$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$3,"fflush");
    }
    /**
     * {@snippet :
     * int fflush(FILE* __stream);
     * }
     */
    public static int fflush(MemorySegment __stream) {
        var mh$ = fflush$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fflush_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$4,"fflush_unlocked");
    }
    /**
     * {@snippet :
     * int fflush_unlocked(FILE* __stream);
     * }
     */
    public static int fflush_unlocked(MemorySegment __stream) {
        var mh$ = fflush_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fopen$MH() {
        return RuntimeHelper.requireNonNull(constants$11.const$5,"fopen");
    }
    /**
     * {@snippet :
     * FILE* fopen(char* __filename, char* __modes);
     * }
     */
    public static MemorySegment fopen(MemorySegment __filename, MemorySegment __modes) {
        var mh$ = fopen$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__filename, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle freopen$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$1,"freopen");
    }
    /**
     * {@snippet :
     * FILE* freopen(char* __filename, char* __modes, FILE* __stream);
     * }
     */
    public static MemorySegment freopen(MemorySegment __filename, MemorySegment __modes, MemorySegment __stream) {
        var mh$ = freopen$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__filename, __modes, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdopen$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$3,"fdopen");
    }
    /**
     * {@snippet :
     * FILE* fdopen(int __fd, char* __modes);
     * }
     */
    public static MemorySegment fdopen(int __fd, MemorySegment __modes) {
        var mh$ = fdopen$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__fd, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fopencookie$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$5,"fopencookie");
    }
    /**
     * {@snippet :
     * FILE* fopencookie(void* __magic_cookie, char* __modes, cookie_io_functions_t __io_funcs);
     * }
     */
    public static MemorySegment fopencookie(MemorySegment __magic_cookie, MemorySegment __modes, MemorySegment __io_funcs) {
        var mh$ = fopencookie$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__magic_cookie, __modes, __io_funcs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmemopen$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$1,"fmemopen");
    }
    /**
     * {@snippet :
     * FILE* fmemopen(void* __s, size_t __len, char* __modes);
     * }
     */
    public static MemorySegment fmemopen(MemorySegment __s, long __len, MemorySegment __modes) {
        var mh$ = fmemopen$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__s, __len, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle open_memstream$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$2,"open_memstream");
    }
    /**
     * {@snippet :
     * FILE* open_memstream(char** __bufloc, size_t* __sizeloc);
     * }
     */
    public static MemorySegment open_memstream(MemorySegment __bufloc, MemorySegment __sizeloc) {
        var mh$ = open_memstream$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__bufloc, __sizeloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$4,"setbuf");
    }
    /**
     * {@snippet :
     * void setbuf(FILE* __stream, char* __buf);
     * }
     */
    public static void setbuf(MemorySegment __stream, MemorySegment __buf) {
        var mh$ = setbuf$MH();
        try {
            mh$.invokeExact(__stream, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setvbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$6,"setvbuf");
    }
    /**
     * {@snippet :
     * int setvbuf(FILE* __stream, char* __buf, int __modes, size_t __n);
     * }
     */
    public static int setvbuf(MemorySegment __stream, MemorySegment __buf, int __modes, long __n) {
        var mh$ = setvbuf$MH();
        try {
            return (int)mh$.invokeExact(__stream, __buf, __modes, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$1,"setbuffer");
    }
    /**
     * {@snippet :
     * void setbuffer(FILE* __stream, char* __buf, size_t __size);
     * }
     */
    public static void setbuffer(MemorySegment __stream, MemorySegment __buf, long __size) {
        var mh$ = setbuffer$MH();
        try {
            mh$.invokeExact(__stream, __buf, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setlinebuf$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$3,"setlinebuf");
    }
    /**
     * {@snippet :
     * void setlinebuf(FILE* __stream);
     * }
     */
    public static void setlinebuf(MemorySegment __stream) {
        var mh$ = setlinebuf$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$4,"fprintf");
    }
    /**
     * {@snippet :
     * int fprintf(FILE* __stream, char* __format,...);
     * }
     */
    public static int fprintf(MemorySegment __stream, MemorySegment __format, Object... x2) {
        var mh$ = fprintf$MH();
        try {
            return (int)mh$.invokeExact(__stream, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle printf$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$5,"printf");
    }
    /**
     * {@snippet :
     * int printf(char* __format,...);
     * }
     */
    public static int printf(MemorySegment __format, Object... x1) {
        var mh$ = printf$MH();
        try {
            return (int)mh$.invokeExact(__format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$0,"sprintf");
    }
    /**
     * {@snippet :
     * int sprintf(char* __s, char* __format,...);
     * }
     */
    public static int sprintf(MemorySegment __s, MemorySegment __format, Object... x2) {
        var mh$ = sprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$2,"vfprintf");
    }
    /**
     * {@snippet :
     * int vfprintf(FILE* __s, char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vfprintf(MemorySegment __s, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vfprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$3,"vprintf");
    }
    /**
     * {@snippet :
     * int vprintf(char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vprintf(MemorySegment __format, MemorySegment __arg) {
        var mh$ = vprintf$MH();
        try {
            return (int)mh$.invokeExact(__format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$4,"vsprintf");
    }
    /**
     * {@snippet :
     * int vsprintf(char* __s, char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vsprintf(MemorySegment __s, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vsprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle snprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$6,"snprintf");
    }
    /**
     * {@snippet :
     * int snprintf(char* __s, size_t __maxlen, char* __format,...);
     * }
     */
    public static int snprintf(MemorySegment __s, long __maxlen, MemorySegment __format, Object... x3) {
        var mh$ = snprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __maxlen, __format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsnprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$1,"vsnprintf");
    }
    /**
     * {@snippet :
     * int vsnprintf(char* __s, size_t __maxlen, char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vsnprintf(MemorySegment __s, long __maxlen, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vsnprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __maxlen, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vasprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$2,"vasprintf");
    }
    /**
     * {@snippet :
     * int vasprintf(char** __ptr, char* __f, __gnuc_va_list __arg);
     * }
     */
    public static int vasprintf(MemorySegment __ptr, MemorySegment __f, MemorySegment __arg) {
        var mh$ = vasprintf$MH();
        try {
            return (int)mh$.invokeExact(__ptr, __f, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __asprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$3,"__asprintf");
    }
    /**
     * {@snippet :
     * int __asprintf(char** __ptr, char* __fmt,...);
     * }
     */
    public static int __asprintf(MemorySegment __ptr, MemorySegment __fmt, Object... x2) {
        var mh$ = __asprintf$MH();
        try {
            return (int)mh$.invokeExact(__ptr, __fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$4,"asprintf");
    }
    /**
     * {@snippet :
     * int asprintf(char** __ptr, char* __fmt,...);
     * }
     */
    public static int asprintf(MemorySegment __ptr, MemorySegment __fmt, Object... x2) {
        var mh$ = asprintf$MH();
        try {
            return (int)mh$.invokeExact(__ptr, __fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vdprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$6,"vdprintf");
    }
    /**
     * {@snippet :
     * int vdprintf(int __fd, char* __fmt, __gnuc_va_list __arg);
     * }
     */
    public static int vdprintf(int __fd, MemorySegment __fmt, MemorySegment __arg) {
        var mh$ = vdprintf$MH();
        try {
            return (int)mh$.invokeExact(__fd, __fmt, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$1,"dprintf");
    }
    /**
     * {@snippet :
     * int dprintf(int __fd, char* __fmt,...);
     * }
     */
    public static int dprintf(int __fd, MemorySegment __fmt, Object... x2) {
        var mh$ = dprintf$MH();
        try {
            return (int)mh$.invokeExact(__fd, __fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$2,"fscanf");
    }
    /**
     * {@snippet :
     * int fscanf(FILE* __stream, char* __format,...);
     * }
     */
    public static int fscanf(MemorySegment __stream, MemorySegment __format, Object... x2) {
        var mh$ = fscanf$MH();
        try {
            return (int)mh$.invokeExact(__stream, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scanf$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$3,"scanf");
    }
    /**
     * {@snippet :
     * int scanf(char* __format,...);
     * }
     */
    public static int scanf(MemorySegment __format, Object... x1) {
        var mh$ = scanf$MH();
        try {
            return (int)mh$.invokeExact(__format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$4,"sscanf");
    }
    /**
     * {@snippet :
     * int sscanf(char* __s, char* __format,...);
     * }
     */
    public static int sscanf(MemorySegment __s, MemorySegment __format, Object... x2) {
        var mh$ = sscanf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef float _Float32;
     * }
     */
    public static final OfFloat _Float32 = JAVA_FLOAT;
    /**
     * {@snippet :
     * typedef double _Float64;
     * }
     */
    public static final OfDouble _Float64 = JAVA_DOUBLE;
    /**
     * {@snippet :
     * typedef double _Float32x;
     * }
     */
    public static final OfDouble _Float32x = JAVA_DOUBLE;
    public static MethodHandle vfscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$5,"vfscanf");
    }
    /**
     * {@snippet :
     * int vfscanf(FILE* __s, char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vfscanf(MemorySegment __s, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vfscanf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$0,"vscanf");
    }
    /**
     * {@snippet :
     * int vscanf(char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vscanf(MemorySegment __format, MemorySegment __arg) {
        var mh$ = vscanf$MH();
        try {
            return (int)mh$.invokeExact(__format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$1,"vsscanf");
    }
    /**
     * {@snippet :
     * int vsscanf(char* __s, char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vsscanf(MemorySegment __s, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vsscanf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetc$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$2,"fgetc");
    }
    /**
     * {@snippet :
     * int fgetc(FILE* __stream);
     * }
     */
    public static int fgetc(MemorySegment __stream) {
        var mh$ = fgetc$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$3,"getc");
    }
    /**
     * {@snippet :
     * int getc(FILE* __stream);
     * }
     */
    public static int getc(MemorySegment __stream) {
        var mh$ = getc$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$5,"getchar");
    }
    /**
     * {@snippet :
     * int getchar();
     * }
     */
    public static int getchar() {
        var mh$ = getchar$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$0,"getc_unlocked");
    }
    /**
     * {@snippet :
     * int getc_unlocked(FILE* __stream);
     * }
     */
    public static int getc_unlocked(MemorySegment __stream) {
        var mh$ = getc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$1,"getchar_unlocked");
    }
    /**
     * {@snippet :
     * int getchar_unlocked();
     * }
     */
    public static int getchar_unlocked() {
        var mh$ = getchar_unlocked$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$2,"fgetc_unlocked");
    }
    /**
     * {@snippet :
     * int fgetc_unlocked(FILE* __stream);
     * }
     */
    public static int fgetc_unlocked(MemorySegment __stream) {
        var mh$ = fgetc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputc$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$3,"fputc");
    }
    /**
     * {@snippet :
     * int fputc(int __c, FILE* __stream);
     * }
     */
    public static int fputc(int __c, MemorySegment __stream) {
        var mh$ = fputc$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$4,"putc");
    }
    /**
     * {@snippet :
     * int putc(int __c, FILE* __stream);
     * }
     */
    public static int putc(int __c, MemorySegment __stream) {
        var mh$ = putc$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$6,"putchar");
    }
    /**
     * {@snippet :
     * int putchar(int __c);
     * }
     */
    public static int putchar(int __c) {
        var mh$ = putchar$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$0,"fputc_unlocked");
    }
    /**
     * {@snippet :
     * int fputc_unlocked(int __c, FILE* __stream);
     * }
     */
    public static int fputc_unlocked(int __c, MemorySegment __stream) {
        var mh$ = fputc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$1,"putc_unlocked");
    }
    /**
     * {@snippet :
     * int putc_unlocked(int __c, FILE* __stream);
     * }
     */
    public static int putc_unlocked(int __c, MemorySegment __stream) {
        var mh$ = putc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$2,"putchar_unlocked");
    }
    /**
     * {@snippet :
     * int putchar_unlocked(int __c);
     * }
     */
    public static int putchar_unlocked(int __c) {
        var mh$ = putchar_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getw$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$3,"getw");
    }
    /**
     * {@snippet :
     * int getw(FILE* __stream);
     * }
     */
    public static int getw(MemorySegment __stream) {
        var mh$ = getw$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putw$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$4,"putw");
    }
    /**
     * {@snippet :
     * int putw(int __w, FILE* __stream);
     * }
     */
    public static int putw(int __w, MemorySegment __stream) {
        var mh$ = putw$MH();
        try {
            return (int)mh$.invokeExact(__w, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgets$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$6,"fgets");
    }
    /**
     * {@snippet :
     * char* fgets(char* __s, int __n, FILE* __stream);
     * }
     */
    public static MemorySegment fgets(MemorySegment __s, int __n, MemorySegment __stream) {
        var mh$ = fgets$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__s, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __getdelim$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$1,"__getdelim");
    }
    /**
     * {@snippet :
     * __ssize_t __getdelim(char** __lineptr, size_t* __n, int __delimiter, FILE* __stream);
     * }
     */
    public static long __getdelim(MemorySegment __lineptr, MemorySegment __n, int __delimiter, MemorySegment __stream) {
        var mh$ = __getdelim$MH();
        try {
            return (long)mh$.invokeExact(__lineptr, __n, __delimiter, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdelim$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$2,"getdelim");
    }
    /**
     * {@snippet :
     * __ssize_t getdelim(char** __lineptr, size_t* __n, int __delimiter, FILE* __stream);
     * }
     */
    public static long getdelim(MemorySegment __lineptr, MemorySegment __n, int __delimiter, MemorySegment __stream) {
        var mh$ = getdelim$MH();
        try {
            return (long)mh$.invokeExact(__lineptr, __n, __delimiter, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getline$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$4,"getline");
    }
    /**
     * {@snippet :
     * __ssize_t getline(char** __lineptr, size_t* __n, FILE* __stream);
     * }
     */
    public static long getline(MemorySegment __lineptr, MemorySegment __n, MemorySegment __stream) {
        var mh$ = getline$MH();
        try {
            return (long)mh$.invokeExact(__lineptr, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputs$MH() {
        return RuntimeHelper.requireNonNull(constants$21.const$5,"fputs");
    }
    /**
     * {@snippet :
     * int fputs(char* __s, FILE* __stream);
     * }
     */
    public static int fputs(MemorySegment __s, MemorySegment __stream) {
        var mh$ = fputs$MH();
        try {
            return (int)mh$.invokeExact(__s, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle puts$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$0,"puts");
    }
    /**
     * {@snippet :
     * int puts(char* __s);
     * }
     */
    public static int puts(MemorySegment __s) {
        var mh$ = puts$MH();
        try {
            return (int)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ungetc$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$1,"ungetc");
    }
    /**
     * {@snippet :
     * int ungetc(int __c, FILE* __stream);
     * }
     */
    public static int ungetc(int __c, MemorySegment __stream) {
        var mh$ = ungetc$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fread$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$3,"fread");
    }
    /**
     * {@snippet :
     * unsigned long fread(void* __ptr, size_t __size, size_t __n, FILE* __stream);
     * }
     */
    public static long fread(MemorySegment __ptr, long __size, long __n, MemorySegment __stream) {
        var mh$ = fread$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$4,"fwrite");
    }
    /**
     * {@snippet :
     * unsigned long fwrite(void* __ptr, size_t __size, size_t __n, FILE* __s);
     * }
     */
    public static long fwrite(MemorySegment __ptr, long __size, long __n, MemorySegment __s) {
        var mh$ = fwrite$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fread_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$22.const$5,"fread_unlocked");
    }
    /**
     * {@snippet :
     * size_t fread_unlocked(void* __ptr, size_t __size, size_t __n, FILE* __stream);
     * }
     */
    public static long fread_unlocked(MemorySegment __ptr, long __size, long __n, MemorySegment __stream) {
        var mh$ = fread_unlocked$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fwrite_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$0,"fwrite_unlocked");
    }
    /**
     * {@snippet :
     * size_t fwrite_unlocked(void* __ptr, size_t __size, size_t __n, FILE* __stream);
     * }
     */
    public static long fwrite_unlocked(MemorySegment __ptr, long __size, long __n, MemorySegment __stream) {
        var mh$ = fwrite_unlocked$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fseek$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$2,"fseek");
    }
    /**
     * {@snippet :
     * int fseek(FILE* __stream, long __off, int __whence);
     * }
     */
    public static int fseek(MemorySegment __stream, long __off, int __whence) {
        var mh$ = fseek$MH();
        try {
            return (int)mh$.invokeExact(__stream, __off, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftell$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$4,"ftell");
    }
    /**
     * {@snippet :
     * long ftell(FILE* __stream);
     * }
     */
    public static long ftell(MemorySegment __stream) {
        var mh$ = ftell$MH();
        try {
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rewind$MH() {
        return RuntimeHelper.requireNonNull(constants$23.const$5,"rewind");
    }
    /**
     * {@snippet :
     * void rewind(FILE* __stream);
     * }
     */
    public static void rewind(MemorySegment __stream) {
        var mh$ = rewind$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fseeko$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$0,"fseeko");
    }
    /**
     * {@snippet :
     * int fseeko(FILE* __stream, __off_t __off, int __whence);
     * }
     */
    public static int fseeko(MemorySegment __stream, long __off, int __whence) {
        var mh$ = fseeko$MH();
        try {
            return (int)mh$.invokeExact(__stream, __off, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftello$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$1,"ftello");
    }
    /**
     * {@snippet :
     * __off_t ftello(FILE* __stream);
     * }
     */
    public static long ftello(MemorySegment __stream) {
        var mh$ = ftello$MH();
        try {
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$2,"fgetpos");
    }
    /**
     * {@snippet :
     * int fgetpos(FILE* __stream, fpos_t* __pos);
     * }
     */
    public static int fgetpos(MemorySegment __stream, MemorySegment __pos) {
        var mh$ = fgetpos$MH();
        try {
            return (int)mh$.invokeExact(__stream, __pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$3,"fsetpos");
    }
    /**
     * {@snippet :
     * int fsetpos(FILE* __stream, const fpos_t* __pos);
     * }
     */
    public static int fsetpos(MemorySegment __stream, MemorySegment __pos) {
        var mh$ = fsetpos$MH();
        try {
            return (int)mh$.invokeExact(__stream, __pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearerr$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$4,"clearerr");
    }
    /**
     * {@snippet :
     * void clearerr(FILE* __stream);
     * }
     */
    public static void clearerr(MemorySegment __stream) {
        var mh$ = clearerr$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle feof$MH() {
        return RuntimeHelper.requireNonNull(constants$24.const$5,"feof");
    }
    /**
     * {@snippet :
     * int feof(FILE* __stream);
     * }
     */
    public static int feof(MemorySegment __stream) {
        var mh$ = feof$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ferror$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$0,"ferror");
    }
    /**
     * {@snippet :
     * int ferror(FILE* __stream);
     * }
     */
    public static int ferror(MemorySegment __stream) {
        var mh$ = ferror$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearerr_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$1,"clearerr_unlocked");
    }
    /**
     * {@snippet :
     * void clearerr_unlocked(FILE* __stream);
     * }
     */
    public static void clearerr_unlocked(MemorySegment __stream) {
        var mh$ = clearerr_unlocked$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle feof_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$2,"feof_unlocked");
    }
    /**
     * {@snippet :
     * int feof_unlocked(FILE* __stream);
     * }
     */
    public static int feof_unlocked(MemorySegment __stream) {
        var mh$ = feof_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ferror_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$3,"ferror_unlocked");
    }
    /**
     * {@snippet :
     * int ferror_unlocked(FILE* __stream);
     * }
     */
    public static int ferror_unlocked(MemorySegment __stream) {
        var mh$ = ferror_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle perror$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$4,"perror");
    }
    /**
     * {@snippet :
     * void perror(char* __s);
     * }
     */
    public static void perror(MemorySegment __s) {
        var mh$ = perror$MH();
        try {
            mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fileno$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$5,"fileno");
    }
    /**
     * {@snippet :
     * int fileno(FILE* __stream);
     * }
     */
    public static int fileno(MemorySegment __stream) {
        var mh$ = fileno$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fileno_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$0,"fileno_unlocked");
    }
    /**
     * {@snippet :
     * int fileno_unlocked(FILE* __stream);
     * }
     */
    public static int fileno_unlocked(MemorySegment __stream) {
        var mh$ = fileno_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pclose$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$1,"pclose");
    }
    /**
     * {@snippet :
     * int pclose(FILE* __stream);
     * }
     */
    public static int pclose(MemorySegment __stream) {
        var mh$ = pclose$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle popen$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$2,"popen");
    }
    /**
     * {@snippet :
     * FILE* popen(char* __command, char* __modes);
     * }
     */
    public static MemorySegment popen(MemorySegment __command, MemorySegment __modes) {
        var mh$ = popen$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__command, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctermid$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$3,"ctermid");
    }
    /**
     * {@snippet :
     * char* ctermid(char* __s);
     * }
     */
    public static MemorySegment ctermid(MemorySegment __s) {
        var mh$ = ctermid$MH();
        try {
            return (MemorySegment)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle flockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$4,"flockfile");
    }
    /**
     * {@snippet :
     * void flockfile(FILE* __stream);
     * }
     */
    public static void flockfile(MemorySegment __stream) {
        var mh$ = flockfile$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftrylockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$5,"ftrylockfile");
    }
    /**
     * {@snippet :
     * int ftrylockfile(FILE* __stream);
     * }
     */
    public static int ftrylockfile(MemorySegment __stream) {
        var mh$ = ftrylockfile$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle funlockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$0,"funlockfile");
    }
    /**
     * {@snippet :
     * void funlockfile(FILE* __stream);
     * }
     */
    public static void funlockfile(MemorySegment __stream) {
        var mh$ = funlockfile$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uflow$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$1,"__uflow");
    }
    /**
     * {@snippet :
     * int __uflow(FILE*);
     * }
     */
    public static int __uflow(MemorySegment x0) {
        var mh$ = __uflow$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __overflow$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$3,"__overflow");
    }
    /**
     * {@snippet :
     * int __overflow(FILE*, int);
     * }
     */
    public static int __overflow(MemorySegment x0, int x1) {
        var mh$ = __overflow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_abort$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$5,"ggml_abort");
    }
    /**
     * {@snippet :
     * void ggml_abort(char* file, int line, char* fmt,...);
     * }
     */
    public static void ggml_abort(MemorySegment file, int line, MemorySegment fmt, Object... x3) {
        var mh$ = ggml_abort$MH();
        try {
            mh$.invokeExact(file, line, fmt, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum ggml_status.GGML_STATUS_ALLOC_FAILED = -2;
     * }
     */
    public static int GGML_STATUS_ALLOC_FAILED() {
        return (int)-2L;
    }
    /**
     * {@snippet :
     * enum ggml_status.GGML_STATUS_FAILED = -1;
     * }
     */
    public static int GGML_STATUS_FAILED() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum ggml_status.GGML_STATUS_SUCCESS = 0;
     * }
     */
    public static int GGML_STATUS_SUCCESS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum ggml_status.GGML_STATUS_ABORTED = 1;
     * }
     */
    public static int GGML_STATUS_ABORTED() {
        return (int)1L;
    }
    public static MethodHandle ggml_status_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$1,"ggml_status_to_string");
    }
    /**
     * {@snippet :
     * char* ggml_status_to_string(enum ggml_status status);
     * }
     */
    public static MemorySegment ggml_status_to_string(int status) {
        var mh$ = ggml_status_to_string$MH();
        try {
            return (MemorySegment)mh$.invokeExact(status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned short ggml_fp16_t;
     * }
     */
    public static final OfShort ggml_fp16_t = JAVA_SHORT;
    public static MethodHandle ggml_fp16_to_fp32$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$3,"ggml_fp16_to_fp32");
    }
    /**
     * {@snippet :
     * float ggml_fp16_to_fp32(ggml_fp16_t);
     * }
     */
    public static float ggml_fp16_to_fp32(short x0) {
        var mh$ = ggml_fp16_to_fp32$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_fp32_to_fp16$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$5,"ggml_fp32_to_fp16");
    }
    /**
     * {@snippet :
     * ggml_fp16_t ggml_fp32_to_fp16(float);
     * }
     */
    public static short ggml_fp32_to_fp16(float x0) {
        var mh$ = ggml_fp32_to_fp16$MH();
        try {
            return (short)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_fp16_to_fp32_row$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$0,"ggml_fp16_to_fp32_row");
    }
    /**
     * {@snippet :
     * void ggml_fp16_to_fp32_row(const ggml_fp16_t*, float*, int64_t);
     * }
     */
    public static void ggml_fp16_to_fp32_row(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = ggml_fp16_to_fp32_row$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_fp32_to_fp16_row$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$1,"ggml_fp32_to_fp16_row");
    }
    /**
     * {@snippet :
     * void ggml_fp32_to_fp16_row(float*, ggml_fp16_t*, int64_t);
     * }
     */
    public static void ggml_fp32_to_fp16_row(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = ggml_fp32_to_fp16_row$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_fp32_to_bf16$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$5,"ggml_fp32_to_bf16");
    }
    /**
     * {@snippet :
     * ggml_bf16_t ggml_fp32_to_bf16(float);
     * }
     */
    public static MemorySegment ggml_fp32_to_bf16(SegmentAllocator allocator, float x1) {
        var mh$ = ggml_fp32_to_bf16$MH();
        try {
            return (MemorySegment)mh$.invokeExact(allocator, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_bf16_to_fp32$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$1,"ggml_bf16_to_fp32");
    }
    /**
     * {@snippet :
     * float ggml_bf16_to_fp32(ggml_bf16_t);
     * }
     */
    public static float ggml_bf16_to_fp32(MemorySegment x0) {
        var mh$ = ggml_bf16_to_fp32$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_bf16_to_fp32_row$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$2,"ggml_bf16_to_fp32_row");
    }
    /**
     * {@snippet :
     * void ggml_bf16_to_fp32_row(const ggml_bf16_t*, float*, int64_t);
     * }
     */
    public static void ggml_bf16_to_fp32_row(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = ggml_bf16_to_fp32_row$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_fp32_to_bf16_row_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$3,"ggml_fp32_to_bf16_row_ref");
    }
    /**
     * {@snippet :
     * void ggml_fp32_to_bf16_row_ref(float*, ggml_bf16_t*, int64_t);
     * }
     */
    public static void ggml_fp32_to_bf16_row_ref(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = ggml_fp32_to_bf16_row_ref$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_fp32_to_bf16_row$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$4,"ggml_fp32_to_bf16_row");
    }
    /**
     * {@snippet :
     * void ggml_fp32_to_bf16_row(float*, ggml_bf16_t*, int64_t);
     * }
     */
    public static void ggml_fp32_to_bf16_row(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = ggml_fp32_to_bf16_row$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_F32 = 0;
     * }
     */
    public static int GGML_TYPE_F32() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_F16 = 1;
     * }
     */
    public static int GGML_TYPE_F16() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_Q4_0 = 2;
     * }
     */
    public static int GGML_TYPE_Q4_0() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_Q4_1 = 3;
     * }
     */
    public static int GGML_TYPE_Q4_1() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_Q5_0 = 6;
     * }
     */
    public static int GGML_TYPE_Q5_0() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_Q5_1 = 7;
     * }
     */
    public static int GGML_TYPE_Q5_1() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_Q8_0 = 8;
     * }
     */
    public static int GGML_TYPE_Q8_0() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_Q8_1 = 9;
     * }
     */
    public static int GGML_TYPE_Q8_1() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_Q2_K = 10;
     * }
     */
    public static int GGML_TYPE_Q2_K() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_Q3_K = 11;
     * }
     */
    public static int GGML_TYPE_Q3_K() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_Q4_K = 12;
     * }
     */
    public static int GGML_TYPE_Q4_K() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_Q5_K = 13;
     * }
     */
    public static int GGML_TYPE_Q5_K() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_Q6_K = 14;
     * }
     */
    public static int GGML_TYPE_Q6_K() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_Q8_K = 15;
     * }
     */
    public static int GGML_TYPE_Q8_K() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_IQ2_XXS = 16;
     * }
     */
    public static int GGML_TYPE_IQ2_XXS() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_IQ2_XS = 17;
     * }
     */
    public static int GGML_TYPE_IQ2_XS() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_IQ3_XXS = 18;
     * }
     */
    public static int GGML_TYPE_IQ3_XXS() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_IQ1_S = 19;
     * }
     */
    public static int GGML_TYPE_IQ1_S() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_IQ4_NL = 20;
     * }
     */
    public static int GGML_TYPE_IQ4_NL() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_IQ3_S = 21;
     * }
     */
    public static int GGML_TYPE_IQ3_S() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_IQ2_S = 22;
     * }
     */
    public static int GGML_TYPE_IQ2_S() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_IQ4_XS = 23;
     * }
     */
    public static int GGML_TYPE_IQ4_XS() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_I8 = 24;
     * }
     */
    public static int GGML_TYPE_I8() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_I16 = 25;
     * }
     */
    public static int GGML_TYPE_I16() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_I32 = 26;
     * }
     */
    public static int GGML_TYPE_I32() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_I64 = 27;
     * }
     */
    public static int GGML_TYPE_I64() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_F64 = 28;
     * }
     */
    public static int GGML_TYPE_F64() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_IQ1_M = 29;
     * }
     */
    public static int GGML_TYPE_IQ1_M() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_BF16 = 30;
     * }
     */
    public static int GGML_TYPE_BF16() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_TQ1_0 = 34;
     * }
     */
    public static int GGML_TYPE_TQ1_0() {
        return (int)34L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_TQ2_0 = 35;
     * }
     */
    public static int GGML_TYPE_TQ2_0() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * enum ggml_type.GGML_TYPE_COUNT = 39;
     * }
     */
    public static int GGML_TYPE_COUNT() {
        return (int)39L;
    }
    /**
     * {@snippet :
     * enum ggml_prec.GGML_PREC_DEFAULT = 0;
     * }
     */
    public static int GGML_PREC_DEFAULT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum ggml_prec.GGML_PREC_F32 = 1;
     * }
     */
    public static int GGML_PREC_F32() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum ggml_ftype.GGML_FTYPE_UNKNOWN = -1;
     * }
     */
    public static int GGML_FTYPE_UNKNOWN() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum ggml_ftype.GGML_FTYPE_ALL_F32 = 0;
     * }
     */
    public static int GGML_FTYPE_ALL_F32() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_F16 = 1;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_F16() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q4_0 = 2;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q4_0() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q4_1 = 3;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q4_1() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q4_1_SOME_F16 = 4;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q4_1_SOME_F16() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q8_0 = 7;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q8_0() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q5_0 = 8;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q5_0() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q5_1 = 9;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q5_1() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q2_K = 10;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q2_K() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q3_K = 11;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q3_K() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q4_K = 12;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q4_K() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q5_K = 13;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q5_K() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q6_K = 14;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q6_K() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_IQ2_XXS = 15;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_IQ2_XXS() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_IQ2_XS = 16;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_IQ2_XS() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_IQ3_XXS = 17;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_IQ3_XXS() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_IQ1_S = 18;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_IQ1_S() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_IQ4_NL = 19;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_IQ4_NL() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_IQ3_S = 20;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_IQ3_S() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_IQ2_S = 21;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_IQ2_S() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_IQ4_XS = 22;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_IQ4_XS() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_IQ1_M = 23;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_IQ1_M() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_BF16 = 24;
     * }
     */
    public static int GGML_FTYPE_MOSTLY_BF16() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_NONE = 0;
     * }
     */
    public static int GGML_OP_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_DUP = 1;
     * }
     */
    public static int GGML_OP_DUP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_ADD = 2;
     * }
     */
    public static int GGML_OP_ADD() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_ADD1 = 3;
     * }
     */
    public static int GGML_OP_ADD1() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_ACC = 4;
     * }
     */
    public static int GGML_OP_ACC() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_SUB = 5;
     * }
     */
    public static int GGML_OP_SUB() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_MUL = 6;
     * }
     */
    public static int GGML_OP_MUL() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_DIV = 7;
     * }
     */
    public static int GGML_OP_DIV() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_SQR = 8;
     * }
     */
    public static int GGML_OP_SQR() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_SQRT = 9;
     * }
     */
    public static int GGML_OP_SQRT() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_LOG = 10;
     * }
     */
    public static int GGML_OP_LOG() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_SIN = 11;
     * }
     */
    public static int GGML_OP_SIN() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_COS = 12;
     * }
     */
    public static int GGML_OP_COS() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_SUM = 13;
     * }
     */
    public static int GGML_OP_SUM() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_SUM_ROWS = 14;
     * }
     */
    public static int GGML_OP_SUM_ROWS() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_MEAN = 15;
     * }
     */
    public static int GGML_OP_MEAN() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_ARGMAX = 16;
     * }
     */
    public static int GGML_OP_ARGMAX() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_COUNT_EQUAL = 17;
     * }
     */
    public static int GGML_OP_COUNT_EQUAL() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_REPEAT = 18;
     * }
     */
    public static int GGML_OP_REPEAT() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_REPEAT_BACK = 19;
     * }
     */
    public static int GGML_OP_REPEAT_BACK() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_CONCAT = 20;
     * }
     */
    public static int GGML_OP_CONCAT() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_SILU_BACK = 21;
     * }
     */
    public static int GGML_OP_SILU_BACK() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_NORM = 22;
     * }
     */
    public static int GGML_OP_NORM() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_RMS_NORM = 23;
     * }
     */
    public static int GGML_OP_RMS_NORM() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_RMS_NORM_BACK = 24;
     * }
     */
    public static int GGML_OP_RMS_NORM_BACK() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_GROUP_NORM = 25;
     * }
     */
    public static int GGML_OP_GROUP_NORM() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_MUL_MAT = 26;
     * }
     */
    public static int GGML_OP_MUL_MAT() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_MUL_MAT_ID = 27;
     * }
     */
    public static int GGML_OP_MUL_MAT_ID() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_OUT_PROD = 28;
     * }
     */
    public static int GGML_OP_OUT_PROD() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_SCALE = 29;
     * }
     */
    public static int GGML_OP_SCALE() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_SET = 30;
     * }
     */
    public static int GGML_OP_SET() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_CPY = 31;
     * }
     */
    public static int GGML_OP_CPY() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_CONT = 32;
     * }
     */
    public static int GGML_OP_CONT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_RESHAPE = 33;
     * }
     */
    public static int GGML_OP_RESHAPE() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_VIEW = 34;
     * }
     */
    public static int GGML_OP_VIEW() {
        return (int)34L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_PERMUTE = 35;
     * }
     */
    public static int GGML_OP_PERMUTE() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_TRANSPOSE = 36;
     * }
     */
    public static int GGML_OP_TRANSPOSE() {
        return (int)36L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_GET_ROWS = 37;
     * }
     */
    public static int GGML_OP_GET_ROWS() {
        return (int)37L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_GET_ROWS_BACK = 38;
     * }
     */
    public static int GGML_OP_GET_ROWS_BACK() {
        return (int)38L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_DIAG = 39;
     * }
     */
    public static int GGML_OP_DIAG() {
        return (int)39L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_DIAG_MASK_INF = 40;
     * }
     */
    public static int GGML_OP_DIAG_MASK_INF() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_DIAG_MASK_ZERO = 41;
     * }
     */
    public static int GGML_OP_DIAG_MASK_ZERO() {
        return (int)41L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_SOFT_MAX = 42;
     * }
     */
    public static int GGML_OP_SOFT_MAX() {
        return (int)42L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_SOFT_MAX_BACK = 43;
     * }
     */
    public static int GGML_OP_SOFT_MAX_BACK() {
        return (int)43L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_ROPE = 44;
     * }
     */
    public static int GGML_OP_ROPE() {
        return (int)44L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_ROPE_BACK = 45;
     * }
     */
    public static int GGML_OP_ROPE_BACK() {
        return (int)45L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_CLAMP = 46;
     * }
     */
    public static int GGML_OP_CLAMP() {
        return (int)46L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_CONV_TRANSPOSE_1D = 47;
     * }
     */
    public static int GGML_OP_CONV_TRANSPOSE_1D() {
        return (int)47L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_IM2COL = 48;
     * }
     */
    public static int GGML_OP_IM2COL() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_IM2COL_BACK = 49;
     * }
     */
    public static int GGML_OP_IM2COL_BACK() {
        return (int)49L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_CONV_TRANSPOSE_2D = 50;
     * }
     */
    public static int GGML_OP_CONV_TRANSPOSE_2D() {
        return (int)50L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_POOL_1D = 51;
     * }
     */
    public static int GGML_OP_POOL_1D() {
        return (int)51L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_POOL_2D = 52;
     * }
     */
    public static int GGML_OP_POOL_2D() {
        return (int)52L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_POOL_2D_BACK = 53;
     * }
     */
    public static int GGML_OP_POOL_2D_BACK() {
        return (int)53L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_UPSCALE = 54;
     * }
     */
    public static int GGML_OP_UPSCALE() {
        return (int)54L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_PAD = 55;
     * }
     */
    public static int GGML_OP_PAD() {
        return (int)55L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_PAD_REFLECT_1D = 56;
     * }
     */
    public static int GGML_OP_PAD_REFLECT_1D() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_ARANGE = 57;
     * }
     */
    public static int GGML_OP_ARANGE() {
        return (int)57L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_TIMESTEP_EMBEDDING = 58;
     * }
     */
    public static int GGML_OP_TIMESTEP_EMBEDDING() {
        return (int)58L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_ARGSORT = 59;
     * }
     */
    public static int GGML_OP_ARGSORT() {
        return (int)59L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_LEAKY_RELU = 60;
     * }
     */
    public static int GGML_OP_LEAKY_RELU() {
        return (int)60L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_FLASH_ATTN_EXT = 61;
     * }
     */
    public static int GGML_OP_FLASH_ATTN_EXT() {
        return (int)61L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_FLASH_ATTN_BACK = 62;
     * }
     */
    public static int GGML_OP_FLASH_ATTN_BACK() {
        return (int)62L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_SSM_CONV = 63;
     * }
     */
    public static int GGML_OP_SSM_CONV() {
        return (int)63L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_SSM_SCAN = 64;
     * }
     */
    public static int GGML_OP_SSM_SCAN() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_WIN_PART = 65;
     * }
     */
    public static int GGML_OP_WIN_PART() {
        return (int)65L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_WIN_UNPART = 66;
     * }
     */
    public static int GGML_OP_WIN_UNPART() {
        return (int)66L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_GET_REL_POS = 67;
     * }
     */
    public static int GGML_OP_GET_REL_POS() {
        return (int)67L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_ADD_REL_POS = 68;
     * }
     */
    public static int GGML_OP_ADD_REL_POS() {
        return (int)68L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_RWKV_WKV6 = 69;
     * }
     */
    public static int GGML_OP_RWKV_WKV6() {
        return (int)69L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_GATED_LINEAR_ATTN = 70;
     * }
     */
    public static int GGML_OP_GATED_LINEAR_ATTN() {
        return (int)70L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_UNARY = 71;
     * }
     */
    public static int GGML_OP_UNARY() {
        return (int)71L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_MAP_UNARY = 72;
     * }
     */
    public static int GGML_OP_MAP_UNARY() {
        return (int)72L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_MAP_BINARY = 73;
     * }
     */
    public static int GGML_OP_MAP_BINARY() {
        return (int)73L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_MAP_CUSTOM1_F32 = 74;
     * }
     */
    public static int GGML_OP_MAP_CUSTOM1_F32() {
        return (int)74L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_MAP_CUSTOM2_F32 = 75;
     * }
     */
    public static int GGML_OP_MAP_CUSTOM2_F32() {
        return (int)75L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_MAP_CUSTOM3_F32 = 76;
     * }
     */
    public static int GGML_OP_MAP_CUSTOM3_F32() {
        return (int)76L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_MAP_CUSTOM1 = 77;
     * }
     */
    public static int GGML_OP_MAP_CUSTOM1() {
        return (int)77L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_MAP_CUSTOM2 = 78;
     * }
     */
    public static int GGML_OP_MAP_CUSTOM2() {
        return (int)78L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_MAP_CUSTOM3 = 79;
     * }
     */
    public static int GGML_OP_MAP_CUSTOM3() {
        return (int)79L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_CROSS_ENTROPY_LOSS = 80;
     * }
     */
    public static int GGML_OP_CROSS_ENTROPY_LOSS() {
        return (int)80L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_CROSS_ENTROPY_LOSS_BACK = 81;
     * }
     */
    public static int GGML_OP_CROSS_ENTROPY_LOSS_BACK() {
        return (int)81L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_OPT_STEP_ADAMW = 82;
     * }
     */
    public static int GGML_OP_OPT_STEP_ADAMW() {
        return (int)82L;
    }
    /**
     * {@snippet :
     * enum ggml_op.GGML_OP_COUNT = 83;
     * }
     */
    public static int GGML_OP_COUNT() {
        return (int)83L;
    }
    /**
     * {@snippet :
     * enum ggml_unary_op.GGML_UNARY_OP_ABS = 0;
     * }
     */
    public static int GGML_UNARY_OP_ABS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum ggml_unary_op.GGML_UNARY_OP_SGN = 1;
     * }
     */
    public static int GGML_UNARY_OP_SGN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum ggml_unary_op.GGML_UNARY_OP_NEG = 2;
     * }
     */
    public static int GGML_UNARY_OP_NEG() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum ggml_unary_op.GGML_UNARY_OP_STEP = 3;
     * }
     */
    public static int GGML_UNARY_OP_STEP() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum ggml_unary_op.GGML_UNARY_OP_TANH = 4;
     * }
     */
    public static int GGML_UNARY_OP_TANH() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum ggml_unary_op.GGML_UNARY_OP_ELU = 5;
     * }
     */
    public static int GGML_UNARY_OP_ELU() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum ggml_unary_op.GGML_UNARY_OP_RELU = 6;
     * }
     */
    public static int GGML_UNARY_OP_RELU() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum ggml_unary_op.GGML_UNARY_OP_SIGMOID = 7;
     * }
     */
    public static int GGML_UNARY_OP_SIGMOID() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum ggml_unary_op.GGML_UNARY_OP_GELU = 8;
     * }
     */
    public static int GGML_UNARY_OP_GELU() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum ggml_unary_op.GGML_UNARY_OP_GELU_QUICK = 9;
     * }
     */
    public static int GGML_UNARY_OP_GELU_QUICK() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum ggml_unary_op.GGML_UNARY_OP_SILU = 10;
     * }
     */
    public static int GGML_UNARY_OP_SILU() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum ggml_unary_op.GGML_UNARY_OP_HARDSWISH = 11;
     * }
     */
    public static int GGML_UNARY_OP_HARDSWISH() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum ggml_unary_op.GGML_UNARY_OP_HARDSIGMOID = 12;
     * }
     */
    public static int GGML_UNARY_OP_HARDSIGMOID() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum ggml_unary_op.GGML_UNARY_OP_EXP = 13;
     * }
     */
    public static int GGML_UNARY_OP_EXP() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum ggml_unary_op.GGML_UNARY_OP_COUNT = 14;
     * }
     */
    public static int GGML_UNARY_OP_COUNT() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum ggml_object_type.GGML_OBJECT_TYPE_TENSOR = 0;
     * }
     */
    public static int GGML_OBJECT_TYPE_TENSOR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum ggml_object_type.GGML_OBJECT_TYPE_GRAPH = 1;
     * }
     */
    public static int GGML_OBJECT_TYPE_GRAPH() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum ggml_object_type.GGML_OBJECT_TYPE_WORK_BUFFER = 2;
     * }
     */
    public static int GGML_OBJECT_TYPE_WORK_BUFFER() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum ggml_log_level.GGML_LOG_LEVEL_NONE = 0;
     * }
     */
    public static int GGML_LOG_LEVEL_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum ggml_log_level.GGML_LOG_LEVEL_DEBUG = 1;
     * }
     */
    public static int GGML_LOG_LEVEL_DEBUG() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum ggml_log_level.GGML_LOG_LEVEL_INFO = 2;
     * }
     */
    public static int GGML_LOG_LEVEL_INFO() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum ggml_log_level.GGML_LOG_LEVEL_WARN = 3;
     * }
     */
    public static int GGML_LOG_LEVEL_WARN() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum ggml_log_level.GGML_LOG_LEVEL_ERROR = 4;
     * }
     */
    public static int GGML_LOG_LEVEL_ERROR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum ggml_log_level.GGML_LOG_LEVEL_CONT = 5;
     * }
     */
    public static int GGML_LOG_LEVEL_CONT() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum ggml_tensor_flag.GGML_TENSOR_FLAG_INPUT = 1;
     * }
     */
    public static int GGML_TENSOR_FLAG_INPUT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum ggml_tensor_flag.GGML_TENSOR_FLAG_OUTPUT = 2;
     * }
     */
    public static int GGML_TENSOR_FLAG_OUTPUT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum ggml_tensor_flag.GGML_TENSOR_FLAG_PARAM = 4;
     * }
     */
    public static int GGML_TENSOR_FLAG_PARAM() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum ggml_tensor_flag.GGML_TENSOR_FLAG_LOSS = 8;
     * }
     */
    public static int GGML_TENSOR_FLAG_LOSS() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * typedef unsigned char *ggml_guid_t[16];
     * }
     */
    public static final AddressLayout ggml_guid_t = RuntimeHelper.POINTER;
    public static MethodHandle ggml_guid_matches$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$4,"ggml_guid_matches");
    }
    /**
     * {@snippet :
     * _Bool ggml_guid_matches(ggml_guid_t guid_a, ggml_guid_t guid_b);
     * }
     */
    public static boolean ggml_guid_matches(MemorySegment guid_a, MemorySegment guid_b) {
        var mh$ = ggml_guid_matches$MH();
        try {
            return (boolean)mh$.invokeExact(guid_a, guid_b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_time_init$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$6,"ggml_time_init");
    }
    /**
     * {@snippet :
     * void ggml_time_init();
     * }
     */
    public static void ggml_time_init() {
        var mh$ = ggml_time_init$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_time_ms$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$1,"ggml_time_ms");
    }
    /**
     * {@snippet :
     * int64_t ggml_time_ms();
     * }
     */
    public static long ggml_time_ms() {
        var mh$ = ggml_time_ms$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_time_us$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$2,"ggml_time_us");
    }
    /**
     * {@snippet :
     * int64_t ggml_time_us();
     * }
     */
    public static long ggml_time_us() {
        var mh$ = ggml_time_us$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cycles$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$3,"ggml_cycles");
    }
    /**
     * {@snippet :
     * int64_t ggml_cycles();
     * }
     */
    public static long ggml_cycles() {
        var mh$ = ggml_cycles$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cycles_per_ms$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$4,"ggml_cycles_per_ms");
    }
    /**
     * {@snippet :
     * int64_t ggml_cycles_per_ms();
     * }
     */
    public static long ggml_cycles_per_ms() {
        var mh$ = ggml_cycles_per_ms$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_fopen$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$5,"ggml_fopen");
    }
    /**
     * {@snippet :
     * FILE* ggml_fopen(char* fname, char* mode);
     * }
     */
    public static MemorySegment ggml_fopen(MemorySegment fname, MemorySegment mode) {
        var mh$ = ggml_fopen$MH();
        try {
            return (MemorySegment)mh$.invokeExact(fname, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_print_object$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$0,"ggml_print_object");
    }
    /**
     * {@snippet :
     * void ggml_print_object(struct ggml_object* obj);
     * }
     */
    public static void ggml_print_object(MemorySegment obj) {
        var mh$ = ggml_print_object$MH();
        try {
            mh$.invokeExact(obj);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_print_objects$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$1,"ggml_print_objects");
    }
    /**
     * {@snippet :
     * void ggml_print_objects(struct ggml_context* ctx);
     * }
     */
    public static void ggml_print_objects(MemorySegment ctx) {
        var mh$ = ggml_print_objects$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_nelements$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$2,"ggml_nelements");
    }
    /**
     * {@snippet :
     * int64_t ggml_nelements(struct ggml_tensor* tensor);
     * }
     */
    public static long ggml_nelements(MemorySegment tensor) {
        var mh$ = ggml_nelements$MH();
        try {
            return (long)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_nrows$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$3,"ggml_nrows");
    }
    /**
     * {@snippet :
     * int64_t ggml_nrows(struct ggml_tensor* tensor);
     * }
     */
    public static long ggml_nrows(MemorySegment tensor) {
        var mh$ = ggml_nrows$MH();
        try {
            return (long)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_nbytes$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$4,"ggml_nbytes");
    }
    /**
     * {@snippet :
     * size_t ggml_nbytes(struct ggml_tensor* tensor);
     * }
     */
    public static long ggml_nbytes(MemorySegment tensor) {
        var mh$ = ggml_nbytes$MH();
        try {
            return (long)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_nbytes_pad$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$5,"ggml_nbytes_pad");
    }
    /**
     * {@snippet :
     * size_t ggml_nbytes_pad(struct ggml_tensor* tensor);
     * }
     */
    public static long ggml_nbytes_pad(MemorySegment tensor) {
        var mh$ = ggml_nbytes_pad$MH();
        try {
            return (long)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_blck_size$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$1,"ggml_blck_size");
    }
    /**
     * {@snippet :
     * int64_t ggml_blck_size(enum ggml_type type);
     * }
     */
    public static long ggml_blck_size(int type) {
        var mh$ = ggml_blck_size$MH();
        try {
            return (long)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_type_size$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$2,"ggml_type_size");
    }
    /**
     * {@snippet :
     * size_t ggml_type_size(enum ggml_type type);
     * }
     */
    public static long ggml_type_size(int type) {
        var mh$ = ggml_type_size$MH();
        try {
            return (long)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_row_size$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$4,"ggml_row_size");
    }
    /**
     * {@snippet :
     * size_t ggml_row_size(enum ggml_type type, int64_t ne);
     * }
     */
    public static long ggml_row_size(int type, long ne) {
        var mh$ = ggml_row_size$MH();
        try {
            return (long)mh$.invokeExact(type, ne);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_type_sizef$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$6,"ggml_type_sizef");
    }
    /**
     * {@snippet :
     * double ggml_type_sizef(enum ggml_type type);
     * }
     */
    public static double ggml_type_sizef(int type) {
        var mh$ = ggml_type_sizef$MH();
        try {
            return (double)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_type_name$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$0,"ggml_type_name");
    }
    /**
     * {@snippet :
     * char* ggml_type_name(enum ggml_type type);
     * }
     */
    public static MemorySegment ggml_type_name(int type) {
        var mh$ = ggml_type_name$MH();
        try {
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_op_name$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$1,"ggml_op_name");
    }
    /**
     * {@snippet :
     * char* ggml_op_name(enum ggml_op op);
     * }
     */
    public static MemorySegment ggml_op_name(int op) {
        var mh$ = ggml_op_name$MH();
        try {
            return (MemorySegment)mh$.invokeExact(op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_op_symbol$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$2,"ggml_op_symbol");
    }
    /**
     * {@snippet :
     * char* ggml_op_symbol(enum ggml_op op);
     * }
     */
    public static MemorySegment ggml_op_symbol(int op) {
        var mh$ = ggml_op_symbol$MH();
        try {
            return (MemorySegment)mh$.invokeExact(op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_unary_op_name$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$3,"ggml_unary_op_name");
    }
    /**
     * {@snippet :
     * char* ggml_unary_op_name(enum ggml_unary_op op);
     * }
     */
    public static MemorySegment ggml_unary_op_name(int op) {
        var mh$ = ggml_unary_op_name$MH();
        try {
            return (MemorySegment)mh$.invokeExact(op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_op_desc$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$4,"ggml_op_desc");
    }
    /**
     * {@snippet :
     * char* ggml_op_desc(struct ggml_tensor* t);
     * }
     */
    public static MemorySegment ggml_op_desc(MemorySegment t) {
        var mh$ = ggml_op_desc$MH();
        try {
            return (MemorySegment)mh$.invokeExact(t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_element_size$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$5,"ggml_element_size");
    }
    /**
     * {@snippet :
     * size_t ggml_element_size(struct ggml_tensor* tensor);
     * }
     */
    public static long ggml_element_size(MemorySegment tensor) {
        var mh$ = ggml_element_size$MH();
        try {
            return (long)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_is_quantized$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$1,"ggml_is_quantized");
    }
    /**
     * {@snippet :
     * _Bool ggml_is_quantized(enum ggml_type type);
     * }
     */
    public static boolean ggml_is_quantized(int type) {
        var mh$ = ggml_is_quantized$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_ftype_to_ggml_type$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$2,"ggml_ftype_to_ggml_type");
    }
    /**
     * {@snippet :
     * enum ggml_type ggml_ftype_to_ggml_type(enum ggml_ftype ftype);
     * }
     */
    public static int ggml_ftype_to_ggml_type(int ftype) {
        var mh$ = ggml_ftype_to_ggml_type$MH();
        try {
            return (int)mh$.invokeExact(ftype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_is_transposed$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$3,"ggml_is_transposed");
    }
    /**
     * {@snippet :
     * _Bool ggml_is_transposed(struct ggml_tensor* tensor);
     * }
     */
    public static boolean ggml_is_transposed(MemorySegment tensor) {
        var mh$ = ggml_is_transposed$MH();
        try {
            return (boolean)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_is_permuted$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$4,"ggml_is_permuted");
    }
    /**
     * {@snippet :
     * _Bool ggml_is_permuted(struct ggml_tensor* tensor);
     * }
     */
    public static boolean ggml_is_permuted(MemorySegment tensor) {
        var mh$ = ggml_is_permuted$MH();
        try {
            return (boolean)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_is_empty$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$5,"ggml_is_empty");
    }
    /**
     * {@snippet :
     * _Bool ggml_is_empty(struct ggml_tensor* tensor);
     * }
     */
    public static boolean ggml_is_empty(MemorySegment tensor) {
        var mh$ = ggml_is_empty$MH();
        try {
            return (boolean)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_is_scalar$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$0,"ggml_is_scalar");
    }
    /**
     * {@snippet :
     * _Bool ggml_is_scalar(struct ggml_tensor* tensor);
     * }
     */
    public static boolean ggml_is_scalar(MemorySegment tensor) {
        var mh$ = ggml_is_scalar$MH();
        try {
            return (boolean)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_is_vector$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$1,"ggml_is_vector");
    }
    /**
     * {@snippet :
     * _Bool ggml_is_vector(struct ggml_tensor* tensor);
     * }
     */
    public static boolean ggml_is_vector(MemorySegment tensor) {
        var mh$ = ggml_is_vector$MH();
        try {
            return (boolean)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_is_matrix$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$2,"ggml_is_matrix");
    }
    /**
     * {@snippet :
     * _Bool ggml_is_matrix(struct ggml_tensor* tensor);
     * }
     */
    public static boolean ggml_is_matrix(MemorySegment tensor) {
        var mh$ = ggml_is_matrix$MH();
        try {
            return (boolean)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_is_3d$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$3,"ggml_is_3d");
    }
    /**
     * {@snippet :
     * _Bool ggml_is_3d(struct ggml_tensor* tensor);
     * }
     */
    public static boolean ggml_is_3d(MemorySegment tensor) {
        var mh$ = ggml_is_3d$MH();
        try {
            return (boolean)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_n_dims$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$4,"ggml_n_dims");
    }
    /**
     * {@snippet :
     * int ggml_n_dims(struct ggml_tensor* tensor);
     * }
     */
    public static int ggml_n_dims(MemorySegment tensor) {
        var mh$ = ggml_n_dims$MH();
        try {
            return (int)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_is_contiguous$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$5,"ggml_is_contiguous");
    }
    /**
     * {@snippet :
     * _Bool ggml_is_contiguous(struct ggml_tensor* tensor);
     * }
     */
    public static boolean ggml_is_contiguous(MemorySegment tensor) {
        var mh$ = ggml_is_contiguous$MH();
        try {
            return (boolean)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_is_contiguous_0$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$0,"ggml_is_contiguous_0");
    }
    /**
     * {@snippet :
     * _Bool ggml_is_contiguous_0(struct ggml_tensor* tensor);
     * }
     */
    public static boolean ggml_is_contiguous_0(MemorySegment tensor) {
        var mh$ = ggml_is_contiguous_0$MH();
        try {
            return (boolean)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_is_contiguous_1$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$1,"ggml_is_contiguous_1");
    }
    /**
     * {@snippet :
     * _Bool ggml_is_contiguous_1(struct ggml_tensor* tensor);
     * }
     */
    public static boolean ggml_is_contiguous_1(MemorySegment tensor) {
        var mh$ = ggml_is_contiguous_1$MH();
        try {
            return (boolean)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_is_contiguous_2$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$2,"ggml_is_contiguous_2");
    }
    /**
     * {@snippet :
     * _Bool ggml_is_contiguous_2(struct ggml_tensor* tensor);
     * }
     */
    public static boolean ggml_is_contiguous_2(MemorySegment tensor) {
        var mh$ = ggml_is_contiguous_2$MH();
        try {
            return (boolean)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_are_same_shape$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$3,"ggml_are_same_shape");
    }
    /**
     * {@snippet :
     * _Bool ggml_are_same_shape(struct ggml_tensor* t0, struct ggml_tensor* t1);
     * }
     */
    public static boolean ggml_are_same_shape(MemorySegment t0, MemorySegment t1) {
        var mh$ = ggml_are_same_shape$MH();
        try {
            return (boolean)mh$.invokeExact(t0, t1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_are_same_stride$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$4,"ggml_are_same_stride");
    }
    /**
     * {@snippet :
     * _Bool ggml_are_same_stride(struct ggml_tensor* t0, struct ggml_tensor* t1);
     * }
     */
    public static boolean ggml_are_same_stride(MemorySegment t0, MemorySegment t1) {
        var mh$ = ggml_are_same_stride$MH();
        try {
            return (boolean)mh$.invokeExact(t0, t1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_can_repeat$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$5,"ggml_can_repeat");
    }
    /**
     * {@snippet :
     * _Bool ggml_can_repeat(struct ggml_tensor* t0, struct ggml_tensor* t1);
     * }
     */
    public static boolean ggml_can_repeat(MemorySegment t0, MemorySegment t1) {
        var mh$ = ggml_can_repeat$MH();
        try {
            return (boolean)mh$.invokeExact(t0, t1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_tensor_overhead$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$0,"ggml_tensor_overhead");
    }
    /**
     * {@snippet :
     * size_t ggml_tensor_overhead();
     * }
     */
    public static long ggml_tensor_overhead() {
        var mh$ = ggml_tensor_overhead$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_validate_row_data$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$2,"ggml_validate_row_data");
    }
    /**
     * {@snippet :
     * _Bool ggml_validate_row_data(enum ggml_type type, void* data, size_t nbytes);
     * }
     */
    public static boolean ggml_validate_row_data(int type, MemorySegment data, long nbytes) {
        var mh$ = ggml_validate_row_data$MH();
        try {
            return (boolean)mh$.invokeExact(type, data, nbytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_init$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$4,"ggml_init");
    }
    /**
     * {@snippet :
     * struct ggml_context* ggml_init(struct ggml_init_params params);
     * }
     */
    public static MemorySegment ggml_init(MemorySegment params) {
        var mh$ = ggml_init$MH();
        try {
            return (MemorySegment)mh$.invokeExact(params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$5,"ggml_reset");
    }
    /**
     * {@snippet :
     * void ggml_reset(struct ggml_context* ctx);
     * }
     */
    public static void ggml_reset(MemorySegment ctx) {
        var mh$ = ggml_reset$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_free$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$0,"ggml_free");
    }
    /**
     * {@snippet :
     * void ggml_free(struct ggml_context* ctx);
     * }
     */
    public static void ggml_free(MemorySegment ctx) {
        var mh$ = ggml_free$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_used_mem$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$1,"ggml_used_mem");
    }
    /**
     * {@snippet :
     * size_t ggml_used_mem(struct ggml_context* ctx);
     * }
     */
    public static long ggml_used_mem(MemorySegment ctx) {
        var mh$ = ggml_used_mem$MH();
        try {
            return (long)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_no_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$2,"ggml_get_no_alloc");
    }
    /**
     * {@snippet :
     * _Bool ggml_get_no_alloc(struct ggml_context* ctx);
     * }
     */
    public static boolean ggml_get_no_alloc(MemorySegment ctx) {
        var mh$ = ggml_get_no_alloc$MH();
        try {
            return (boolean)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_no_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$4,"ggml_set_no_alloc");
    }
    /**
     * {@snippet :
     * void ggml_set_no_alloc(struct ggml_context* ctx, _Bool no_alloc);
     * }
     */
    public static void ggml_set_no_alloc(MemorySegment ctx, boolean no_alloc) {
        var mh$ = ggml_set_no_alloc$MH();
        try {
            mh$.invokeExact(ctx, no_alloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_mem_buffer$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$5,"ggml_get_mem_buffer");
    }
    /**
     * {@snippet :
     * void* ggml_get_mem_buffer(struct ggml_context* ctx);
     * }
     */
    public static MemorySegment ggml_get_mem_buffer(MemorySegment ctx) {
        var mh$ = ggml_get_mem_buffer$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_mem_size$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$0,"ggml_get_mem_size");
    }
    /**
     * {@snippet :
     * size_t ggml_get_mem_size(struct ggml_context* ctx);
     * }
     */
    public static long ggml_get_mem_size(MemorySegment ctx) {
        var mh$ = ggml_get_mem_size$MH();
        try {
            return (long)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_max_tensor_size$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$1,"ggml_get_max_tensor_size");
    }
    /**
     * {@snippet :
     * size_t ggml_get_max_tensor_size(struct ggml_context* ctx);
     * }
     */
    public static long ggml_get_max_tensor_size(MemorySegment ctx) {
        var mh$ = ggml_get_max_tensor_size$MH();
        try {
            return (long)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_new_tensor$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$3,"ggml_new_tensor");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_new_tensor(struct ggml_context* ctx, enum ggml_type type, int n_dims, const int64_t* ne);
     * }
     */
    public static MemorySegment ggml_new_tensor(MemorySegment ctx, int type, int n_dims, MemorySegment ne) {
        var mh$ = ggml_new_tensor$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, type, n_dims, ne);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_new_tensor_1d$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$5,"ggml_new_tensor_1d");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_new_tensor_1d(struct ggml_context* ctx, enum ggml_type type, int64_t ne0);
     * }
     */
    public static MemorySegment ggml_new_tensor_1d(MemorySegment ctx, int type, long ne0) {
        var mh$ = ggml_new_tensor_1d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, type, ne0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_new_tensor_2d$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$1,"ggml_new_tensor_2d");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_new_tensor_2d(struct ggml_context* ctx, enum ggml_type type, int64_t ne0, int64_t ne1);
     * }
     */
    public static MemorySegment ggml_new_tensor_2d(MemorySegment ctx, int type, long ne0, long ne1) {
        var mh$ = ggml_new_tensor_2d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, type, ne0, ne1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_new_tensor_3d$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$3,"ggml_new_tensor_3d");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_new_tensor_3d(struct ggml_context* ctx, enum ggml_type type, int64_t ne0, int64_t ne1, int64_t ne2);
     * }
     */
    public static MemorySegment ggml_new_tensor_3d(MemorySegment ctx, int type, long ne0, long ne1, long ne2) {
        var mh$ = ggml_new_tensor_3d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, type, ne0, ne1, ne2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_new_tensor_4d$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$5,"ggml_new_tensor_4d");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_new_tensor_4d(struct ggml_context* ctx, enum ggml_type type, int64_t ne0, int64_t ne1, int64_t ne2, int64_t ne3);
     * }
     */
    public static MemorySegment ggml_new_tensor_4d(MemorySegment ctx, int type, long ne0, long ne1, long ne2, long ne3) {
        var mh$ = ggml_new_tensor_4d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, type, ne0, ne1, ne2, ne3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_new_buffer$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$1,"ggml_new_buffer");
    }
    /**
     * {@snippet :
     * void* ggml_new_buffer(struct ggml_context* ctx, size_t nbytes);
     * }
     */
    public static MemorySegment ggml_new_buffer(MemorySegment ctx, long nbytes) {
        var mh$ = ggml_new_buffer$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, nbytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_dup_tensor$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$2,"ggml_dup_tensor");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_dup_tensor(struct ggml_context* ctx, struct ggml_tensor* src);
     * }
     */
    public static MemorySegment ggml_dup_tensor(MemorySegment ctx, MemorySegment src) {
        var mh$ = ggml_dup_tensor$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_view_tensor$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$3,"ggml_view_tensor");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_view_tensor(struct ggml_context* ctx, struct ggml_tensor* src);
     * }
     */
    public static MemorySegment ggml_view_tensor(MemorySegment ctx, MemorySegment src) {
        var mh$ = ggml_view_tensor$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_first_tensor$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$4,"ggml_get_first_tensor");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_get_first_tensor(struct ggml_context* ctx);
     * }
     */
    public static MemorySegment ggml_get_first_tensor(MemorySegment ctx) {
        var mh$ = ggml_get_first_tensor$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_next_tensor$MH() {
        return RuntimeHelper.requireNonNull(constants$45.const$5,"ggml_get_next_tensor");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_get_next_tensor(struct ggml_context* ctx, struct ggml_tensor* tensor);
     * }
     */
    public static MemorySegment ggml_get_next_tensor(MemorySegment ctx, MemorySegment tensor) {
        var mh$ = ggml_get_next_tensor$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_tensor$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$0,"ggml_get_tensor");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_get_tensor(struct ggml_context* ctx, char* name);
     * }
     */
    public static MemorySegment ggml_get_tensor(MemorySegment ctx, MemorySegment name) {
        var mh$ = ggml_get_tensor$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_unravel_index$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$2,"ggml_unravel_index");
    }
    /**
     * {@snippet :
     * void ggml_unravel_index(struct ggml_tensor* tensor, int64_t i, int64_t* i0, int64_t* i1, int64_t* i2, int64_t* i3);
     * }
     */
    public static void ggml_unravel_index(MemorySegment tensor, long i, MemorySegment i0, MemorySegment i1, MemorySegment i2, MemorySegment i3) {
        var mh$ = ggml_unravel_index$MH();
        try {
            mh$.invokeExact(tensor, i, i0, i1, i2, i3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_unary_op$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$3,"ggml_get_unary_op");
    }
    /**
     * {@snippet :
     * enum ggml_unary_op ggml_get_unary_op(struct ggml_tensor* tensor);
     * }
     */
    public static int ggml_get_unary_op(MemorySegment tensor) {
        var mh$ = ggml_get_unary_op$MH();
        try {
            return (int)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_data$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$4,"ggml_get_data");
    }
    /**
     * {@snippet :
     * void* ggml_get_data(struct ggml_tensor* tensor);
     * }
     */
    public static MemorySegment ggml_get_data(MemorySegment tensor) {
        var mh$ = ggml_get_data$MH();
        try {
            return (MemorySegment)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_data_f32$MH() {
        return RuntimeHelper.requireNonNull(constants$46.const$5,"ggml_get_data_f32");
    }
    /**
     * {@snippet :
     * float* ggml_get_data_f32(struct ggml_tensor* tensor);
     * }
     */
    public static MemorySegment ggml_get_data_f32(MemorySegment tensor) {
        var mh$ = ggml_get_data_f32$MH();
        try {
            return (MemorySegment)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_name$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$0,"ggml_get_name");
    }
    /**
     * {@snippet :
     * char* ggml_get_name(struct ggml_tensor* tensor);
     * }
     */
    public static MemorySegment ggml_get_name(MemorySegment tensor) {
        var mh$ = ggml_get_name$MH();
        try {
            return (MemorySegment)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_name$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$1,"ggml_set_name");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_set_name(struct ggml_tensor* tensor, char* name);
     * }
     */
    public static MemorySegment ggml_set_name(MemorySegment tensor, MemorySegment name) {
        var mh$ = ggml_set_name$MH();
        try {
            return (MemorySegment)mh$.invokeExact(tensor, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_format_name$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$2,"ggml_format_name");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_format_name(struct ggml_tensor* tensor, char* fmt,...);
     * }
     */
    public static MemorySegment ggml_format_name(MemorySegment tensor, MemorySegment fmt, Object... x2) {
        var mh$ = ggml_format_name$MH();
        try {
            return (MemorySegment)mh$.invokeExact(tensor, fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_input$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$3,"ggml_set_input");
    }
    /**
     * {@snippet :
     * void ggml_set_input(struct ggml_tensor* tensor);
     * }
     */
    public static void ggml_set_input(MemorySegment tensor) {
        var mh$ = ggml_set_input$MH();
        try {
            mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_output$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$4,"ggml_set_output");
    }
    /**
     * {@snippet :
     * void ggml_set_output(struct ggml_tensor* tensor);
     * }
     */
    public static void ggml_set_output(MemorySegment tensor) {
        var mh$ = ggml_set_output$MH();
        try {
            mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_param$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$5,"ggml_set_param");
    }
    /**
     * {@snippet :
     * void ggml_set_param(struct ggml_context* ctx, struct ggml_tensor* tensor);
     * }
     */
    public static void ggml_set_param(MemorySegment ctx, MemorySegment tensor) {
        var mh$ = ggml_set_param$MH();
        try {
            mh$.invokeExact(ctx, tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_loss$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$0,"ggml_set_loss");
    }
    /**
     * {@snippet :
     * void ggml_set_loss(struct ggml_tensor* tensor);
     * }
     */
    public static void ggml_set_loss(MemorySegment tensor) {
        var mh$ = ggml_set_loss$MH();
        try {
            mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$1,"ggml_dup");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_dup(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_dup(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_dup$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_dup_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$2,"ggml_dup_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_dup_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_dup_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_dup_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_add$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$3,"ggml_add");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_add(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_add(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_add$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_add_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$4,"ggml_add_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_add_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_add_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_add_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_add_cast$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$6,"ggml_add_cast");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_add_cast(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, enum ggml_type type);
     * }
     */
    public static MemorySegment ggml_add_cast(MemorySegment ctx, MemorySegment a, MemorySegment b, int type) {
        var mh$ = ggml_add_cast$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_add1$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$0,"ggml_add1");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_add1(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_add1(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_add1$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_add1_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$1,"ggml_add1_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_add1_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_add1_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_add1_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_acc$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$3,"ggml_acc");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_acc(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, size_t nb1, size_t nb2, size_t nb3, size_t offset);
     * }
     */
    public static MemorySegment ggml_acc(MemorySegment ctx, MemorySegment a, MemorySegment b, long nb1, long nb2, long nb3, long offset) {
        var mh$ = ggml_acc$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, nb1, nb2, nb3, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_acc_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$4,"ggml_acc_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_acc_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, size_t nb1, size_t nb2, size_t nb3, size_t offset);
     * }
     */
    public static MemorySegment ggml_acc_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b, long nb1, long nb2, long nb3, long offset) {
        var mh$ = ggml_acc_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, nb1, nb2, nb3, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_sub$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$5,"ggml_sub");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_sub(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_sub(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_sub$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_sub_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$0,"ggml_sub_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_sub_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_sub_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_sub_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_mul$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$1,"ggml_mul");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_mul(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_mul(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_mul$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_mul_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$2,"ggml_mul_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_mul_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_mul_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_mul_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_div$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$3,"ggml_div");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_div(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_div(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_div$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_div_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$4,"ggml_div_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_div_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_div_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_div_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_sqr$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$5,"ggml_sqr");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_sqr(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_sqr(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sqr$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_sqr_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$0,"ggml_sqr_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_sqr_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_sqr_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sqr_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_sqrt$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$1,"ggml_sqrt");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_sqrt(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_sqrt(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sqrt$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_sqrt_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$2,"ggml_sqrt_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_sqrt_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_sqrt_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sqrt_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_log$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$3,"ggml_log");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_log(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_log(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_log$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_log_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$4,"ggml_log_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_log_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_log_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_log_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_sin$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$5,"ggml_sin");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_sin(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_sin(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sin$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_sin_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$0,"ggml_sin_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_sin_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_sin_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sin_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cos$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$1,"ggml_cos");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_cos(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_cos(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_cos$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cos_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$2,"ggml_cos_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_cos_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_cos_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_cos_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_sum$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$3,"ggml_sum");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_sum(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_sum(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sum$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_sum_rows$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$4,"ggml_sum_rows");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_sum_rows(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_sum_rows(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sum_rows$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_mean$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$5,"ggml_mean");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_mean(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_mean(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_mean$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_argmax$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$0,"ggml_argmax");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_argmax(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_argmax(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_argmax$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_count_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$1,"ggml_count_equal");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_count_equal(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_count_equal(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_count_equal$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_repeat$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$2,"ggml_repeat");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_repeat(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_repeat(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_repeat$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_repeat_back$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$3,"ggml_repeat_back");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_repeat_back(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_repeat_back(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_repeat_back$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_concat$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$4,"ggml_concat");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_concat(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int dim);
     * }
     */
    public static MemorySegment ggml_concat(MemorySegment ctx, MemorySegment a, MemorySegment b, int dim) {
        var mh$ = ggml_concat$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, dim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_abs$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$5,"ggml_abs");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_abs(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_abs(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_abs$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_abs_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$0,"ggml_abs_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_abs_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_abs_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_abs_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_sgn$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$1,"ggml_sgn");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_sgn(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_sgn(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sgn$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_sgn_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$2,"ggml_sgn_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_sgn_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_sgn_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sgn_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_neg$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$3,"ggml_neg");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_neg(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_neg(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_neg$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_neg_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$4,"ggml_neg_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_neg_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_neg_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_neg_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_step$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$5,"ggml_step");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_step(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_step(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_step$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_step_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$0,"ggml_step_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_step_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_step_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_step_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_tanh$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$1,"ggml_tanh");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_tanh(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_tanh(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_tanh$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_tanh_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$2,"ggml_tanh_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_tanh_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_tanh_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_tanh_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_elu$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$3,"ggml_elu");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_elu(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_elu(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_elu$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_elu_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$4,"ggml_elu_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_elu_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_elu_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_elu_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_relu$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$5,"ggml_relu");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_relu(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_relu(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_relu$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_leaky_relu$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$1,"ggml_leaky_relu");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_leaky_relu(struct ggml_context* ctx, struct ggml_tensor* a, float negative_slope, _Bool inplace);
     * }
     */
    public static MemorySegment ggml_leaky_relu(MemorySegment ctx, MemorySegment a, float negative_slope, boolean inplace) {
        var mh$ = ggml_leaky_relu$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, negative_slope, inplace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_relu_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$2,"ggml_relu_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_relu_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_relu_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_relu_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_sigmoid$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$3,"ggml_sigmoid");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_sigmoid(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_sigmoid(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sigmoid$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_sigmoid_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$4,"ggml_sigmoid_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_sigmoid_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_sigmoid_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sigmoid_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_gelu$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$5,"ggml_gelu");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_gelu(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_gelu(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_gelu$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_gelu_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$0,"ggml_gelu_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_gelu_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_gelu_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_gelu_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_gelu_quick$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$1,"ggml_gelu_quick");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_gelu_quick(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_gelu_quick(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_gelu_quick$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_gelu_quick_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$2,"ggml_gelu_quick_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_gelu_quick_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_gelu_quick_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_gelu_quick_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_silu$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$3,"ggml_silu");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_silu(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_silu(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_silu$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_silu_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$4,"ggml_silu_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_silu_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_silu_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_silu_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_silu_back$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$5,"ggml_silu_back");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_silu_back(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_silu_back(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_silu_back$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_hardswish$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$0,"ggml_hardswish");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_hardswish(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_hardswish(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_hardswish$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_hardsigmoid$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$1,"ggml_hardsigmoid");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_hardsigmoid(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_hardsigmoid(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_hardsigmoid$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_exp$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$2,"ggml_exp");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_exp(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_exp(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_exp$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_exp_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$3,"ggml_exp_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_exp_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_exp_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_exp_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_norm$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$5,"ggml_norm");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_norm(struct ggml_context* ctx, struct ggml_tensor* a, float eps);
     * }
     */
    public static MemorySegment ggml_norm(MemorySegment ctx, MemorySegment a, float eps) {
        var mh$ = ggml_norm$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, eps);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_norm_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$0,"ggml_norm_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_norm_inplace(struct ggml_context* ctx, struct ggml_tensor* a, float eps);
     * }
     */
    public static MemorySegment ggml_norm_inplace(MemorySegment ctx, MemorySegment a, float eps) {
        var mh$ = ggml_norm_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, eps);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rms_norm$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$1,"ggml_rms_norm");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_rms_norm(struct ggml_context* ctx, struct ggml_tensor* a, float eps);
     * }
     */
    public static MemorySegment ggml_rms_norm(MemorySegment ctx, MemorySegment a, float eps) {
        var mh$ = ggml_rms_norm$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, eps);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rms_norm_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$2,"ggml_rms_norm_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_rms_norm_inplace(struct ggml_context* ctx, struct ggml_tensor* a, float eps);
     * }
     */
    public static MemorySegment ggml_rms_norm_inplace(MemorySegment ctx, MemorySegment a, float eps) {
        var mh$ = ggml_rms_norm_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, eps);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_group_norm$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$4,"ggml_group_norm");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_group_norm(struct ggml_context* ctx, struct ggml_tensor* a, int n_groups, float eps);
     * }
     */
    public static MemorySegment ggml_group_norm(MemorySegment ctx, MemorySegment a, int n_groups, float eps) {
        var mh$ = ggml_group_norm$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, n_groups, eps);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_group_norm_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$5,"ggml_group_norm_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_group_norm_inplace(struct ggml_context* ctx, struct ggml_tensor* a, int n_groups, float eps);
     * }
     */
    public static MemorySegment ggml_group_norm_inplace(MemorySegment ctx, MemorySegment a, int n_groups, float eps) {
        var mh$ = ggml_group_norm_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, n_groups, eps);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rms_norm_back$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$1,"ggml_rms_norm_back");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_rms_norm_back(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, float eps);
     * }
     */
    public static MemorySegment ggml_rms_norm_back(MemorySegment ctx, MemorySegment a, MemorySegment b, float eps) {
        var mh$ = ggml_rms_norm_back$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, eps);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_mul_mat$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$2,"ggml_mul_mat");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_mul_mat(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_mul_mat(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_mul_mat$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_mul_mat_set_prec$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$4,"ggml_mul_mat_set_prec");
    }
    /**
     * {@snippet :
     * void ggml_mul_mat_set_prec(struct ggml_tensor* a, enum ggml_prec prec);
     * }
     */
    public static void ggml_mul_mat_set_prec(MemorySegment a, int prec) {
        var mh$ = ggml_mul_mat_set_prec$MH();
        try {
            mh$.invokeExact(a, prec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_mul_mat_id$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$6,"ggml_mul_mat_id");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_mul_mat_id(struct ggml_context* ctx, struct ggml_tensor* as, struct ggml_tensor* b, struct ggml_tensor* ids);
     * }
     */
    public static MemorySegment ggml_mul_mat_id(MemorySegment ctx, MemorySegment as, MemorySegment b, MemorySegment ids) {
        var mh$ = ggml_mul_mat_id$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, as, b, ids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_out_prod$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$0,"ggml_out_prod");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_out_prod(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_out_prod(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_out_prod$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_scale$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$1,"ggml_scale");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_scale(struct ggml_context* ctx, struct ggml_tensor* a, float s);
     * }
     */
    public static MemorySegment ggml_scale(MemorySegment ctx, MemorySegment a, float s) {
        var mh$ = ggml_scale$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_scale_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$2,"ggml_scale_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_scale_inplace(struct ggml_context* ctx, struct ggml_tensor* a, float s);
     * }
     */
    public static MemorySegment ggml_scale_inplace(MemorySegment ctx, MemorySegment a, float s) {
        var mh$ = ggml_scale_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$3,"ggml_set");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_set(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, size_t nb1, size_t nb2, size_t nb3, size_t offset);
     * }
     */
    public static MemorySegment ggml_set(MemorySegment ctx, MemorySegment a, MemorySegment b, long nb1, long nb2, long nb3, long offset) {
        var mh$ = ggml_set$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, nb1, nb2, nb3, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$4,"ggml_set_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_set_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, size_t nb1, size_t nb2, size_t nb3, size_t offset);
     * }
     */
    public static MemorySegment ggml_set_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b, long nb1, long nb2, long nb3, long offset) {
        var mh$ = ggml_set_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, nb1, nb2, nb3, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_1d$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$6,"ggml_set_1d");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_set_1d(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, size_t offset);
     * }
     */
    public static MemorySegment ggml_set_1d(MemorySegment ctx, MemorySegment a, MemorySegment b, long offset) {
        var mh$ = ggml_set_1d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_1d_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$0,"ggml_set_1d_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_set_1d_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, size_t offset);
     * }
     */
    public static MemorySegment ggml_set_1d_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b, long offset) {
        var mh$ = ggml_set_1d_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_2d$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$2,"ggml_set_2d");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_set_2d(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, size_t nb1, size_t offset);
     * }
     */
    public static MemorySegment ggml_set_2d(MemorySegment ctx, MemorySegment a, MemorySegment b, long nb1, long offset) {
        var mh$ = ggml_set_2d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, nb1, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_2d_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$3,"ggml_set_2d_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_set_2d_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, size_t nb1, size_t offset);
     * }
     */
    public static MemorySegment ggml_set_2d_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b, long nb1, long offset) {
        var mh$ = ggml_set_2d_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, nb1, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpy$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$4,"ggml_cpy");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_cpy(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_cpy(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_cpy$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cast$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$6,"ggml_cast");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_cast(struct ggml_context* ctx, struct ggml_tensor* a, enum ggml_type type);
     * }
     */
    public static MemorySegment ggml_cast(MemorySegment ctx, MemorySegment a, int type) {
        var mh$ = ggml_cast$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cont$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$0,"ggml_cont");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_cont(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_cont(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_cont$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cont_1d$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$2,"ggml_cont_1d");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_cont_1d(struct ggml_context* ctx, struct ggml_tensor* a, int64_t ne0);
     * }
     */
    public static MemorySegment ggml_cont_1d(MemorySegment ctx, MemorySegment a, long ne0) {
        var mh$ = ggml_cont_1d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cont_2d$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$4,"ggml_cont_2d");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_cont_2d(struct ggml_context* ctx, struct ggml_tensor* a, int64_t ne0, int64_t ne1);
     * }
     */
    public static MemorySegment ggml_cont_2d(MemorySegment ctx, MemorySegment a, long ne0, long ne1) {
        var mh$ = ggml_cont_2d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cont_3d$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$6,"ggml_cont_3d");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_cont_3d(struct ggml_context* ctx, struct ggml_tensor* a, int64_t ne0, int64_t ne1, int64_t ne2);
     * }
     */
    public static MemorySegment ggml_cont_3d(MemorySegment ctx, MemorySegment a, long ne0, long ne1, long ne2) {
        var mh$ = ggml_cont_3d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1, ne2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cont_4d$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$1,"ggml_cont_4d");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_cont_4d(struct ggml_context* ctx, struct ggml_tensor* a, int64_t ne0, int64_t ne1, int64_t ne2, int64_t ne3);
     * }
     */
    public static MemorySegment ggml_cont_4d(MemorySegment ctx, MemorySegment a, long ne0, long ne1, long ne2, long ne3) {
        var mh$ = ggml_cont_4d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1, ne2, ne3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_reshape$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$2,"ggml_reshape");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_reshape(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_reshape(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_reshape$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_reshape_1d$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$3,"ggml_reshape_1d");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_reshape_1d(struct ggml_context* ctx, struct ggml_tensor* a, int64_t ne0);
     * }
     */
    public static MemorySegment ggml_reshape_1d(MemorySegment ctx, MemorySegment a, long ne0) {
        var mh$ = ggml_reshape_1d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_reshape_2d$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$4,"ggml_reshape_2d");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_reshape_2d(struct ggml_context* ctx, struct ggml_tensor* a, int64_t ne0, int64_t ne1);
     * }
     */
    public static MemorySegment ggml_reshape_2d(MemorySegment ctx, MemorySegment a, long ne0, long ne1) {
        var mh$ = ggml_reshape_2d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_reshape_3d$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$5,"ggml_reshape_3d");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_reshape_3d(struct ggml_context* ctx, struct ggml_tensor* a, int64_t ne0, int64_t ne1, int64_t ne2);
     * }
     */
    public static MemorySegment ggml_reshape_3d(MemorySegment ctx, MemorySegment a, long ne0, long ne1, long ne2) {
        var mh$ = ggml_reshape_3d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1, ne2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_reshape_4d$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$0,"ggml_reshape_4d");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_reshape_4d(struct ggml_context* ctx, struct ggml_tensor* a, int64_t ne0, int64_t ne1, int64_t ne2, int64_t ne3);
     * }
     */
    public static MemorySegment ggml_reshape_4d(MemorySegment ctx, MemorySegment a, long ne0, long ne1, long ne2, long ne3) {
        var mh$ = ggml_reshape_4d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1, ne2, ne3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_view_1d$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$1,"ggml_view_1d");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_view_1d(struct ggml_context* ctx, struct ggml_tensor* a, int64_t ne0, size_t offset);
     * }
     */
    public static MemorySegment ggml_view_1d(MemorySegment ctx, MemorySegment a, long ne0, long offset) {
        var mh$ = ggml_view_1d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_view_2d$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$2,"ggml_view_2d");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_view_2d(struct ggml_context* ctx, struct ggml_tensor* a, int64_t ne0, int64_t ne1, size_t nb1, size_t offset);
     * }
     */
    public static MemorySegment ggml_view_2d(MemorySegment ctx, MemorySegment a, long ne0, long ne1, long nb1, long offset) {
        var mh$ = ggml_view_2d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1, nb1, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_view_3d$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$4,"ggml_view_3d");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_view_3d(struct ggml_context* ctx, struct ggml_tensor* a, int64_t ne0, int64_t ne1, int64_t ne2, size_t nb1, size_t nb2, size_t offset);
     * }
     */
    public static MemorySegment ggml_view_3d(MemorySegment ctx, MemorySegment a, long ne0, long ne1, long ne2, long nb1, long nb2, long offset) {
        var mh$ = ggml_view_3d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1, ne2, nb1, nb2, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_view_4d$MH() {
        return RuntimeHelper.requireNonNull(constants$65.const$6,"ggml_view_4d");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_view_4d(struct ggml_context* ctx, struct ggml_tensor* a, int64_t ne0, int64_t ne1, int64_t ne2, int64_t ne3, size_t nb1, size_t nb2, size_t nb3, size_t offset);
     * }
     */
    public static MemorySegment ggml_view_4d(MemorySegment ctx, MemorySegment a, long ne0, long ne1, long ne2, long ne3, long nb1, long nb2, long nb3, long offset) {
        var mh$ = ggml_view_4d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1, ne2, ne3, nb1, nb2, nb3, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_permute$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$1,"ggml_permute");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_permute(struct ggml_context* ctx, struct ggml_tensor* a, int axis0, int axis1, int axis2, int axis3);
     * }
     */
    public static MemorySegment ggml_permute(MemorySegment ctx, MemorySegment a, int axis0, int axis1, int axis2, int axis3) {
        var mh$ = ggml_permute$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, axis0, axis1, axis2, axis3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_transpose$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$2,"ggml_transpose");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_transpose(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_transpose(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_transpose$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_rows$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$3,"ggml_get_rows");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_get_rows(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_get_rows(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_get_rows$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_rows_back$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$4,"ggml_get_rows_back");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_get_rows_back(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, struct ggml_tensor* c);
     * }
     */
    public static MemorySegment ggml_get_rows_back(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment c) {
        var mh$ = ggml_get_rows_back$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_diag$MH() {
        return RuntimeHelper.requireNonNull(constants$66.const$5,"ggml_diag");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_diag(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_diag(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_diag$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_diag_mask_inf$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$0,"ggml_diag_mask_inf");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_diag_mask_inf(struct ggml_context* ctx, struct ggml_tensor* a, int n_past);
     * }
     */
    public static MemorySegment ggml_diag_mask_inf(MemorySegment ctx, MemorySegment a, int n_past) {
        var mh$ = ggml_diag_mask_inf$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, n_past);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_diag_mask_inf_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$1,"ggml_diag_mask_inf_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_diag_mask_inf_inplace(struct ggml_context* ctx, struct ggml_tensor* a, int n_past);
     * }
     */
    public static MemorySegment ggml_diag_mask_inf_inplace(MemorySegment ctx, MemorySegment a, int n_past) {
        var mh$ = ggml_diag_mask_inf_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, n_past);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_diag_mask_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$2,"ggml_diag_mask_zero");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_diag_mask_zero(struct ggml_context* ctx, struct ggml_tensor* a, int n_past);
     * }
     */
    public static MemorySegment ggml_diag_mask_zero(MemorySegment ctx, MemorySegment a, int n_past) {
        var mh$ = ggml_diag_mask_zero$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, n_past);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_diag_mask_zero_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$3,"ggml_diag_mask_zero_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_diag_mask_zero_inplace(struct ggml_context* ctx, struct ggml_tensor* a, int n_past);
     * }
     */
    public static MemorySegment ggml_diag_mask_zero_inplace(MemorySegment ctx, MemorySegment a, int n_past) {
        var mh$ = ggml_diag_mask_zero_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, n_past);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_soft_max$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$4,"ggml_soft_max");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_soft_max(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_soft_max(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_soft_max$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_soft_max_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$67.const$5,"ggml_soft_max_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_soft_max_inplace(struct ggml_context* ctx, struct ggml_tensor* a);
     * }
     */
    public static MemorySegment ggml_soft_max_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_soft_max_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_soft_max_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$1,"ggml_soft_max_ext");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_soft_max_ext(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* mask, float scale, float max_bias);
     * }
     */
    public static MemorySegment ggml_soft_max_ext(MemorySegment ctx, MemorySegment a, MemorySegment mask, float scale, float max_bias) {
        var mh$ = ggml_soft_max_ext$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, mask, scale, max_bias);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_soft_max_ext_back$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$2,"ggml_soft_max_ext_back");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_soft_max_ext_back(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, float scale, float max_bias);
     * }
     */
    public static MemorySegment ggml_soft_max_ext_back(MemorySegment ctx, MemorySegment a, MemorySegment b, float scale, float max_bias) {
        var mh$ = ggml_soft_max_ext_back$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, scale, max_bias);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_soft_max_ext_back_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$3,"ggml_soft_max_ext_back_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_soft_max_ext_back_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, float scale, float max_bias);
     * }
     */
    public static MemorySegment ggml_soft_max_ext_back_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b, float scale, float max_bias) {
        var mh$ = ggml_soft_max_ext_back_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, scale, max_bias);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rope$MH() {
        return RuntimeHelper.requireNonNull(constants$68.const$5,"ggml_rope");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_rope(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int n_dims, int mode);
     * }
     */
    public static MemorySegment ggml_rope(MemorySegment ctx, MemorySegment a, MemorySegment b, int n_dims, int mode) {
        var mh$ = ggml_rope$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, n_dims, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rope_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$0,"ggml_rope_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_rope_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int n_dims, int mode);
     * }
     */
    public static MemorySegment ggml_rope_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b, int n_dims, int mode) {
        var mh$ = ggml_rope_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, n_dims, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rope_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$2,"ggml_rope_ext");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_rope_ext(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, struct ggml_tensor* c, int n_dims, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow);
     * }
     */
    public static MemorySegment ggml_rope_ext(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment c, int n_dims, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow) {
        var mh$ = ggml_rope_ext$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, c, n_dims, mode, n_ctx_orig, freq_base, freq_scale, ext_factor, attn_factor, beta_fast, beta_slow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rope_multi$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$4,"ggml_rope_multi");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_rope_multi(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, struct ggml_tensor* c, int n_dims, int sections[4], int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow);
     * }
     */
    public static MemorySegment ggml_rope_multi(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment c, int n_dims, MemorySegment sections, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow) {
        var mh$ = ggml_rope_multi$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, c, n_dims, sections, mode, n_ctx_orig, freq_base, freq_scale, ext_factor, attn_factor, beta_fast, beta_slow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rope_ext_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$69.const$5,"ggml_rope_ext_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_rope_ext_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, struct ggml_tensor* c, int n_dims, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow);
     * }
     */
    public static MemorySegment ggml_rope_ext_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment c, int n_dims, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow) {
        var mh$ = ggml_rope_ext_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, c, n_dims, mode, n_ctx_orig, freq_base, freq_scale, ext_factor, attn_factor, beta_fast, beta_slow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rope_custom$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$1,"ggml_rope_custom");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_rope_custom(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int n_dims, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow);
     * }
     */
    public static MemorySegment ggml_rope_custom(MemorySegment ctx, MemorySegment a, MemorySegment b, int n_dims, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow) {
        var mh$ = ggml_rope_custom$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, n_dims, mode, n_ctx_orig, freq_base, freq_scale, ext_factor, attn_factor, beta_fast, beta_slow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rope_custom_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$2,"ggml_rope_custom_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_rope_custom_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int n_dims, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow);
     * }
     */
    public static MemorySegment ggml_rope_custom_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b, int n_dims, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow) {
        var mh$ = ggml_rope_custom_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, n_dims, mode, n_ctx_orig, freq_base, freq_scale, ext_factor, attn_factor, beta_fast, beta_slow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rope_yarn_corr_dims$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$4,"ggml_rope_yarn_corr_dims");
    }
    /**
     * {@snippet :
     * void ggml_rope_yarn_corr_dims(int n_dims, int n_ctx_orig, float freq_base, float beta_fast, float beta_slow, float dims[2]);
     * }
     */
    public static void ggml_rope_yarn_corr_dims(int n_dims, int n_ctx_orig, float freq_base, float beta_fast, float beta_slow, MemorySegment dims) {
        var mh$ = ggml_rope_yarn_corr_dims$MH();
        try {
            mh$.invokeExact(n_dims, n_ctx_orig, freq_base, beta_fast, beta_slow, dims);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rope_ext_back$MH() {
        return RuntimeHelper.requireNonNull(constants$70.const$5,"ggml_rope_ext_back");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_rope_ext_back(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, struct ggml_tensor* c, int n_dims, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow);
     * }
     */
    public static MemorySegment ggml_rope_ext_back(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment c, int n_dims, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow) {
        var mh$ = ggml_rope_ext_back$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, c, n_dims, mode, n_ctx_orig, freq_base, freq_scale, ext_factor, attn_factor, beta_fast, beta_slow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rope_multi_back$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$0,"ggml_rope_multi_back");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_rope_multi_back(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, struct ggml_tensor* c, int n_dims, int sections[4], int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow);
     * }
     */
    public static MemorySegment ggml_rope_multi_back(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment c, int n_dims, MemorySegment sections, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow) {
        var mh$ = ggml_rope_multi_back$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, c, n_dims, sections, mode, n_ctx_orig, freq_base, freq_scale, ext_factor, attn_factor, beta_fast, beta_slow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_clamp$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$2,"ggml_clamp");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_clamp(struct ggml_context* ctx, struct ggml_tensor* a, float min, float max);
     * }
     */
    public static MemorySegment ggml_clamp(MemorySegment ctx, MemorySegment a, float min, float max) {
        var mh$ = ggml_clamp$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, min, max);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_im2col$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$4,"ggml_im2col");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_im2col(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int s0, int s1, int p0, int p1, int d0, int d1, _Bool is_2D, enum ggml_type dst_type);
     * }
     */
    public static MemorySegment ggml_im2col(MemorySegment ctx, MemorySegment a, MemorySegment b, int s0, int s1, int p0, int p1, int d0, int d1, boolean is_2D, int dst_type) {
        var mh$ = ggml_im2col$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, s0, s1, p0, p1, d0, d1, is_2D, dst_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_im2col_back$MH() {
        return RuntimeHelper.requireNonNull(constants$71.const$6,"ggml_im2col_back");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_im2col_back(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int64_t* ne, int s0, int s1, int p0, int p1, int d0, int d1, _Bool is_2D);
     * }
     */
    public static MemorySegment ggml_im2col_back(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment ne, int s0, int s1, int p0, int p1, int d0, int d1, boolean is_2D) {
        var mh$ = ggml_im2col_back$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, ne, s0, s1, p0, p1, d0, d1, is_2D);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_conv_1d$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$1,"ggml_conv_1d");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_conv_1d(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int s0, int p0, int d0);
     * }
     */
    public static MemorySegment ggml_conv_1d(MemorySegment ctx, MemorySegment a, MemorySegment b, int s0, int p0, int d0) {
        var mh$ = ggml_conv_1d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, s0, p0, d0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_conv_1d_ph$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$2,"ggml_conv_1d_ph");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_conv_1d_ph(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int s, int d);
     * }
     */
    public static MemorySegment ggml_conv_1d_ph(MemorySegment ctx, MemorySegment a, MemorySegment b, int s, int d) {
        var mh$ = ggml_conv_1d_ph$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, s, d);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_conv_1d_dw$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$3,"ggml_conv_1d_dw");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_conv_1d_dw(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int s0, int p0, int d0);
     * }
     */
    public static MemorySegment ggml_conv_1d_dw(MemorySegment ctx, MemorySegment a, MemorySegment b, int s0, int p0, int d0) {
        var mh$ = ggml_conv_1d_dw$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, s0, p0, d0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_conv_1d_dw_ph$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$4,"ggml_conv_1d_dw_ph");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_conv_1d_dw_ph(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int s0, int d0);
     * }
     */
    public static MemorySegment ggml_conv_1d_dw_ph(MemorySegment ctx, MemorySegment a, MemorySegment b, int s0, int d0) {
        var mh$ = ggml_conv_1d_dw_ph$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, s0, d0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_conv_transpose_1d$MH() {
        return RuntimeHelper.requireNonNull(constants$72.const$5,"ggml_conv_transpose_1d");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_conv_transpose_1d(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int s0, int p0, int d0);
     * }
     */
    public static MemorySegment ggml_conv_transpose_1d(MemorySegment ctx, MemorySegment a, MemorySegment b, int s0, int p0, int d0) {
        var mh$ = ggml_conv_transpose_1d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, s0, p0, d0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_conv_2d$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$1,"ggml_conv_2d");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_conv_2d(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int s0, int s1, int p0, int p1, int d0, int d1);
     * }
     */
    public static MemorySegment ggml_conv_2d(MemorySegment ctx, MemorySegment a, MemorySegment b, int s0, int s1, int p0, int p1, int d0, int d1) {
        var mh$ = ggml_conv_2d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, s0, s1, p0, p1, d0, d1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_conv_2d_sk_p0$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$2,"ggml_conv_2d_sk_p0");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_conv_2d_sk_p0(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_conv_2d_sk_p0(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_conv_2d_sk_p0$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_conv_2d_s1_ph$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$3,"ggml_conv_2d_s1_ph");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_conv_2d_s1_ph(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_conv_2d_s1_ph(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_conv_2d_s1_ph$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_conv_2d_dw$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$4,"ggml_conv_2d_dw");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_conv_2d_dw(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int s0, int s1, int p0, int p1, int d0, int d1);
     * }
     */
    public static MemorySegment ggml_conv_2d_dw(MemorySegment ctx, MemorySegment a, MemorySegment b, int s0, int s1, int p0, int p1, int d0, int d1) {
        var mh$ = ggml_conv_2d_dw$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, s0, s1, p0, p1, d0, d1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_conv_transpose_2d_p0$MH() {
        return RuntimeHelper.requireNonNull(constants$73.const$5,"ggml_conv_transpose_2d_p0");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_conv_transpose_2d_p0(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, int stride);
     * }
     */
    public static MemorySegment ggml_conv_transpose_2d_p0(MemorySegment ctx, MemorySegment a, MemorySegment b, int stride) {
        var mh$ = ggml_conv_transpose_2d_p0$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, stride);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum ggml_op_pool.GGML_OP_POOL_MAX = 0;
     * }
     */
    public static int GGML_OP_POOL_MAX() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum ggml_op_pool.GGML_OP_POOL_AVG = 1;
     * }
     */
    public static int GGML_OP_POOL_AVG() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum ggml_op_pool.GGML_OP_POOL_COUNT = 2;
     * }
     */
    public static int GGML_OP_POOL_COUNT() {
        return (int)2L;
    }
    public static MethodHandle ggml_pool_1d$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$0,"ggml_pool_1d");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_pool_1d(struct ggml_context* ctx, struct ggml_tensor* a, enum ggml_op_pool op, int k0, int s0, int p0);
     * }
     */
    public static MemorySegment ggml_pool_1d(MemorySegment ctx, MemorySegment a, int op, int k0, int s0, int p0) {
        var mh$ = ggml_pool_1d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, op, k0, s0, p0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_pool_2d$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$2,"ggml_pool_2d");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_pool_2d(struct ggml_context* ctx, struct ggml_tensor* a, enum ggml_op_pool op, int k0, int k1, int s0, int s1, float p0, float p1);
     * }
     */
    public static MemorySegment ggml_pool_2d(MemorySegment ctx, MemorySegment a, int op, int k0, int k1, int s0, int s1, float p0, float p1) {
        var mh$ = ggml_pool_2d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, op, k0, k1, s0, s1, p0, p1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_pool_2d_back$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$4,"ggml_pool_2d_back");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_pool_2d_back(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* af, enum ggml_op_pool op, int k0, int k1, int s0, int s1, float p0, float p1);
     * }
     */
    public static MemorySegment ggml_pool_2d_back(MemorySegment ctx, MemorySegment a, MemorySegment af, int op, int k0, int k1, int s0, int s1, float p0, float p1) {
        var mh$ = ggml_pool_2d_back$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, af, op, k0, k1, s0, s1, p0, p1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_upscale$MH() {
        return RuntimeHelper.requireNonNull(constants$74.const$5,"ggml_upscale");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_upscale(struct ggml_context* ctx, struct ggml_tensor* a, int scale_factor);
     * }
     */
    public static MemorySegment ggml_upscale(MemorySegment ctx, MemorySegment a, int scale_factor) {
        var mh$ = ggml_upscale$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, scale_factor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_upscale_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$0,"ggml_upscale_ext");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_upscale_ext(struct ggml_context* ctx, struct ggml_tensor* a, int ne0, int ne1, int ne2, int ne3);
     * }
     */
    public static MemorySegment ggml_upscale_ext(MemorySegment ctx, MemorySegment a, int ne0, int ne1, int ne2, int ne3) {
        var mh$ = ggml_upscale_ext$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1, ne2, ne3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_pad$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$1,"ggml_pad");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_pad(struct ggml_context* ctx, struct ggml_tensor* a, int p0, int p1, int p2, int p3);
     * }
     */
    public static MemorySegment ggml_pad(MemorySegment ctx, MemorySegment a, int p0, int p1, int p2, int p3) {
        var mh$ = ggml_pad$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, p0, p1, p2, p3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_pad_reflect_1d$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$3,"ggml_pad_reflect_1d");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_pad_reflect_1d(struct ggml_context* ctx, struct ggml_tensor* a, int p0, int p1);
     * }
     */
    public static MemorySegment ggml_pad_reflect_1d(MemorySegment ctx, MemorySegment a, int p0, int p1) {
        var mh$ = ggml_pad_reflect_1d$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, p0, p1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_timestep_embedding$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$4,"ggml_timestep_embedding");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_timestep_embedding(struct ggml_context* ctx, struct ggml_tensor* timesteps, int dim, int max_period);
     * }
     */
    public static MemorySegment ggml_timestep_embedding(MemorySegment ctx, MemorySegment timesteps, int dim, int max_period) {
        var mh$ = ggml_timestep_embedding$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, timesteps, dim, max_period);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum ggml_sort_order.GGML_SORT_ORDER_ASC = 0;
     * }
     */
    public static int GGML_SORT_ORDER_ASC() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum ggml_sort_order.GGML_SORT_ORDER_DESC = 1;
     * }
     */
    public static int GGML_SORT_ORDER_DESC() {
        return (int)1L;
    }
    public static MethodHandle ggml_argsort$MH() {
        return RuntimeHelper.requireNonNull(constants$75.const$5,"ggml_argsort");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_argsort(struct ggml_context* ctx, struct ggml_tensor* a, enum ggml_sort_order order);
     * }
     */
    public static MemorySegment ggml_argsort(MemorySegment ctx, MemorySegment a, int order) {
        var mh$ = ggml_argsort$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, order);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_arange$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$1,"ggml_arange");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_arange(struct ggml_context* ctx, float start, float stop, float step);
     * }
     */
    public static MemorySegment ggml_arange(MemorySegment ctx, float start, float stop, float step) {
        var mh$ = ggml_arange$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, start, stop, step);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_top_k$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$2,"ggml_top_k");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_top_k(struct ggml_context* ctx, struct ggml_tensor* a, int k);
     * }
     */
    public static MemorySegment ggml_top_k(MemorySegment ctx, MemorySegment a, int k) {
        var mh$ = ggml_top_k$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, k);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_flash_attn_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$4,"ggml_flash_attn_ext");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_flash_attn_ext(struct ggml_context* ctx, struct ggml_tensor* q, struct ggml_tensor* k, struct ggml_tensor* v, struct ggml_tensor* mask, float scale, float max_bias, float logit_softcap);
     * }
     */
    public static MemorySegment ggml_flash_attn_ext(MemorySegment ctx, MemorySegment q, MemorySegment k, MemorySegment v, MemorySegment mask, float scale, float max_bias, float logit_softcap) {
        var mh$ = ggml_flash_attn_ext$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, q, k, v, mask, scale, max_bias, logit_softcap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_flash_attn_ext_set_prec$MH() {
        return RuntimeHelper.requireNonNull(constants$76.const$5,"ggml_flash_attn_ext_set_prec");
    }
    /**
     * {@snippet :
     * void ggml_flash_attn_ext_set_prec(struct ggml_tensor* a, enum ggml_prec prec);
     * }
     */
    public static void ggml_flash_attn_ext_set_prec(MemorySegment a, int prec) {
        var mh$ = ggml_flash_attn_ext_set_prec$MH();
        try {
            mh$.invokeExact(a, prec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_flash_attn_ext_get_prec$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$0,"ggml_flash_attn_ext_get_prec");
    }
    /**
     * {@snippet :
     * enum ggml_prec ggml_flash_attn_ext_get_prec(struct ggml_tensor* a);
     * }
     */
    public static int ggml_flash_attn_ext_get_prec(MemorySegment a) {
        var mh$ = ggml_flash_attn_ext_get_prec$MH();
        try {
            return (int)mh$.invokeExact(a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_flash_attn_back$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$2,"ggml_flash_attn_back");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_flash_attn_back(struct ggml_context* ctx, struct ggml_tensor* q, struct ggml_tensor* k, struct ggml_tensor* v, struct ggml_tensor* d, _Bool masked);
     * }
     */
    public static MemorySegment ggml_flash_attn_back(MemorySegment ctx, MemorySegment q, MemorySegment k, MemorySegment v, MemorySegment d, boolean masked) {
        var mh$ = ggml_flash_attn_back$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, q, k, v, d, masked);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_ssm_conv$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$3,"ggml_ssm_conv");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_ssm_conv(struct ggml_context* ctx, struct ggml_tensor* sx, struct ggml_tensor* c);
     * }
     */
    public static MemorySegment ggml_ssm_conv(MemorySegment ctx, MemorySegment sx, MemorySegment c) {
        var mh$ = ggml_ssm_conv$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, sx, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_ssm_scan$MH() {
        return RuntimeHelper.requireNonNull(constants$77.const$5,"ggml_ssm_scan");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_ssm_scan(struct ggml_context* ctx, struct ggml_tensor* s, struct ggml_tensor* x, struct ggml_tensor* dt, struct ggml_tensor* A, struct ggml_tensor* B, struct ggml_tensor* C);
     * }
     */
    public static MemorySegment ggml_ssm_scan(MemorySegment ctx, MemorySegment s, MemorySegment x, MemorySegment dt, MemorySegment A, MemorySegment B, MemorySegment C) {
        var mh$ = ggml_ssm_scan$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, s, x, dt, A, B, C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_win_part$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$0,"ggml_win_part");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_win_part(struct ggml_context* ctx, struct ggml_tensor* a, int w);
     * }
     */
    public static MemorySegment ggml_win_part(MemorySegment ctx, MemorySegment a, int w) {
        var mh$ = ggml_win_part$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_win_unpart$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$2,"ggml_win_unpart");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_win_unpart(struct ggml_context* ctx, struct ggml_tensor* a, int w0, int h0, int w);
     * }
     */
    public static MemorySegment ggml_win_unpart(MemorySegment ctx, MemorySegment a, int w0, int h0, int w) {
        var mh$ = ggml_win_unpart$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, w0, h0, w);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_unary$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$3,"ggml_unary");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_unary(struct ggml_context* ctx, struct ggml_tensor* a, enum ggml_unary_op op);
     * }
     */
    public static MemorySegment ggml_unary(MemorySegment ctx, MemorySegment a, int op) {
        var mh$ = ggml_unary$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_unary_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$4,"ggml_unary_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_unary_inplace(struct ggml_context* ctx, struct ggml_tensor* a, enum ggml_unary_op op);
     * }
     */
    public static MemorySegment ggml_unary_inplace(MemorySegment ctx, MemorySegment a, int op) {
        var mh$ = ggml_unary_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_rel_pos$MH() {
        return RuntimeHelper.requireNonNull(constants$78.const$5,"ggml_get_rel_pos");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_get_rel_pos(struct ggml_context* ctx, struct ggml_tensor* a, int qh, int kh);
     * }
     */
    public static MemorySegment ggml_get_rel_pos(MemorySegment ctx, MemorySegment a, int qh, int kh) {
        var mh$ = ggml_get_rel_pos$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, qh, kh);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_add_rel_pos$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$0,"ggml_add_rel_pos");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_add_rel_pos(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* pw, struct ggml_tensor* ph);
     * }
     */
    public static MemorySegment ggml_add_rel_pos(MemorySegment ctx, MemorySegment a, MemorySegment pw, MemorySegment ph) {
        var mh$ = ggml_add_rel_pos$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, pw, ph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_add_rel_pos_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$1,"ggml_add_rel_pos_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_add_rel_pos_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* pw, struct ggml_tensor* ph);
     * }
     */
    public static MemorySegment ggml_add_rel_pos_inplace(MemorySegment ctx, MemorySegment a, MemorySegment pw, MemorySegment ph) {
        var mh$ = ggml_add_rel_pos_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, pw, ph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_rwkv_wkv6$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$2,"ggml_rwkv_wkv6");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_rwkv_wkv6(struct ggml_context* ctx, struct ggml_tensor* k, struct ggml_tensor* v, struct ggml_tensor* r, struct ggml_tensor* tf, struct ggml_tensor* td, struct ggml_tensor* state);
     * }
     */
    public static MemorySegment ggml_rwkv_wkv6(MemorySegment ctx, MemorySegment k, MemorySegment v, MemorySegment r, MemorySegment tf, MemorySegment td, MemorySegment state) {
        var mh$ = ggml_rwkv_wkv6$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, k, v, r, tf, td, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_gated_linear_attn$MH() {
        return RuntimeHelper.requireNonNull(constants$79.const$4,"ggml_gated_linear_attn");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_gated_linear_attn(struct ggml_context* ctx, struct ggml_tensor* k, struct ggml_tensor* v, struct ggml_tensor* q, struct ggml_tensor* g, struct ggml_tensor* state, float scale);
     * }
     */
    public static MemorySegment ggml_gated_linear_attn(MemorySegment ctx, MemorySegment k, MemorySegment v, MemorySegment q, MemorySegment g, MemorySegment state, float scale) {
        var mh$ = ggml_gated_linear_attn$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, k, v, q, g, state, scale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_unary_f32$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$1,"ggml_map_unary_f32");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_map_unary_f32(struct ggml_context* ctx, struct ggml_tensor* a, ggml_unary_op_f32_t fun);
     * }
     */
    public static MemorySegment ggml_map_unary_f32(MemorySegment ctx, MemorySegment a, MemorySegment fun) {
        var mh$ = ggml_map_unary_f32$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, fun);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_unary_inplace_f32$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$2,"ggml_map_unary_inplace_f32");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_map_unary_inplace_f32(struct ggml_context* ctx, struct ggml_tensor* a, ggml_unary_op_f32_t fun);
     * }
     */
    public static MemorySegment ggml_map_unary_inplace_f32(MemorySegment ctx, MemorySegment a, MemorySegment fun) {
        var mh$ = ggml_map_unary_inplace_f32$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, fun);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_binary_f32$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$3,"ggml_map_binary_f32");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_map_binary_f32(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, ggml_binary_op_f32_t fun);
     * }
     */
    public static MemorySegment ggml_map_binary_f32(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment fun) {
        var mh$ = ggml_map_binary_f32$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, fun);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_binary_inplace_f32$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$4,"ggml_map_binary_inplace_f32");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_map_binary_inplace_f32(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, ggml_binary_op_f32_t fun);
     * }
     */
    public static MemorySegment ggml_map_binary_inplace_f32(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment fun) {
        var mh$ = ggml_map_binary_inplace_f32$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, fun);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_custom1_f32$MH() {
        return RuntimeHelper.requireNonNull(constants$82.const$5,"ggml_map_custom1_f32");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_map_custom1_f32(struct ggml_context* ctx, struct ggml_tensor* a, ggml_custom1_op_f32_t fun);
     * }
     */
    public static MemorySegment ggml_map_custom1_f32(MemorySegment ctx, MemorySegment a, MemorySegment fun) {
        var mh$ = ggml_map_custom1_f32$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, fun);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_custom1_inplace_f32$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$0,"ggml_map_custom1_inplace_f32");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_map_custom1_inplace_f32(struct ggml_context* ctx, struct ggml_tensor* a, ggml_custom1_op_f32_t fun);
     * }
     */
    public static MemorySegment ggml_map_custom1_inplace_f32(MemorySegment ctx, MemorySegment a, MemorySegment fun) {
        var mh$ = ggml_map_custom1_inplace_f32$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, fun);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_custom2_f32$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$1,"ggml_map_custom2_f32");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_map_custom2_f32(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, ggml_custom2_op_f32_t fun);
     * }
     */
    public static MemorySegment ggml_map_custom2_f32(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment fun) {
        var mh$ = ggml_map_custom2_f32$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, fun);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_custom2_inplace_f32$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$2,"ggml_map_custom2_inplace_f32");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_map_custom2_inplace_f32(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, ggml_custom2_op_f32_t fun);
     * }
     */
    public static MemorySegment ggml_map_custom2_inplace_f32(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment fun) {
        var mh$ = ggml_map_custom2_inplace_f32$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, fun);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_custom3_f32$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$4,"ggml_map_custom3_f32");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_map_custom3_f32(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, struct ggml_tensor* c, ggml_custom3_op_f32_t fun);
     * }
     */
    public static MemorySegment ggml_map_custom3_f32(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment c, MemorySegment fun) {
        var mh$ = ggml_map_custom3_f32$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, c, fun);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_custom3_inplace_f32$MH() {
        return RuntimeHelper.requireNonNull(constants$83.const$5,"ggml_map_custom3_inplace_f32");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_map_custom3_inplace_f32(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, struct ggml_tensor* c, ggml_custom3_op_f32_t fun);
     * }
     */
    public static MemorySegment ggml_map_custom3_inplace_f32(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment c, MemorySegment fun) {
        var mh$ = ggml_map_custom3_inplace_f32$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, c, fun);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_custom1$MH() {
        return RuntimeHelper.requireNonNull(constants$85.const$4,"ggml_map_custom1");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_map_custom1(struct ggml_context* ctx, struct ggml_tensor* a, ggml_custom1_op_t fun, int n_tasks, void* userdata);
     * }
     */
    public static MemorySegment ggml_map_custom1(MemorySegment ctx, MemorySegment a, MemorySegment fun, int n_tasks, MemorySegment userdata) {
        var mh$ = ggml_map_custom1$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, fun, n_tasks, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_custom1_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$85.const$5,"ggml_map_custom1_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_map_custom1_inplace(struct ggml_context* ctx, struct ggml_tensor* a, ggml_custom1_op_t fun, int n_tasks, void* userdata);
     * }
     */
    public static MemorySegment ggml_map_custom1_inplace(MemorySegment ctx, MemorySegment a, MemorySegment fun, int n_tasks, MemorySegment userdata) {
        var mh$ = ggml_map_custom1_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, fun, n_tasks, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_custom2$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$1,"ggml_map_custom2");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_map_custom2(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, ggml_custom2_op_t fun, int n_tasks, void* userdata);
     * }
     */
    public static MemorySegment ggml_map_custom2(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment fun, int n_tasks, MemorySegment userdata) {
        var mh$ = ggml_map_custom2$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, fun, n_tasks, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_custom2_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$2,"ggml_map_custom2_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_map_custom2_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, ggml_custom2_op_t fun, int n_tasks, void* userdata);
     * }
     */
    public static MemorySegment ggml_map_custom2_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment fun, int n_tasks, MemorySegment userdata) {
        var mh$ = ggml_map_custom2_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, fun, n_tasks, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_custom3$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$4,"ggml_map_custom3");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_map_custom3(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, struct ggml_tensor* c, ggml_custom3_op_t fun, int n_tasks, void* userdata);
     * }
     */
    public static MemorySegment ggml_map_custom3(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment c, MemorySegment fun, int n_tasks, MemorySegment userdata) {
        var mh$ = ggml_map_custom3$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, c, fun, n_tasks, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_map_custom3_inplace$MH() {
        return RuntimeHelper.requireNonNull(constants$86.const$5,"ggml_map_custom3_inplace");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_map_custom3_inplace(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, struct ggml_tensor* c, ggml_custom3_op_t fun, int n_tasks, void* userdata);
     * }
     */
    public static MemorySegment ggml_map_custom3_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment c, MemorySegment fun, int n_tasks, MemorySegment userdata) {
        var mh$ = ggml_map_custom3_inplace$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, c, fun, n_tasks, userdata);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cross_entropy_loss$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$0,"ggml_cross_entropy_loss");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_cross_entropy_loss(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b);
     * }
     */
    public static MemorySegment ggml_cross_entropy_loss(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_cross_entropy_loss$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cross_entropy_loss_back$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$1,"ggml_cross_entropy_loss_back");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_cross_entropy_loss_back(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* b, struct ggml_tensor* c);
     * }
     */
    public static MemorySegment ggml_cross_entropy_loss_back(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment c) {
        var mh$ = ggml_cross_entropy_loss_back$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, b, c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_opt_step_adamw$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$3,"ggml_opt_step_adamw");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_opt_step_adamw(struct ggml_context* ctx, struct ggml_tensor* a, struct ggml_tensor* grad, struct ggml_tensor* m, struct ggml_tensor* v, struct ggml_tensor* adamw_params);
     * }
     */
    public static MemorySegment ggml_opt_step_adamw(MemorySegment ctx, MemorySegment a, MemorySegment grad, MemorySegment m, MemorySegment v, MemorySegment adamw_params) {
        var mh$ = ggml_opt_step_adamw$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, a, grad, m, v, adamw_params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_build_forward_expand$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$4,"ggml_build_forward_expand");
    }
    /**
     * {@snippet :
     * void ggml_build_forward_expand(struct ggml_cgraph* cgraph, struct ggml_tensor* tensor);
     * }
     */
    public static void ggml_build_forward_expand(MemorySegment cgraph, MemorySegment tensor) {
        var mh$ = ggml_build_forward_expand$MH();
        try {
            mh$.invokeExact(cgraph, tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_build_backward_expand$MH() {
        return RuntimeHelper.requireNonNull(constants$87.const$6,"ggml_build_backward_expand");
    }
    /**
     * {@snippet :
     * void ggml_build_backward_expand(struct ggml_context* ctx_static, struct ggml_context* ctx_compute, struct ggml_cgraph* cgraph, _Bool accumulate);
     * }
     */
    public static void ggml_build_backward_expand(MemorySegment ctx_static, MemorySegment ctx_compute, MemorySegment cgraph, boolean accumulate) {
        var mh$ = ggml_build_backward_expand$MH();
        try {
            mh$.invokeExact(ctx_static, ctx_compute, cgraph, accumulate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_new_graph$MH() {
        return RuntimeHelper.requireNonNull(constants$88.const$0,"ggml_new_graph");
    }
    /**
     * {@snippet :
     * struct ggml_cgraph* ggml_new_graph(struct ggml_context* ctx);
     * }
     */
    public static MemorySegment ggml_new_graph(MemorySegment ctx) {
        var mh$ = ggml_new_graph$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_new_graph_custom$MH() {
        return RuntimeHelper.requireNonNull(constants$88.const$2,"ggml_new_graph_custom");
    }
    /**
     * {@snippet :
     * struct ggml_cgraph* ggml_new_graph_custom(struct ggml_context* ctx, size_t size, _Bool grads);
     * }
     */
    public static MemorySegment ggml_new_graph_custom(MemorySegment ctx, long size, boolean grads) {
        var mh$ = ggml_new_graph_custom$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, size, grads);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$88.const$3,"ggml_graph_dup");
    }
    /**
     * {@snippet :
     * struct ggml_cgraph* ggml_graph_dup(struct ggml_context* ctx, struct ggml_cgraph* cgraph);
     * }
     */
    public static MemorySegment ggml_graph_dup(MemorySegment ctx, MemorySegment cgraph) {
        var mh$ = ggml_graph_dup$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, cgraph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_cpy$MH() {
        return RuntimeHelper.requireNonNull(constants$88.const$4,"ggml_graph_cpy");
    }
    /**
     * {@snippet :
     * void ggml_graph_cpy(struct ggml_cgraph* src, struct ggml_cgraph* dst);
     * }
     */
    public static void ggml_graph_cpy(MemorySegment src, MemorySegment dst) {
        var mh$ = ggml_graph_cpy$MH();
        try {
            mh$.invokeExact(src, dst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$88.const$5,"ggml_graph_reset");
    }
    /**
     * {@snippet :
     * void ggml_graph_reset(struct ggml_cgraph* cgraph);
     * }
     */
    public static void ggml_graph_reset(MemorySegment cgraph) {
        var mh$ = ggml_graph_reset$MH();
        try {
            mh$.invokeExact(cgraph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$89.const$0,"ggml_graph_clear");
    }
    /**
     * {@snippet :
     * void ggml_graph_clear(struct ggml_cgraph* cgraph);
     * }
     */
    public static void ggml_graph_clear(MemorySegment cgraph) {
        var mh$ = ggml_graph_clear$MH();
        try {
            mh$.invokeExact(cgraph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_size$MH() {
        return RuntimeHelper.requireNonNull(constants$89.const$1,"ggml_graph_size");
    }
    /**
     * {@snippet :
     * int ggml_graph_size(struct ggml_cgraph* cgraph);
     * }
     */
    public static int ggml_graph_size(MemorySegment cgraph) {
        var mh$ = ggml_graph_size$MH();
        try {
            return (int)mh$.invokeExact(cgraph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_node$MH() {
        return RuntimeHelper.requireNonNull(constants$89.const$3,"ggml_graph_node");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_graph_node(struct ggml_cgraph* cgraph, int i);
     * }
     */
    public static MemorySegment ggml_graph_node(MemorySegment cgraph, int i) {
        var mh$ = ggml_graph_node$MH();
        try {
            return (MemorySegment)mh$.invokeExact(cgraph, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_nodes$MH() {
        return RuntimeHelper.requireNonNull(constants$89.const$4,"ggml_graph_nodes");
    }
    /**
     * {@snippet :
     * struct ggml_tensor** ggml_graph_nodes(struct ggml_cgraph* cgraph);
     * }
     */
    public static MemorySegment ggml_graph_nodes(MemorySegment cgraph) {
        var mh$ = ggml_graph_nodes$MH();
        try {
            return (MemorySegment)mh$.invokeExact(cgraph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_n_nodes$MH() {
        return RuntimeHelper.requireNonNull(constants$89.const$5,"ggml_graph_n_nodes");
    }
    /**
     * {@snippet :
     * int ggml_graph_n_nodes(struct ggml_cgraph* cgraph);
     * }
     */
    public static int ggml_graph_n_nodes(MemorySegment cgraph) {
        var mh$ = ggml_graph_n_nodes$MH();
        try {
            return (int)mh$.invokeExact(cgraph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_add_node$MH() {
        return RuntimeHelper.requireNonNull(constants$90.const$0,"ggml_graph_add_node");
    }
    /**
     * {@snippet :
     * void ggml_graph_add_node(struct ggml_cgraph* cgraph, struct ggml_tensor* tensor);
     * }
     */
    public static void ggml_graph_add_node(MemorySegment cgraph, MemorySegment tensor) {
        var mh$ = ggml_graph_add_node$MH();
        try {
            mh$.invokeExact(cgraph, tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_overhead$MH() {
        return RuntimeHelper.requireNonNull(constants$90.const$1,"ggml_graph_overhead");
    }
    /**
     * {@snippet :
     * size_t ggml_graph_overhead();
     * }
     */
    public static long ggml_graph_overhead() {
        var mh$ = ggml_graph_overhead$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_overhead_custom$MH() {
        return RuntimeHelper.requireNonNull(constants$90.const$3,"ggml_graph_overhead_custom");
    }
    /**
     * {@snippet :
     * size_t ggml_graph_overhead_custom(size_t size, _Bool grads);
     * }
     */
    public static long ggml_graph_overhead_custom(long size, boolean grads) {
        var mh$ = ggml_graph_overhead_custom$MH();
        try {
            return (long)mh$.invokeExact(size, grads);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_get_tensor$MH() {
        return RuntimeHelper.requireNonNull(constants$90.const$4,"ggml_graph_get_tensor");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_graph_get_tensor(struct ggml_cgraph* cgraph, char* name);
     * }
     */
    public static MemorySegment ggml_graph_get_tensor(MemorySegment cgraph, MemorySegment name) {
        var mh$ = ggml_graph_get_tensor$MH();
        try {
            return (MemorySegment)mh$.invokeExact(cgraph, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_get_grad$MH() {
        return RuntimeHelper.requireNonNull(constants$90.const$5,"ggml_graph_get_grad");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_graph_get_grad(struct ggml_cgraph* cgraph, struct ggml_tensor* node);
     * }
     */
    public static MemorySegment ggml_graph_get_grad(MemorySegment cgraph, MemorySegment node) {
        var mh$ = ggml_graph_get_grad$MH();
        try {
            return (MemorySegment)mh$.invokeExact(cgraph, node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_get_grad_acc$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$0,"ggml_graph_get_grad_acc");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_graph_get_grad_acc(struct ggml_cgraph* cgraph, struct ggml_tensor* node);
     * }
     */
    public static MemorySegment ggml_graph_get_grad_acc(MemorySegment cgraph, MemorySegment node) {
        var mh$ = ggml_graph_get_grad_acc$MH();
        try {
            return (MemorySegment)mh$.invokeExact(cgraph, node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_export$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$1,"ggml_graph_export");
    }
    /**
     * {@snippet :
     * void ggml_graph_export(struct ggml_cgraph* cgraph, char* fname);
     * }
     */
    public static void ggml_graph_export(MemorySegment cgraph, MemorySegment fname) {
        var mh$ = ggml_graph_export$MH();
        try {
            mh$.invokeExact(cgraph, fname);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_import$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$2,"ggml_graph_import");
    }
    /**
     * {@snippet :
     * struct ggml_cgraph* ggml_graph_import(char* fname, struct ggml_context** ctx_data, struct ggml_context** ctx_eval);
     * }
     */
    public static MemorySegment ggml_graph_import(MemorySegment fname, MemorySegment ctx_data, MemorySegment ctx_eval) {
        var mh$ = ggml_graph_import$MH();
        try {
            return (MemorySegment)mh$.invokeExact(fname, ctx_data, ctx_eval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_print$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$3,"ggml_graph_print");
    }
    /**
     * {@snippet :
     * void ggml_graph_print(struct ggml_cgraph* cgraph);
     * }
     */
    public static void ggml_graph_print(MemorySegment cgraph) {
        var mh$ = ggml_graph_print$MH();
        try {
            mh$.invokeExact(cgraph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_dump_dot$MH() {
        return RuntimeHelper.requireNonNull(constants$91.const$4,"ggml_graph_dump_dot");
    }
    /**
     * {@snippet :
     * void ggml_graph_dump_dot(struct ggml_cgraph* gb, struct ggml_cgraph* gf, char* filename);
     * }
     */
    public static void ggml_graph_dump_dot(MemorySegment gb, MemorySegment gf, MemorySegment filename) {
        var mh$ = ggml_graph_dump_dot$MH();
        try {
            mh$.invokeExact(gb, gf, filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_log_set$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$0,"ggml_log_set");
    }
    /**
     * {@snippet :
     * void ggml_log_set(ggml_log_callback log_callback, void* user_data);
     * }
     */
    public static void ggml_log_set(MemorySegment log_callback, MemorySegment user_data) {
        var mh$ = ggml_log_set$MH();
        try {
            mh$.invokeExact(log_callback, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_zero$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$1,"ggml_set_zero");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_set_zero(struct ggml_tensor* tensor);
     * }
     */
    public static MemorySegment ggml_set_zero(MemorySegment tensor) {
        var mh$ = ggml_set_zero$MH();
        try {
            return (MemorySegment)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_quantize_init$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$3,"ggml_quantize_init");
    }
    /**
     * {@snippet :
     * void ggml_quantize_init(enum ggml_type type);
     * }
     */
    public static void ggml_quantize_init(int type) {
        var mh$ = ggml_quantize_init$MH();
        try {
            mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_quantize_free$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$4,"ggml_quantize_free");
    }
    /**
     * {@snippet :
     * void ggml_quantize_free();
     * }
     */
    public static void ggml_quantize_free() {
        var mh$ = ggml_quantize_free$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_quantize_requires_imatrix$MH() {
        return RuntimeHelper.requireNonNull(constants$92.const$5,"ggml_quantize_requires_imatrix");
    }
    /**
     * {@snippet :
     * _Bool ggml_quantize_requires_imatrix(enum ggml_type type);
     * }
     */
    public static boolean ggml_quantize_requires_imatrix(int type) {
        var mh$ = ggml_quantize_requires_imatrix$MH();
        try {
            return (boolean)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_quantize_chunk$MH() {
        return RuntimeHelper.requireNonNull(constants$93.const$1,"ggml_quantize_chunk");
    }
    /**
     * {@snippet :
     * size_t ggml_quantize_chunk(enum ggml_type type, float* src, void* dst, int64_t start, int64_t nrows, int64_t n_per_row, float* imatrix);
     * }
     */
    public static long ggml_quantize_chunk(int type, MemorySegment src, MemorySegment dst, long start, long nrows, long n_per_row, MemorySegment imatrix) {
        var mh$ = ggml_quantize_chunk$MH();
        try {
            return (long)mh$.invokeExact(type, src, dst, start, nrows, n_per_row, imatrix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_type_traits$MH() {
        return RuntimeHelper.requireNonNull(constants$95.const$1,"ggml_get_type_traits");
    }
    /**
     * {@snippet :
     * struct ggml_type_traits* ggml_get_type_traits(enum ggml_type type);
     * }
     */
    public static MemorySegment ggml_get_type_traits(int type) {
        var mh$ = ggml_get_type_traits$MH();
        try {
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum ggml_sched_priority.GGML_SCHED_PRIO_NORMAL = 0;
     * }
     */
    public static int GGML_SCHED_PRIO_NORMAL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum ggml_sched_priority.GGML_SCHED_PRIO_MEDIUM = 1;
     * }
     */
    public static int GGML_SCHED_PRIO_MEDIUM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum ggml_sched_priority.GGML_SCHED_PRIO_HIGH = 2;
     * }
     */
    public static int GGML_SCHED_PRIO_HIGH() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum ggml_sched_priority.GGML_SCHED_PRIO_REALTIME = 3;
     * }
     */
    public static int GGML_SCHED_PRIO_REALTIME() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * typedef struct ggml_threadpool* ggml_threadpool_t;
     * }
     */
    public static final AddressLayout ggml_threadpool_t = RuntimeHelper.POINTER;
    public static MethodHandle ggml_threadpool_params_default$MH() {
        return RuntimeHelper.requireNonNull(constants$96.const$3,"ggml_threadpool_params_default");
    }
    /**
     * {@snippet :
     * struct ggml_threadpool_params ggml_threadpool_params_default(int n_threads);
     * }
     */
    public static MemorySegment ggml_threadpool_params_default(SegmentAllocator allocator, int n_threads) {
        var mh$ = ggml_threadpool_params_default$MH();
        try {
            return (MemorySegment)mh$.invokeExact(allocator, n_threads);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_threadpool_params_init$MH() {
        return RuntimeHelper.requireNonNull(constants$96.const$4,"ggml_threadpool_params_init");
    }
    /**
     * {@snippet :
     * void ggml_threadpool_params_init(struct ggml_threadpool_params* p, int n_threads);
     * }
     */
    public static void ggml_threadpool_params_init(MemorySegment p, int n_threads) {
        var mh$ = ggml_threadpool_params_init$MH();
        try {
            mh$.invokeExact(p, n_threads);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_threadpool_params_match$MH() {
        return RuntimeHelper.requireNonNull(constants$96.const$5,"ggml_threadpool_params_match");
    }
    /**
     * {@snippet :
     * _Bool ggml_threadpool_params_match(struct ggml_threadpool_params* p0, struct ggml_threadpool_params* p1);
     * }
     */
    public static boolean ggml_threadpool_params_match(MemorySegment p0, MemorySegment p1) {
        var mh$ = ggml_threadpool_params_match$MH();
        try {
            return (boolean)mh$.invokeExact(p0, p1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct ggml_backend_buffer_type* ggml_backend_buffer_type_t;
     * }
     */
    public static final AddressLayout ggml_backend_buffer_type_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct ggml_backend_buffer* ggml_backend_buffer_t;
     * }
     */
    public static final AddressLayout ggml_backend_buffer_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct ggml_backend* ggml_backend_t;
     * }
     */
    public static final AddressLayout ggml_backend_t = RuntimeHelper.POINTER;
    public static MethodHandle ggml_tallocr_new$MH() {
        return RuntimeHelper.requireNonNull(constants$97.const$6,"ggml_tallocr_new");
    }
    /**
     * {@snippet :
     * struct ggml_tallocr ggml_tallocr_new(ggml_backend_buffer_t buffer);
     * }
     */
    public static MemorySegment ggml_tallocr_new(SegmentAllocator allocator, MemorySegment buffer) {
        var mh$ = ggml_tallocr_new$MH();
        try {
            return (MemorySegment)mh$.invokeExact(allocator, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_tallocr_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$0,"ggml_tallocr_alloc");
    }
    /**
     * {@snippet :
     * enum ggml_status ggml_tallocr_alloc(struct ggml_tallocr* talloc, struct ggml_tensor* tensor);
     * }
     */
    public static int ggml_tallocr_alloc(MemorySegment talloc, MemorySegment tensor) {
        var mh$ = ggml_tallocr_alloc$MH();
        try {
            return (int)mh$.invokeExact(talloc, tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct ggml_gallocr* ggml_gallocr_t;
     * }
     */
    public static final AddressLayout ggml_gallocr_t = RuntimeHelper.POINTER;
    public static MethodHandle ggml_gallocr_new$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$1,"ggml_gallocr_new");
    }
    /**
     * {@snippet :
     * ggml_gallocr_t ggml_gallocr_new(ggml_backend_buffer_type_t buft);
     * }
     */
    public static MemorySegment ggml_gallocr_new(MemorySegment buft) {
        var mh$ = ggml_gallocr_new$MH();
        try {
            return (MemorySegment)mh$.invokeExact(buft);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_gallocr_new_n$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$2,"ggml_gallocr_new_n");
    }
    /**
     * {@snippet :
     * ggml_gallocr_t ggml_gallocr_new_n(ggml_backend_buffer_type_t* bufts, int n_bufs);
     * }
     */
    public static MemorySegment ggml_gallocr_new_n(MemorySegment bufts, int n_bufs) {
        var mh$ = ggml_gallocr_new_n$MH();
        try {
            return (MemorySegment)mh$.invokeExact(bufts, n_bufs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_gallocr_free$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$3,"ggml_gallocr_free");
    }
    /**
     * {@snippet :
     * void ggml_gallocr_free(ggml_gallocr_t galloc);
     * }
     */
    public static void ggml_gallocr_free(MemorySegment galloc) {
        var mh$ = ggml_gallocr_free$MH();
        try {
            mh$.invokeExact(galloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_gallocr_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$4,"ggml_gallocr_reserve");
    }
    /**
     * {@snippet :
     * _Bool ggml_gallocr_reserve(ggml_gallocr_t galloc, struct ggml_cgraph* graph);
     * }
     */
    public static boolean ggml_gallocr_reserve(MemorySegment galloc, MemorySegment graph) {
        var mh$ = ggml_gallocr_reserve$MH();
        try {
            return (boolean)mh$.invokeExact(galloc, graph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_gallocr_reserve_n$MH() {
        return RuntimeHelper.requireNonNull(constants$98.const$6,"ggml_gallocr_reserve_n");
    }
    /**
     * {@snippet :
     * _Bool ggml_gallocr_reserve_n(ggml_gallocr_t galloc, struct ggml_cgraph* graph, int* node_buffer_ids, int* leaf_buffer_ids);
     * }
     */
    public static boolean ggml_gallocr_reserve_n(MemorySegment galloc, MemorySegment graph, MemorySegment node_buffer_ids, MemorySegment leaf_buffer_ids) {
        var mh$ = ggml_gallocr_reserve_n$MH();
        try {
            return (boolean)mh$.invokeExact(galloc, graph, node_buffer_ids, leaf_buffer_ids);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_gallocr_alloc_graph$MH() {
        return RuntimeHelper.requireNonNull(constants$99.const$0,"ggml_gallocr_alloc_graph");
    }
    /**
     * {@snippet :
     * _Bool ggml_gallocr_alloc_graph(ggml_gallocr_t galloc, struct ggml_cgraph* graph);
     * }
     */
    public static boolean ggml_gallocr_alloc_graph(MemorySegment galloc, MemorySegment graph) {
        var mh$ = ggml_gallocr_alloc_graph$MH();
        try {
            return (boolean)mh$.invokeExact(galloc, graph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_gallocr_get_buffer_size$MH() {
        return RuntimeHelper.requireNonNull(constants$99.const$2,"ggml_gallocr_get_buffer_size");
    }
    /**
     * {@snippet :
     * size_t ggml_gallocr_get_buffer_size(ggml_gallocr_t galloc, int buffer_id);
     * }
     */
    public static long ggml_gallocr_get_buffer_size(MemorySegment galloc, int buffer_id) {
        var mh$ = ggml_gallocr_get_buffer_size$MH();
        try {
            return (long)mh$.invokeExact(galloc, buffer_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_alloc_ctx_tensors_from_buft$MH() {
        return RuntimeHelper.requireNonNull(constants$99.const$3,"ggml_backend_alloc_ctx_tensors_from_buft");
    }
    /**
     * {@snippet :
     * struct ggml_backend_buffer* ggml_backend_alloc_ctx_tensors_from_buft(struct ggml_context* ctx, ggml_backend_buffer_type_t buft);
     * }
     */
    public static MemorySegment ggml_backend_alloc_ctx_tensors_from_buft(MemorySegment ctx, MemorySegment buft) {
        var mh$ = ggml_backend_alloc_ctx_tensors_from_buft$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, buft);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_alloc_ctx_tensors$MH() {
        return RuntimeHelper.requireNonNull(constants$99.const$4,"ggml_backend_alloc_ctx_tensors");
    }
    /**
     * {@snippet :
     * struct ggml_backend_buffer* ggml_backend_alloc_ctx_tensors(struct ggml_context* ctx, ggml_backend_t backend);
     * }
     */
    public static MemorySegment ggml_backend_alloc_ctx_tensors(MemorySegment ctx, MemorySegment backend) {
        var mh$ = ggml_backend_alloc_ctx_tensors$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, backend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct ggml_backend_event* ggml_backend_event_t;
     * }
     */
    public static final AddressLayout ggml_backend_event_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef void* ggml_backend_graph_plan_t;
     * }
     */
    public static final AddressLayout ggml_backend_graph_plan_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct ggml_backend_reg* ggml_backend_reg_t;
     * }
     */
    public static final AddressLayout ggml_backend_reg_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef struct ggml_backend_device* ggml_backend_dev_t;
     * }
     */
    public static final AddressLayout ggml_backend_dev_t = RuntimeHelper.POINTER;
    public static MethodHandle ggml_backend_buft_name$MH() {
        return RuntimeHelper.requireNonNull(constants$99.const$5,"ggml_backend_buft_name");
    }
    /**
     * {@snippet :
     * char* ggml_backend_buft_name(ggml_backend_buffer_type_t buft);
     * }
     */
    public static MemorySegment ggml_backend_buft_name(MemorySegment buft) {
        var mh$ = ggml_backend_buft_name$MH();
        try {
            return (MemorySegment)mh$.invokeExact(buft);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buft_alloc_buffer$MH() {
        return RuntimeHelper.requireNonNull(constants$100.const$0,"ggml_backend_buft_alloc_buffer");
    }
    /**
     * {@snippet :
     * ggml_backend_buffer_t ggml_backend_buft_alloc_buffer(ggml_backend_buffer_type_t buft, size_t size);
     * }
     */
    public static MemorySegment ggml_backend_buft_alloc_buffer(MemorySegment buft, long size) {
        var mh$ = ggml_backend_buft_alloc_buffer$MH();
        try {
            return (MemorySegment)mh$.invokeExact(buft, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buft_get_alignment$MH() {
        return RuntimeHelper.requireNonNull(constants$100.const$1,"ggml_backend_buft_get_alignment");
    }
    /**
     * {@snippet :
     * size_t ggml_backend_buft_get_alignment(ggml_backend_buffer_type_t buft);
     * }
     */
    public static long ggml_backend_buft_get_alignment(MemorySegment buft) {
        var mh$ = ggml_backend_buft_get_alignment$MH();
        try {
            return (long)mh$.invokeExact(buft);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buft_get_max_size$MH() {
        return RuntimeHelper.requireNonNull(constants$100.const$2,"ggml_backend_buft_get_max_size");
    }
    /**
     * {@snippet :
     * size_t ggml_backend_buft_get_max_size(ggml_backend_buffer_type_t buft);
     * }
     */
    public static long ggml_backend_buft_get_max_size(MemorySegment buft) {
        var mh$ = ggml_backend_buft_get_max_size$MH();
        try {
            return (long)mh$.invokeExact(buft);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buft_get_alloc_size$MH() {
        return RuntimeHelper.requireNonNull(constants$100.const$4,"ggml_backend_buft_get_alloc_size");
    }
    /**
     * {@snippet :
     * size_t ggml_backend_buft_get_alloc_size(ggml_backend_buffer_type_t buft, struct ggml_tensor* tensor);
     * }
     */
    public static long ggml_backend_buft_get_alloc_size(MemorySegment buft, MemorySegment tensor) {
        var mh$ = ggml_backend_buft_get_alloc_size$MH();
        try {
            return (long)mh$.invokeExact(buft, tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buft_is_host$MH() {
        return RuntimeHelper.requireNonNull(constants$100.const$5,"ggml_backend_buft_is_host");
    }
    /**
     * {@snippet :
     * _Bool ggml_backend_buft_is_host(ggml_backend_buffer_type_t buft);
     * }
     */
    public static boolean ggml_backend_buft_is_host(MemorySegment buft) {
        var mh$ = ggml_backend_buft_is_host$MH();
        try {
            return (boolean)mh$.invokeExact(buft);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buft_get_device$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$0,"ggml_backend_buft_get_device");
    }
    /**
     * {@snippet :
     * ggml_backend_dev_t ggml_backend_buft_get_device(ggml_backend_buffer_type_t buft);
     * }
     */
    public static MemorySegment ggml_backend_buft_get_device(MemorySegment buft) {
        var mh$ = ggml_backend_buft_get_device$MH();
        try {
            return (MemorySegment)mh$.invokeExact(buft);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum ggml_backend_buffer_usage.GGML_BACKEND_BUFFER_USAGE_ANY = 0;
     * }
     */
    public static int GGML_BACKEND_BUFFER_USAGE_ANY() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum ggml_backend_buffer_usage.GGML_BACKEND_BUFFER_USAGE_WEIGHTS = 1;
     * }
     */
    public static int GGML_BACKEND_BUFFER_USAGE_WEIGHTS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum ggml_backend_buffer_usage.GGML_BACKEND_BUFFER_USAGE_COMPUTE = 2;
     * }
     */
    public static int GGML_BACKEND_BUFFER_USAGE_COMPUTE() {
        return (int)2L;
    }
    public static MethodHandle ggml_backend_buffer_name$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$1,"ggml_backend_buffer_name");
    }
    /**
     * {@snippet :
     * char* ggml_backend_buffer_name(ggml_backend_buffer_t buffer);
     * }
     */
    public static MemorySegment ggml_backend_buffer_name(MemorySegment buffer) {
        var mh$ = ggml_backend_buffer_name$MH();
        try {
            return (MemorySegment)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buffer_free$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$2,"ggml_backend_buffer_free");
    }
    /**
     * {@snippet :
     * void ggml_backend_buffer_free(ggml_backend_buffer_t buffer);
     * }
     */
    public static void ggml_backend_buffer_free(MemorySegment buffer) {
        var mh$ = ggml_backend_buffer_free$MH();
        try {
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buffer_get_base$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$3,"ggml_backend_buffer_get_base");
    }
    /**
     * {@snippet :
     * void* ggml_backend_buffer_get_base(ggml_backend_buffer_t buffer);
     * }
     */
    public static MemorySegment ggml_backend_buffer_get_base(MemorySegment buffer) {
        var mh$ = ggml_backend_buffer_get_base$MH();
        try {
            return (MemorySegment)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buffer_get_size$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$4,"ggml_backend_buffer_get_size");
    }
    /**
     * {@snippet :
     * size_t ggml_backend_buffer_get_size(ggml_backend_buffer_t buffer);
     * }
     */
    public static long ggml_backend_buffer_get_size(MemorySegment buffer) {
        var mh$ = ggml_backend_buffer_get_size$MH();
        try {
            return (long)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buffer_init_tensor$MH() {
        return RuntimeHelper.requireNonNull(constants$101.const$5,"ggml_backend_buffer_init_tensor");
    }
    /**
     * {@snippet :
     * enum ggml_status ggml_backend_buffer_init_tensor(ggml_backend_buffer_t buffer, struct ggml_tensor* tensor);
     * }
     */
    public static int ggml_backend_buffer_init_tensor(MemorySegment buffer, MemorySegment tensor) {
        var mh$ = ggml_backend_buffer_init_tensor$MH();
        try {
            return (int)mh$.invokeExact(buffer, tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buffer_get_alignment$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$0,"ggml_backend_buffer_get_alignment");
    }
    /**
     * {@snippet :
     * size_t ggml_backend_buffer_get_alignment(ggml_backend_buffer_t buffer);
     * }
     */
    public static long ggml_backend_buffer_get_alignment(MemorySegment buffer) {
        var mh$ = ggml_backend_buffer_get_alignment$MH();
        try {
            return (long)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buffer_get_max_size$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$1,"ggml_backend_buffer_get_max_size");
    }
    /**
     * {@snippet :
     * size_t ggml_backend_buffer_get_max_size(ggml_backend_buffer_t buffer);
     * }
     */
    public static long ggml_backend_buffer_get_max_size(MemorySegment buffer) {
        var mh$ = ggml_backend_buffer_get_max_size$MH();
        try {
            return (long)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buffer_get_alloc_size$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$2,"ggml_backend_buffer_get_alloc_size");
    }
    /**
     * {@snippet :
     * size_t ggml_backend_buffer_get_alloc_size(ggml_backend_buffer_t buffer, struct ggml_tensor* tensor);
     * }
     */
    public static long ggml_backend_buffer_get_alloc_size(MemorySegment buffer, MemorySegment tensor) {
        var mh$ = ggml_backend_buffer_get_alloc_size$MH();
        try {
            return (long)mh$.invokeExact(buffer, tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buffer_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$4,"ggml_backend_buffer_clear");
    }
    /**
     * {@snippet :
     * void ggml_backend_buffer_clear(ggml_backend_buffer_t buffer, uint8_t value);
     * }
     */
    public static void ggml_backend_buffer_clear(MemorySegment buffer, byte value) {
        var mh$ = ggml_backend_buffer_clear$MH();
        try {
            mh$.invokeExact(buffer, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buffer_is_host$MH() {
        return RuntimeHelper.requireNonNull(constants$102.const$5,"ggml_backend_buffer_is_host");
    }
    /**
     * {@snippet :
     * _Bool ggml_backend_buffer_is_host(ggml_backend_buffer_t buffer);
     * }
     */
    public static boolean ggml_backend_buffer_is_host(MemorySegment buffer) {
        var mh$ = ggml_backend_buffer_is_host$MH();
        try {
            return (boolean)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buffer_set_usage$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$0,"ggml_backend_buffer_set_usage");
    }
    /**
     * {@snippet :
     * void ggml_backend_buffer_set_usage(ggml_backend_buffer_t buffer, enum ggml_backend_buffer_usage usage);
     * }
     */
    public static void ggml_backend_buffer_set_usage(MemorySegment buffer, int usage) {
        var mh$ = ggml_backend_buffer_set_usage$MH();
        try {
            mh$.invokeExact(buffer, usage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buffer_get_usage$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$1,"ggml_backend_buffer_get_usage");
    }
    /**
     * {@snippet :
     * enum ggml_backend_buffer_usage ggml_backend_buffer_get_usage(ggml_backend_buffer_t buffer);
     * }
     */
    public static int ggml_backend_buffer_get_usage(MemorySegment buffer) {
        var mh$ = ggml_backend_buffer_get_usage$MH();
        try {
            return (int)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buffer_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$2,"ggml_backend_buffer_get_type");
    }
    /**
     * {@snippet :
     * ggml_backend_buffer_type_t ggml_backend_buffer_get_type(ggml_backend_buffer_t buffer);
     * }
     */
    public static MemorySegment ggml_backend_buffer_get_type(MemorySegment buffer) {
        var mh$ = ggml_backend_buffer_get_type$MH();
        try {
            return (MemorySegment)mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_buffer_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$3,"ggml_backend_buffer_reset");
    }
    /**
     * {@snippet :
     * void ggml_backend_buffer_reset(ggml_backend_buffer_t buffer);
     * }
     */
    public static void ggml_backend_buffer_reset(MemorySegment buffer) {
        var mh$ = ggml_backend_buffer_reset$MH();
        try {
            mh$.invokeExact(buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_tensor_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$4,"ggml_backend_tensor_copy");
    }
    /**
     * {@snippet :
     * void ggml_backend_tensor_copy(struct ggml_tensor* src, struct ggml_tensor* dst);
     * }
     */
    public static void ggml_backend_tensor_copy(MemorySegment src, MemorySegment dst) {
        var mh$ = ggml_backend_tensor_copy$MH();
        try {
            mh$.invokeExact(src, dst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_guid$MH() {
        return RuntimeHelper.requireNonNull(constants$103.const$5,"ggml_backend_guid");
    }
    /**
     * {@snippet :
     * ggml_guid_t ggml_backend_guid(ggml_backend_t backend);
     * }
     */
    public static MemorySegment ggml_backend_guid(MemorySegment backend) {
        var mh$ = ggml_backend_guid$MH();
        try {
            return (MemorySegment)mh$.invokeExact(backend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_name$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$0,"ggml_backend_name");
    }
    /**
     * {@snippet :
     * char* ggml_backend_name(ggml_backend_t backend);
     * }
     */
    public static MemorySegment ggml_backend_name(MemorySegment backend) {
        var mh$ = ggml_backend_name$MH();
        try {
            return (MemorySegment)mh$.invokeExact(backend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_free$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$1,"ggml_backend_free");
    }
    /**
     * {@snippet :
     * void ggml_backend_free(ggml_backend_t backend);
     * }
     */
    public static void ggml_backend_free(MemorySegment backend) {
        var mh$ = ggml_backend_free$MH();
        try {
            mh$.invokeExact(backend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_get_default_buffer_type$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$2,"ggml_backend_get_default_buffer_type");
    }
    /**
     * {@snippet :
     * ggml_backend_buffer_type_t ggml_backend_get_default_buffer_type(ggml_backend_t backend);
     * }
     */
    public static MemorySegment ggml_backend_get_default_buffer_type(MemorySegment backend) {
        var mh$ = ggml_backend_get_default_buffer_type$MH();
        try {
            return (MemorySegment)mh$.invokeExact(backend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_alloc_buffer$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$3,"ggml_backend_alloc_buffer");
    }
    /**
     * {@snippet :
     * ggml_backend_buffer_t ggml_backend_alloc_buffer(ggml_backend_t backend, size_t size);
     * }
     */
    public static MemorySegment ggml_backend_alloc_buffer(MemorySegment backend, long size) {
        var mh$ = ggml_backend_alloc_buffer$MH();
        try {
            return (MemorySegment)mh$.invokeExact(backend, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_get_alignment$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$4,"ggml_backend_get_alignment");
    }
    /**
     * {@snippet :
     * size_t ggml_backend_get_alignment(ggml_backend_t backend);
     * }
     */
    public static long ggml_backend_get_alignment(MemorySegment backend) {
        var mh$ = ggml_backend_get_alignment$MH();
        try {
            return (long)mh$.invokeExact(backend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_get_max_size$MH() {
        return RuntimeHelper.requireNonNull(constants$104.const$5,"ggml_backend_get_max_size");
    }
    /**
     * {@snippet :
     * size_t ggml_backend_get_max_size(ggml_backend_t backend);
     * }
     */
    public static long ggml_backend_get_max_size(MemorySegment backend) {
        var mh$ = ggml_backend_get_max_size$MH();
        try {
            return (long)mh$.invokeExact(backend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_tensor_set_async$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$1,"ggml_backend_tensor_set_async");
    }
    /**
     * {@snippet :
     * void ggml_backend_tensor_set_async(ggml_backend_t backend, struct ggml_tensor* tensor, void* data, size_t offset, size_t size);
     * }
     */
    public static void ggml_backend_tensor_set_async(MemorySegment backend, MemorySegment tensor, MemorySegment data, long offset, long size) {
        var mh$ = ggml_backend_tensor_set_async$MH();
        try {
            mh$.invokeExact(backend, tensor, data, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_tensor_get_async$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$2,"ggml_backend_tensor_get_async");
    }
    /**
     * {@snippet :
     * void ggml_backend_tensor_get_async(ggml_backend_t backend, struct ggml_tensor* tensor, void* data, size_t offset, size_t size);
     * }
     */
    public static void ggml_backend_tensor_get_async(MemorySegment backend, MemorySegment tensor, MemorySegment data, long offset, long size) {
        var mh$ = ggml_backend_tensor_get_async$MH();
        try {
            mh$.invokeExact(backend, tensor, data, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_tensor_set$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$4,"ggml_backend_tensor_set");
    }
    /**
     * {@snippet :
     * void ggml_backend_tensor_set(struct ggml_tensor* tensor, void* data, size_t offset, size_t size);
     * }
     */
    public static void ggml_backend_tensor_set(MemorySegment tensor, MemorySegment data, long offset, long size) {
        var mh$ = ggml_backend_tensor_set$MH();
        try {
            mh$.invokeExact(tensor, data, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_tensor_get$MH() {
        return RuntimeHelper.requireNonNull(constants$105.const$5,"ggml_backend_tensor_get");
    }
    /**
     * {@snippet :
     * void ggml_backend_tensor_get(struct ggml_tensor* tensor, void* data, size_t offset, size_t size);
     * }
     */
    public static void ggml_backend_tensor_get(MemorySegment tensor, MemorySegment data, long offset, long size) {
        var mh$ = ggml_backend_tensor_get$MH();
        try {
            mh$.invokeExact(tensor, data, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_tensor_memset$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$1,"ggml_backend_tensor_memset");
    }
    /**
     * {@snippet :
     * void ggml_backend_tensor_memset(struct ggml_tensor* tensor, uint8_t value, size_t offset, size_t size);
     * }
     */
    public static void ggml_backend_tensor_memset(MemorySegment tensor, byte value, long offset, long size) {
        var mh$ = ggml_backend_tensor_memset$MH();
        try {
            mh$.invokeExact(tensor, value, offset, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_synchronize$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$2,"ggml_backend_synchronize");
    }
    /**
     * {@snippet :
     * void ggml_backend_synchronize(ggml_backend_t backend);
     * }
     */
    public static void ggml_backend_synchronize(MemorySegment backend) {
        var mh$ = ggml_backend_synchronize$MH();
        try {
            mh$.invokeExact(backend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_graph_plan_create$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$3,"ggml_backend_graph_plan_create");
    }
    /**
     * {@snippet :
     * ggml_backend_graph_plan_t ggml_backend_graph_plan_create(ggml_backend_t backend, struct ggml_cgraph* cgraph);
     * }
     */
    public static MemorySegment ggml_backend_graph_plan_create(MemorySegment backend, MemorySegment cgraph) {
        var mh$ = ggml_backend_graph_plan_create$MH();
        try {
            return (MemorySegment)mh$.invokeExact(backend, cgraph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_graph_plan_free$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$4,"ggml_backend_graph_plan_free");
    }
    /**
     * {@snippet :
     * void ggml_backend_graph_plan_free(ggml_backend_t backend, ggml_backend_graph_plan_t plan);
     * }
     */
    public static void ggml_backend_graph_plan_free(MemorySegment backend, MemorySegment plan) {
        var mh$ = ggml_backend_graph_plan_free$MH();
        try {
            mh$.invokeExact(backend, plan);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_graph_plan_compute$MH() {
        return RuntimeHelper.requireNonNull(constants$106.const$5,"ggml_backend_graph_plan_compute");
    }
    /**
     * {@snippet :
     * enum ggml_status ggml_backend_graph_plan_compute(ggml_backend_t backend, ggml_backend_graph_plan_t plan);
     * }
     */
    public static int ggml_backend_graph_plan_compute(MemorySegment backend, MemorySegment plan) {
        var mh$ = ggml_backend_graph_plan_compute$MH();
        try {
            return (int)mh$.invokeExact(backend, plan);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_graph_compute$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$0,"ggml_backend_graph_compute");
    }
    /**
     * {@snippet :
     * enum ggml_status ggml_backend_graph_compute(ggml_backend_t backend, struct ggml_cgraph* cgraph);
     * }
     */
    public static int ggml_backend_graph_compute(MemorySegment backend, MemorySegment cgraph) {
        var mh$ = ggml_backend_graph_compute$MH();
        try {
            return (int)mh$.invokeExact(backend, cgraph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_graph_compute_async$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$1,"ggml_backend_graph_compute_async");
    }
    /**
     * {@snippet :
     * enum ggml_status ggml_backend_graph_compute_async(ggml_backend_t backend, struct ggml_cgraph* cgraph);
     * }
     */
    public static int ggml_backend_graph_compute_async(MemorySegment backend, MemorySegment cgraph) {
        var mh$ = ggml_backend_graph_compute_async$MH();
        try {
            return (int)mh$.invokeExact(backend, cgraph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_supports_op$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$2,"ggml_backend_supports_op");
    }
    /**
     * {@snippet :
     * _Bool ggml_backend_supports_op(ggml_backend_t backend, struct ggml_tensor* op);
     * }
     */
    public static boolean ggml_backend_supports_op(MemorySegment backend, MemorySegment op) {
        var mh$ = ggml_backend_supports_op$MH();
        try {
            return (boolean)mh$.invokeExact(backend, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_supports_buft$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$3,"ggml_backend_supports_buft");
    }
    /**
     * {@snippet :
     * _Bool ggml_backend_supports_buft(ggml_backend_t backend, ggml_backend_buffer_type_t buft);
     * }
     */
    public static boolean ggml_backend_supports_buft(MemorySegment backend, MemorySegment buft) {
        var mh$ = ggml_backend_supports_buft$MH();
        try {
            return (boolean)mh$.invokeExact(backend, buft);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_offload_op$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$4,"ggml_backend_offload_op");
    }
    /**
     * {@snippet :
     * _Bool ggml_backend_offload_op(ggml_backend_t backend, struct ggml_tensor* op);
     * }
     */
    public static boolean ggml_backend_offload_op(MemorySegment backend, MemorySegment op) {
        var mh$ = ggml_backend_offload_op$MH();
        try {
            return (boolean)mh$.invokeExact(backend, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_tensor_copy_async$MH() {
        return RuntimeHelper.requireNonNull(constants$107.const$5,"ggml_backend_tensor_copy_async");
    }
    /**
     * {@snippet :
     * void ggml_backend_tensor_copy_async(ggml_backend_t backend_src, ggml_backend_t backend_dst, struct ggml_tensor* src, struct ggml_tensor* dst);
     * }
     */
    public static void ggml_backend_tensor_copy_async(MemorySegment backend_src, MemorySegment backend_dst, MemorySegment src, MemorySegment dst) {
        var mh$ = ggml_backend_tensor_copy_async$MH();
        try {
            mh$.invokeExact(backend_src, backend_dst, src, dst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_get_device$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$0,"ggml_backend_get_device");
    }
    /**
     * {@snippet :
     * ggml_backend_dev_t ggml_backend_get_device(ggml_backend_t backend);
     * }
     */
    public static MemorySegment ggml_backend_get_device(MemorySegment backend) {
        var mh$ = ggml_backend_get_device$MH();
        try {
            return (MemorySegment)mh$.invokeExact(backend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_event_new$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$1,"ggml_backend_event_new");
    }
    /**
     * {@snippet :
     * ggml_backend_event_t ggml_backend_event_new(ggml_backend_dev_t device);
     * }
     */
    public static MemorySegment ggml_backend_event_new(MemorySegment device) {
        var mh$ = ggml_backend_event_new$MH();
        try {
            return (MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_event_free$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$2,"ggml_backend_event_free");
    }
    /**
     * {@snippet :
     * void ggml_backend_event_free(ggml_backend_event_t event);
     * }
     */
    public static void ggml_backend_event_free(MemorySegment event) {
        var mh$ = ggml_backend_event_free$MH();
        try {
            mh$.invokeExact(event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_event_record$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$3,"ggml_backend_event_record");
    }
    /**
     * {@snippet :
     * void ggml_backend_event_record(ggml_backend_event_t event, ggml_backend_t backend);
     * }
     */
    public static void ggml_backend_event_record(MemorySegment event, MemorySegment backend) {
        var mh$ = ggml_backend_event_record$MH();
        try {
            mh$.invokeExact(event, backend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_event_synchronize$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$4,"ggml_backend_event_synchronize");
    }
    /**
     * {@snippet :
     * void ggml_backend_event_synchronize(ggml_backend_event_t event);
     * }
     */
    public static void ggml_backend_event_synchronize(MemorySegment event) {
        var mh$ = ggml_backend_event_synchronize$MH();
        try {
            mh$.invokeExact(event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_event_wait$MH() {
        return RuntimeHelper.requireNonNull(constants$108.const$5,"ggml_backend_event_wait");
    }
    /**
     * {@snippet :
     * void ggml_backend_event_wait(ggml_backend_t backend, ggml_backend_event_t event);
     * }
     */
    public static void ggml_backend_event_wait(MemorySegment backend, MemorySegment event) {
        var mh$ = ggml_backend_event_wait$MH();
        try {
            mh$.invokeExact(backend, event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum ggml_backend_dev_type.GGML_BACKEND_DEVICE_TYPE_CPU = 0;
     * }
     */
    public static int GGML_BACKEND_DEVICE_TYPE_CPU() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum ggml_backend_dev_type.GGML_BACKEND_DEVICE_TYPE_GPU = 1;
     * }
     */
    public static int GGML_BACKEND_DEVICE_TYPE_GPU() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum ggml_backend_dev_type.GGML_BACKEND_DEVICE_TYPE_ACCEL = 2;
     * }
     */
    public static int GGML_BACKEND_DEVICE_TYPE_ACCEL() {
        return (int)2L;
    }
    public static MethodHandle ggml_backend_dev_name$MH() {
        return RuntimeHelper.requireNonNull(constants$110.const$5,"ggml_backend_dev_name");
    }
    /**
     * {@snippet :
     * char* ggml_backend_dev_name(ggml_backend_dev_t device);
     * }
     */
    public static MemorySegment ggml_backend_dev_name(MemorySegment device) {
        var mh$ = ggml_backend_dev_name$MH();
        try {
            return (MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_description$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$0,"ggml_backend_dev_description");
    }
    /**
     * {@snippet :
     * char* ggml_backend_dev_description(ggml_backend_dev_t device);
     * }
     */
    public static MemorySegment ggml_backend_dev_description(MemorySegment device) {
        var mh$ = ggml_backend_dev_description$MH();
        try {
            return (MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_memory$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$1,"ggml_backend_dev_memory");
    }
    /**
     * {@snippet :
     * void ggml_backend_dev_memory(ggml_backend_dev_t device, size_t* free, size_t* total);
     * }
     */
    public static void ggml_backend_dev_memory(MemorySegment device, MemorySegment free, MemorySegment total) {
        var mh$ = ggml_backend_dev_memory$MH();
        try {
            mh$.invokeExact(device, free, total);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_type$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$2,"ggml_backend_dev_type");
    }
    /**
     * {@snippet :
     * enum ggml_backend_dev_type ggml_backend_dev_type(ggml_backend_dev_t device);
     * }
     */
    public static int ggml_backend_dev_type(MemorySegment device) {
        var mh$ = ggml_backend_dev_type$MH();
        try {
            return (int)mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_get_props$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$3,"ggml_backend_dev_get_props");
    }
    /**
     * {@snippet :
     * void ggml_backend_dev_get_props(ggml_backend_dev_t device, struct ggml_backend_dev_props* props);
     * }
     */
    public static void ggml_backend_dev_get_props(MemorySegment device, MemorySegment props) {
        var mh$ = ggml_backend_dev_get_props$MH();
        try {
            mh$.invokeExact(device, props);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_backend_reg$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$4,"ggml_backend_dev_backend_reg");
    }
    /**
     * {@snippet :
     * ggml_backend_reg_t ggml_backend_dev_backend_reg(ggml_backend_dev_t device);
     * }
     */
    public static MemorySegment ggml_backend_dev_backend_reg(MemorySegment device) {
        var mh$ = ggml_backend_dev_backend_reg$MH();
        try {
            return (MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_init$MH() {
        return RuntimeHelper.requireNonNull(constants$111.const$5,"ggml_backend_dev_init");
    }
    /**
     * {@snippet :
     * ggml_backend_t ggml_backend_dev_init(ggml_backend_dev_t device, char* params);
     * }
     */
    public static MemorySegment ggml_backend_dev_init(MemorySegment device, MemorySegment params) {
        var mh$ = ggml_backend_dev_init$MH();
        try {
            return (MemorySegment)mh$.invokeExact(device, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_buffer_type$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$0,"ggml_backend_dev_buffer_type");
    }
    /**
     * {@snippet :
     * ggml_backend_buffer_type_t ggml_backend_dev_buffer_type(ggml_backend_dev_t device);
     * }
     */
    public static MemorySegment ggml_backend_dev_buffer_type(MemorySegment device) {
        var mh$ = ggml_backend_dev_buffer_type$MH();
        try {
            return (MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_host_buffer_type$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$1,"ggml_backend_dev_host_buffer_type");
    }
    /**
     * {@snippet :
     * ggml_backend_buffer_type_t ggml_backend_dev_host_buffer_type(ggml_backend_dev_t device);
     * }
     */
    public static MemorySegment ggml_backend_dev_host_buffer_type(MemorySegment device) {
        var mh$ = ggml_backend_dev_host_buffer_type$MH();
        try {
            return (MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_buffer_from_host_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$2,"ggml_backend_dev_buffer_from_host_ptr");
    }
    /**
     * {@snippet :
     * ggml_backend_buffer_t ggml_backend_dev_buffer_from_host_ptr(ggml_backend_dev_t device, void* ptr, size_t size, size_t max_tensor_size);
     * }
     */
    public static MemorySegment ggml_backend_dev_buffer_from_host_ptr(MemorySegment device, MemorySegment ptr, long size, long max_tensor_size) {
        var mh$ = ggml_backend_dev_buffer_from_host_ptr$MH();
        try {
            return (MemorySegment)mh$.invokeExact(device, ptr, size, max_tensor_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_supports_op$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$3,"ggml_backend_dev_supports_op");
    }
    /**
     * {@snippet :
     * _Bool ggml_backend_dev_supports_op(ggml_backend_dev_t device, struct ggml_tensor* op);
     * }
     */
    public static boolean ggml_backend_dev_supports_op(MemorySegment device, MemorySegment op) {
        var mh$ = ggml_backend_dev_supports_op$MH();
        try {
            return (boolean)mh$.invokeExact(device, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_supports_buft$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$4,"ggml_backend_dev_supports_buft");
    }
    /**
     * {@snippet :
     * _Bool ggml_backend_dev_supports_buft(ggml_backend_dev_t device, ggml_backend_buffer_type_t buft);
     * }
     */
    public static boolean ggml_backend_dev_supports_buft(MemorySegment device, MemorySegment buft) {
        var mh$ = ggml_backend_dev_supports_buft$MH();
        try {
            return (boolean)mh$.invokeExact(device, buft);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_offload_op$MH() {
        return RuntimeHelper.requireNonNull(constants$112.const$5,"ggml_backend_dev_offload_op");
    }
    /**
     * {@snippet :
     * _Bool ggml_backend_dev_offload_op(ggml_backend_dev_t device, struct ggml_tensor* op);
     * }
     */
    public static boolean ggml_backend_dev_offload_op(MemorySegment device, MemorySegment op) {
        var mh$ = ggml_backend_dev_offload_op$MH();
        try {
            return (boolean)mh$.invokeExact(device, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_reg_name$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$0,"ggml_backend_reg_name");
    }
    /**
     * {@snippet :
     * char* ggml_backend_reg_name(ggml_backend_reg_t reg);
     * }
     */
    public static MemorySegment ggml_backend_reg_name(MemorySegment reg) {
        var mh$ = ggml_backend_reg_name$MH();
        try {
            return (MemorySegment)mh$.invokeExact(reg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_reg_dev_count$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$1,"ggml_backend_reg_dev_count");
    }
    /**
     * {@snippet :
     * size_t ggml_backend_reg_dev_count(ggml_backend_reg_t reg);
     * }
     */
    public static long ggml_backend_reg_dev_count(MemorySegment reg) {
        var mh$ = ggml_backend_reg_dev_count$MH();
        try {
            return (long)mh$.invokeExact(reg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_reg_dev_get$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$2,"ggml_backend_reg_dev_get");
    }
    /**
     * {@snippet :
     * ggml_backend_dev_t ggml_backend_reg_dev_get(ggml_backend_reg_t reg, size_t index);
     * }
     */
    public static MemorySegment ggml_backend_reg_dev_get(MemorySegment reg, long index) {
        var mh$ = ggml_backend_reg_dev_get$MH();
        try {
            return (MemorySegment)mh$.invokeExact(reg, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_reg_get_proc_address$MH() {
        return RuntimeHelper.requireNonNull(constants$113.const$3,"ggml_backend_reg_get_proc_address");
    }
    /**
     * {@snippet :
     * void* ggml_backend_reg_get_proc_address(ggml_backend_reg_t reg, char* name);
     * }
     */
    public static MemorySegment ggml_backend_reg_get_proc_address(MemorySegment reg, MemorySegment name) {
        var mh$ = ggml_backend_reg_get_proc_address$MH();
        try {
            return (MemorySegment)mh$.invokeExact(reg, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_device_register$MH() {
        return RuntimeHelper.requireNonNull(constants$115.const$3,"ggml_backend_device_register");
    }
    /**
     * {@snippet :
     * void ggml_backend_device_register(ggml_backend_dev_t device);
     * }
     */
    public static void ggml_backend_device_register(MemorySegment device) {
        var mh$ = ggml_backend_device_register$MH();
        try {
            mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_reg_count$MH() {
        return RuntimeHelper.requireNonNull(constants$115.const$4,"ggml_backend_reg_count");
    }
    /**
     * {@snippet :
     * size_t ggml_backend_reg_count();
     * }
     */
    public static long ggml_backend_reg_count() {
        var mh$ = ggml_backend_reg_count$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_reg_get$MH() {
        return RuntimeHelper.requireNonNull(constants$115.const$6,"ggml_backend_reg_get");
    }
    /**
     * {@snippet :
     * ggml_backend_reg_t ggml_backend_reg_get(size_t index);
     * }
     */
    public static MemorySegment ggml_backend_reg_get(long index) {
        var mh$ = ggml_backend_reg_get$MH();
        try {
            return (MemorySegment)mh$.invokeExact(index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_reg_by_name$MH() {
        return RuntimeHelper.requireNonNull(constants$116.const$0,"ggml_backend_reg_by_name");
    }
    /**
     * {@snippet :
     * ggml_backend_reg_t ggml_backend_reg_by_name(char* name);
     * }
     */
    public static MemorySegment ggml_backend_reg_by_name(MemorySegment name) {
        var mh$ = ggml_backend_reg_by_name$MH();
        try {
            return (MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_count$MH() {
        return RuntimeHelper.requireNonNull(constants$116.const$1,"ggml_backend_dev_count");
    }
    /**
     * {@snippet :
     * size_t ggml_backend_dev_count();
     * }
     */
    public static long ggml_backend_dev_count() {
        var mh$ = ggml_backend_dev_count$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_get$MH() {
        return RuntimeHelper.requireNonNull(constants$116.const$2,"ggml_backend_dev_get");
    }
    /**
     * {@snippet :
     * ggml_backend_dev_t ggml_backend_dev_get(size_t index);
     * }
     */
    public static MemorySegment ggml_backend_dev_get(long index) {
        var mh$ = ggml_backend_dev_get$MH();
        try {
            return (MemorySegment)mh$.invokeExact(index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_by_name$MH() {
        return RuntimeHelper.requireNonNull(constants$116.const$3,"ggml_backend_dev_by_name");
    }
    /**
     * {@snippet :
     * ggml_backend_dev_t ggml_backend_dev_by_name(char* name);
     * }
     */
    public static MemorySegment ggml_backend_dev_by_name(MemorySegment name) {
        var mh$ = ggml_backend_dev_by_name$MH();
        try {
            return (MemorySegment)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_dev_by_type$MH() {
        return RuntimeHelper.requireNonNull(constants$116.const$4,"ggml_backend_dev_by_type");
    }
    /**
     * {@snippet :
     * ggml_backend_dev_t ggml_backend_dev_by_type(enum ggml_backend_dev_type type);
     * }
     */
    public static MemorySegment ggml_backend_dev_by_type(int type) {
        var mh$ = ggml_backend_dev_by_type$MH();
        try {
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_init_by_name$MH() {
        return RuntimeHelper.requireNonNull(constants$116.const$5,"ggml_backend_init_by_name");
    }
    /**
     * {@snippet :
     * ggml_backend_t ggml_backend_init_by_name(char* name, char* params);
     * }
     */
    public static MemorySegment ggml_backend_init_by_name(MemorySegment name, MemorySegment params) {
        var mh$ = ggml_backend_init_by_name$MH();
        try {
            return (MemorySegment)mh$.invokeExact(name, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_init_by_type$MH() {
        return RuntimeHelper.requireNonNull(constants$117.const$0,"ggml_backend_init_by_type");
    }
    /**
     * {@snippet :
     * ggml_backend_t ggml_backend_init_by_type(enum ggml_backend_dev_type type, char* params);
     * }
     */
    public static MemorySegment ggml_backend_init_by_type(int type, MemorySegment params) {
        var mh$ = ggml_backend_init_by_type$MH();
        try {
            return (MemorySegment)mh$.invokeExact(type, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_init_best$MH() {
        return RuntimeHelper.requireNonNull(constants$117.const$1,"ggml_backend_init_best");
    }
    /**
     * {@snippet :
     * ggml_backend_t ggml_backend_init_best();
     * }
     */
    public static MemorySegment ggml_backend_init_best() {
        var mh$ = ggml_backend_init_best$MH();
        try {
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_load$MH() {
        return RuntimeHelper.requireNonNull(constants$117.const$2,"ggml_backend_load");
    }
    /**
     * {@snippet :
     * ggml_backend_reg_t ggml_backend_load(char* path);
     * }
     */
    public static MemorySegment ggml_backend_load(MemorySegment path) {
        var mh$ = ggml_backend_load$MH();
        try {
            return (MemorySegment)mh$.invokeExact(path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_unload$MH() {
        return RuntimeHelper.requireNonNull(constants$117.const$3,"ggml_backend_unload");
    }
    /**
     * {@snippet :
     * void ggml_backend_unload(ggml_backend_reg_t reg);
     * }
     */
    public static void ggml_backend_unload(MemorySegment reg) {
        var mh$ = ggml_backend_unload$MH();
        try {
            mh$.invokeExact(reg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_load_all$MH() {
        return RuntimeHelper.requireNonNull(constants$117.const$4,"ggml_backend_load_all");
    }
    /**
     * {@snippet :
     * void ggml_backend_load_all();
     * }
     */
    public static void ggml_backend_load_all() {
        var mh$ = ggml_backend_load_all$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_load_all_from_path$MH() {
        return RuntimeHelper.requireNonNull(constants$117.const$5,"ggml_backend_load_all_from_path");
    }
    /**
     * {@snippet :
     * void ggml_backend_load_all_from_path(char* dir_path);
     * }
     */
    public static void ggml_backend_load_all_from_path(MemorySegment dir_path) {
        var mh$ = ggml_backend_load_all_from_path$MH();
        try {
            mh$.invokeExact(dir_path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct ggml_backend_sched* ggml_backend_sched_t;
     * }
     */
    public static final AddressLayout ggml_backend_sched_t = RuntimeHelper.POINTER;
    public static MethodHandle ggml_backend_sched_new$MH() {
        return RuntimeHelper.requireNonNull(constants$118.const$4,"ggml_backend_sched_new");
    }
    /**
     * {@snippet :
     * ggml_backend_sched_t ggml_backend_sched_new(ggml_backend_t* backends, ggml_backend_buffer_type_t* bufts, int n_backends, size_t graph_size, _Bool parallel);
     * }
     */
    public static MemorySegment ggml_backend_sched_new(MemorySegment backends, MemorySegment bufts, int n_backends, long graph_size, boolean parallel) {
        var mh$ = ggml_backend_sched_new$MH();
        try {
            return (MemorySegment)mh$.invokeExact(backends, bufts, n_backends, graph_size, parallel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_free$MH() {
        return RuntimeHelper.requireNonNull(constants$118.const$5,"ggml_backend_sched_free");
    }
    /**
     * {@snippet :
     * void ggml_backend_sched_free(ggml_backend_sched_t sched);
     * }
     */
    public static void ggml_backend_sched_free(MemorySegment sched) {
        var mh$ = ggml_backend_sched_free$MH();
        try {
            mh$.invokeExact(sched);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_reserve$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$0,"ggml_backend_sched_reserve");
    }
    /**
     * {@snippet :
     * _Bool ggml_backend_sched_reserve(ggml_backend_sched_t sched, struct ggml_cgraph* measure_graph);
     * }
     */
    public static boolean ggml_backend_sched_reserve(MemorySegment sched, MemorySegment measure_graph) {
        var mh$ = ggml_backend_sched_reserve$MH();
        try {
            return (boolean)mh$.invokeExact(sched, measure_graph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_get_n_backends$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$1,"ggml_backend_sched_get_n_backends");
    }
    /**
     * {@snippet :
     * int ggml_backend_sched_get_n_backends(ggml_backend_sched_t sched);
     * }
     */
    public static int ggml_backend_sched_get_n_backends(MemorySegment sched) {
        var mh$ = ggml_backend_sched_get_n_backends$MH();
        try {
            return (int)mh$.invokeExact(sched);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_get_backend$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$2,"ggml_backend_sched_get_backend");
    }
    /**
     * {@snippet :
     * ggml_backend_t ggml_backend_sched_get_backend(ggml_backend_sched_t sched, int i);
     * }
     */
    public static MemorySegment ggml_backend_sched_get_backend(MemorySegment sched, int i) {
        var mh$ = ggml_backend_sched_get_backend$MH();
        try {
            return (MemorySegment)mh$.invokeExact(sched, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_get_n_splits$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$3,"ggml_backend_sched_get_n_splits");
    }
    /**
     * {@snippet :
     * int ggml_backend_sched_get_n_splits(ggml_backend_sched_t sched);
     * }
     */
    public static int ggml_backend_sched_get_n_splits(MemorySegment sched) {
        var mh$ = ggml_backend_sched_get_n_splits$MH();
        try {
            return (int)mh$.invokeExact(sched);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_get_n_copies$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$4,"ggml_backend_sched_get_n_copies");
    }
    /**
     * {@snippet :
     * int ggml_backend_sched_get_n_copies(ggml_backend_sched_t sched);
     * }
     */
    public static int ggml_backend_sched_get_n_copies(MemorySegment sched) {
        var mh$ = ggml_backend_sched_get_n_copies$MH();
        try {
            return (int)mh$.invokeExact(sched);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_get_buffer_size$MH() {
        return RuntimeHelper.requireNonNull(constants$119.const$5,"ggml_backend_sched_get_buffer_size");
    }
    /**
     * {@snippet :
     * size_t ggml_backend_sched_get_buffer_size(ggml_backend_sched_t sched, ggml_backend_t backend);
     * }
     */
    public static long ggml_backend_sched_get_buffer_size(MemorySegment sched, MemorySegment backend) {
        var mh$ = ggml_backend_sched_get_buffer_size$MH();
        try {
            return (long)mh$.invokeExact(sched, backend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_set_tensor_backend$MH() {
        return RuntimeHelper.requireNonNull(constants$120.const$0,"ggml_backend_sched_set_tensor_backend");
    }
    /**
     * {@snippet :
     * void ggml_backend_sched_set_tensor_backend(ggml_backend_sched_t sched, struct ggml_tensor* node, ggml_backend_t backend);
     * }
     */
    public static void ggml_backend_sched_set_tensor_backend(MemorySegment sched, MemorySegment node, MemorySegment backend) {
        var mh$ = ggml_backend_sched_set_tensor_backend$MH();
        try {
            mh$.invokeExact(sched, node, backend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_get_tensor_backend$MH() {
        return RuntimeHelper.requireNonNull(constants$120.const$1,"ggml_backend_sched_get_tensor_backend");
    }
    /**
     * {@snippet :
     * ggml_backend_t ggml_backend_sched_get_tensor_backend(ggml_backend_sched_t sched, struct ggml_tensor* node);
     * }
     */
    public static MemorySegment ggml_backend_sched_get_tensor_backend(MemorySegment sched, MemorySegment node) {
        var mh$ = ggml_backend_sched_get_tensor_backend$MH();
        try {
            return (MemorySegment)mh$.invokeExact(sched, node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_alloc_graph$MH() {
        return RuntimeHelper.requireNonNull(constants$120.const$2,"ggml_backend_sched_alloc_graph");
    }
    /**
     * {@snippet :
     * _Bool ggml_backend_sched_alloc_graph(ggml_backend_sched_t sched, struct ggml_cgraph* graph);
     * }
     */
    public static boolean ggml_backend_sched_alloc_graph(MemorySegment sched, MemorySegment graph) {
        var mh$ = ggml_backend_sched_alloc_graph$MH();
        try {
            return (boolean)mh$.invokeExact(sched, graph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_graph_compute$MH() {
        return RuntimeHelper.requireNonNull(constants$120.const$3,"ggml_backend_sched_graph_compute");
    }
    /**
     * {@snippet :
     * enum ggml_status ggml_backend_sched_graph_compute(ggml_backend_sched_t sched, struct ggml_cgraph* graph);
     * }
     */
    public static int ggml_backend_sched_graph_compute(MemorySegment sched, MemorySegment graph) {
        var mh$ = ggml_backend_sched_graph_compute$MH();
        try {
            return (int)mh$.invokeExact(sched, graph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_graph_compute_async$MH() {
        return RuntimeHelper.requireNonNull(constants$120.const$4,"ggml_backend_sched_graph_compute_async");
    }
    /**
     * {@snippet :
     * enum ggml_status ggml_backend_sched_graph_compute_async(ggml_backend_sched_t sched, struct ggml_cgraph* graph);
     * }
     */
    public static int ggml_backend_sched_graph_compute_async(MemorySegment sched, MemorySegment graph) {
        var mh$ = ggml_backend_sched_graph_compute_async$MH();
        try {
            return (int)mh$.invokeExact(sched, graph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_synchronize$MH() {
        return RuntimeHelper.requireNonNull(constants$120.const$5,"ggml_backend_sched_synchronize");
    }
    /**
     * {@snippet :
     * void ggml_backend_sched_synchronize(ggml_backend_sched_t sched);
     * }
     */
    public static void ggml_backend_sched_synchronize(MemorySegment sched) {
        var mh$ = ggml_backend_sched_synchronize$MH();
        try {
            mh$.invokeExact(sched);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$121.const$0,"ggml_backend_sched_reset");
    }
    /**
     * {@snippet :
     * void ggml_backend_sched_reset(ggml_backend_sched_t sched);
     * }
     */
    public static void ggml_backend_sched_reset(MemorySegment sched) {
        var mh$ = ggml_backend_sched_reset$MH();
        try {
            mh$.invokeExact(sched);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_sched_set_eval_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$121.const$1,"ggml_backend_sched_set_eval_callback");
    }
    /**
     * {@snippet :
     * void ggml_backend_sched_set_eval_callback(ggml_backend_sched_t sched, ggml_backend_sched_eval_callback callback, void* user_data);
     * }
     */
    public static void ggml_backend_sched_set_eval_callback(MemorySegment sched, MemorySegment callback, MemorySegment user_data) {
        var mh$ = ggml_backend_sched_set_eval_callback$MH();
        try {
            mh$.invokeExact(sched, callback, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_graph_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$122.const$2,"ggml_backend_graph_copy");
    }
    /**
     * {@snippet :
     * struct ggml_backend_graph_copy ggml_backend_graph_copy(ggml_backend_t backend, struct ggml_cgraph* graph);
     * }
     */
    public static MemorySegment ggml_backend_graph_copy(SegmentAllocator allocator, MemorySegment backend, MemorySegment graph) {
        var mh$ = ggml_backend_graph_copy$MH();
        try {
            return (MemorySegment)mh$.invokeExact(allocator, backend, graph);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_graph_copy_free$MH() {
        return RuntimeHelper.requireNonNull(constants$122.const$4,"ggml_backend_graph_copy_free");
    }
    /**
     * {@snippet :
     * void ggml_backend_graph_copy_free(struct ggml_backend_graph_copy copy);
     * }
     */
    public static void ggml_backend_graph_copy_free(MemorySegment copy) {
        var mh$ = ggml_backend_graph_copy_free$MH();
        try {
            mh$.invokeExact(copy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_compare_graph_backend$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$3,"ggml_backend_compare_graph_backend");
    }
    /**
     * {@snippet :
     * _Bool ggml_backend_compare_graph_backend(ggml_backend_t backend1, ggml_backend_t backend2, struct ggml_cgraph* graph, ggml_backend_eval_callback callback, void* user_data);
     * }
     */
    public static boolean ggml_backend_compare_graph_backend(MemorySegment backend1, MemorySegment backend2, MemorySegment graph, MemorySegment callback, MemorySegment user_data) {
        var mh$ = ggml_backend_compare_graph_backend$MH();
        try {
            return (boolean)mh$.invokeExact(backend1, backend2, graph, callback, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_tensor_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$4,"ggml_backend_tensor_alloc");
    }
    /**
     * {@snippet :
     * enum ggml_status ggml_backend_tensor_alloc(ggml_backend_buffer_t buffer, struct ggml_tensor* tensor, void* addr);
     * }
     */
    public static int ggml_backend_tensor_alloc(MemorySegment buffer, MemorySegment tensor, MemorySegment addr) {
        var mh$ = ggml_backend_tensor_alloc$MH();
        try {
            return (int)mh$.invokeExact(buffer, tensor, addr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_view_init$MH() {
        return RuntimeHelper.requireNonNull(constants$123.const$5,"ggml_backend_view_init");
    }
    /**
     * {@snippet :
     * enum ggml_status ggml_backend_view_init(struct ggml_tensor* tensor);
     * }
     */
    public static int ggml_backend_view_init(MemorySegment tensor) {
        var mh$ = ggml_backend_view_init$MH();
        try {
            return (int)mh$.invokeExact(tensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_cpu_buffer_from_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$0,"ggml_backend_cpu_buffer_from_ptr");
    }
    /**
     * {@snippet :
     * ggml_backend_buffer_t ggml_backend_cpu_buffer_from_ptr(void* ptr, size_t size);
     * }
     */
    public static MemorySegment ggml_backend_cpu_buffer_from_ptr(MemorySegment ptr, long size) {
        var mh$ = ggml_backend_cpu_buffer_from_ptr$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ptr, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_cpu_buffer_type$MH() {
        return RuntimeHelper.requireNonNull(constants$124.const$1,"ggml_backend_cpu_buffer_type");
    }
    /**
     * {@snippet :
     * ggml_backend_buffer_type_t ggml_backend_cpu_buffer_type();
     * }
     */
    public static MemorySegment ggml_backend_cpu_buffer_type() {
        var mh$ = ggml_backend_cpu_buffer_type$MH();
        try {
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum ggml_numa_strategy.GGML_NUMA_STRATEGY_DISABLED = 0;
     * }
     */
    public static int GGML_NUMA_STRATEGY_DISABLED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum ggml_numa_strategy.GGML_NUMA_STRATEGY_DISTRIBUTE = 1;
     * }
     */
    public static int GGML_NUMA_STRATEGY_DISTRIBUTE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum ggml_numa_strategy.GGML_NUMA_STRATEGY_ISOLATE = 2;
     * }
     */
    public static int GGML_NUMA_STRATEGY_ISOLATE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum ggml_numa_strategy.GGML_NUMA_STRATEGY_NUMACTL = 3;
     * }
     */
    public static int GGML_NUMA_STRATEGY_NUMACTL() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum ggml_numa_strategy.GGML_NUMA_STRATEGY_MIRROR = 4;
     * }
     */
    public static int GGML_NUMA_STRATEGY_MIRROR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum ggml_numa_strategy.GGML_NUMA_STRATEGY_COUNT = 5;
     * }
     */
    public static int GGML_NUMA_STRATEGY_COUNT() {
        return (int)5L;
    }
    public static MethodHandle ggml_numa_init$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$3,"ggml_numa_init");
    }
    /**
     * {@snippet :
     * void ggml_numa_init(enum ggml_numa_strategy numa);
     * }
     */
    public static void ggml_numa_init(int numa) {
        var mh$ = ggml_numa_init$MH();
        try {
            mh$.invokeExact(numa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_is_numa$MH() {
        return RuntimeHelper.requireNonNull(constants$125.const$5,"ggml_is_numa");
    }
    /**
     * {@snippet :
     * _Bool ggml_is_numa();
     * }
     */
    public static boolean ggml_is_numa() {
        var mh$ = ggml_is_numa$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_new_i32$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$0,"ggml_new_i32");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_new_i32(struct ggml_context* ctx, int32_t value);
     * }
     */
    public static MemorySegment ggml_new_i32(MemorySegment ctx, int value) {
        var mh$ = ggml_new_i32$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_new_f32$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$2,"ggml_new_f32");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_new_f32(struct ggml_context* ctx, float value);
     * }
     */
    public static MemorySegment ggml_new_f32(MemorySegment ctx, float value) {
        var mh$ = ggml_new_f32$MH();
        try {
            return (MemorySegment)mh$.invokeExact(ctx, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_i32$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$3,"ggml_set_i32");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_set_i32(struct ggml_tensor* tensor, int32_t value);
     * }
     */
    public static MemorySegment ggml_set_i32(MemorySegment tensor, int value) {
        var mh$ = ggml_set_i32$MH();
        try {
            return (MemorySegment)mh$.invokeExact(tensor, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_f32$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$4,"ggml_set_f32");
    }
    /**
     * {@snippet :
     * struct ggml_tensor* ggml_set_f32(struct ggml_tensor* tensor, float value);
     * }
     */
    public static MemorySegment ggml_set_f32(MemorySegment tensor, float value) {
        var mh$ = ggml_set_f32$MH();
        try {
            return (MemorySegment)mh$.invokeExact(tensor, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_i32_1d$MH() {
        return RuntimeHelper.requireNonNull(constants$126.const$5,"ggml_get_i32_1d");
    }
    /**
     * {@snippet :
     * int32_t ggml_get_i32_1d(struct ggml_tensor* tensor, int i);
     * }
     */
    public static int ggml_get_i32_1d(MemorySegment tensor, int i) {
        var mh$ = ggml_get_i32_1d$MH();
        try {
            return (int)mh$.invokeExact(tensor, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_i32_1d$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$1,"ggml_set_i32_1d");
    }
    /**
     * {@snippet :
     * void ggml_set_i32_1d(struct ggml_tensor* tensor, int i, int32_t value);
     * }
     */
    public static void ggml_set_i32_1d(MemorySegment tensor, int i, int value) {
        var mh$ = ggml_set_i32_1d$MH();
        try {
            mh$.invokeExact(tensor, i, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_i32_nd$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$3,"ggml_get_i32_nd");
    }
    /**
     * {@snippet :
     * int32_t ggml_get_i32_nd(struct ggml_tensor* tensor, int i0, int i1, int i2, int i3);
     * }
     */
    public static int ggml_get_i32_nd(MemorySegment tensor, int i0, int i1, int i2, int i3) {
        var mh$ = ggml_get_i32_nd$MH();
        try {
            return (int)mh$.invokeExact(tensor, i0, i1, i2, i3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_i32_nd$MH() {
        return RuntimeHelper.requireNonNull(constants$127.const$5,"ggml_set_i32_nd");
    }
    /**
     * {@snippet :
     * void ggml_set_i32_nd(struct ggml_tensor* tensor, int i0, int i1, int i2, int i3, int32_t value);
     * }
     */
    public static void ggml_set_i32_nd(MemorySegment tensor, int i0, int i1, int i2, int i3, int value) {
        var mh$ = ggml_set_i32_nd$MH();
        try {
            mh$.invokeExact(tensor, i0, i1, i2, i3, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_f32_1d$MH() {
        return RuntimeHelper.requireNonNull(constants$128.const$1,"ggml_get_f32_1d");
    }
    /**
     * {@snippet :
     * float ggml_get_f32_1d(struct ggml_tensor* tensor, int i);
     * }
     */
    public static float ggml_get_f32_1d(MemorySegment tensor, int i) {
        var mh$ = ggml_get_f32_1d$MH();
        try {
            return (float)mh$.invokeExact(tensor, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_f32_1d$MH() {
        return RuntimeHelper.requireNonNull(constants$128.const$3,"ggml_set_f32_1d");
    }
    /**
     * {@snippet :
     * void ggml_set_f32_1d(struct ggml_tensor* tensor, int i, float value);
     * }
     */
    public static void ggml_set_f32_1d(MemorySegment tensor, int i, float value) {
        var mh$ = ggml_set_f32_1d$MH();
        try {
            mh$.invokeExact(tensor, i, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_f32_nd$MH() {
        return RuntimeHelper.requireNonNull(constants$128.const$5,"ggml_get_f32_nd");
    }
    /**
     * {@snippet :
     * float ggml_get_f32_nd(struct ggml_tensor* tensor, int i0, int i1, int i2, int i3);
     * }
     */
    public static float ggml_get_f32_nd(MemorySegment tensor, int i0, int i1, int i2, int i3) {
        var mh$ = ggml_get_f32_nd$MH();
        try {
            return (float)mh$.invokeExact(tensor, i0, i1, i2, i3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_set_f32_nd$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$1,"ggml_set_f32_nd");
    }
    /**
     * {@snippet :
     * void ggml_set_f32_nd(struct ggml_tensor* tensor, int i0, int i1, int i2, int i3, float value);
     * }
     */
    public static void ggml_set_f32_nd(MemorySegment tensor, int i0, int i1, int i2, int i3, float value) {
        var mh$ = ggml_set_f32_nd$MH();
        try {
            mh$.invokeExact(tensor, i0, i1, i2, i3, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_threadpool_new$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$2,"ggml_threadpool_new");
    }
    /**
     * {@snippet :
     * struct ggml_threadpool* ggml_threadpool_new(struct ggml_threadpool_params* params);
     * }
     */
    public static MemorySegment ggml_threadpool_new(MemorySegment params) {
        var mh$ = ggml_threadpool_new$MH();
        try {
            return (MemorySegment)mh$.invokeExact(params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_threadpool_free$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$3,"ggml_threadpool_free");
    }
    /**
     * {@snippet :
     * void ggml_threadpool_free(struct ggml_threadpool* threadpool);
     * }
     */
    public static void ggml_threadpool_free(MemorySegment threadpool) {
        var mh$ = ggml_threadpool_free$MH();
        try {
            mh$.invokeExact(threadpool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_threadpool_get_n_threads$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$4,"ggml_threadpool_get_n_threads");
    }
    /**
     * {@snippet :
     * int ggml_threadpool_get_n_threads(struct ggml_threadpool* threadpool);
     * }
     */
    public static int ggml_threadpool_get_n_threads(MemorySegment threadpool) {
        var mh$ = ggml_threadpool_get_n_threads$MH();
        try {
            return (int)mh$.invokeExact(threadpool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_threadpool_pause$MH() {
        return RuntimeHelper.requireNonNull(constants$129.const$5,"ggml_threadpool_pause");
    }
    /**
     * {@snippet :
     * void ggml_threadpool_pause(struct ggml_threadpool* threadpool);
     * }
     */
    public static void ggml_threadpool_pause(MemorySegment threadpool) {
        var mh$ = ggml_threadpool_pause$MH();
        try {
            mh$.invokeExact(threadpool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_threadpool_resume$MH() {
        return RuntimeHelper.requireNonNull(constants$130.const$0,"ggml_threadpool_resume");
    }
    /**
     * {@snippet :
     * void ggml_threadpool_resume(struct ggml_threadpool* threadpool);
     * }
     */
    public static void ggml_threadpool_resume(MemorySegment threadpool) {
        var mh$ = ggml_threadpool_resume$MH();
        try {
            mh$.invokeExact(threadpool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_plan$MH() {
        return RuntimeHelper.requireNonNull(constants$130.const$2,"ggml_graph_plan");
    }
    /**
     * {@snippet :
     * struct ggml_cplan ggml_graph_plan(struct ggml_cgraph* cgraph, int n_threads, struct ggml_threadpool* threadpool);
     * }
     */
    public static MemorySegment ggml_graph_plan(SegmentAllocator allocator, MemorySegment cgraph, int n_threads, MemorySegment threadpool) {
        var mh$ = ggml_graph_plan$MH();
        try {
            return (MemorySegment)mh$.invokeExact(allocator, cgraph, n_threads, threadpool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_compute$MH() {
        return RuntimeHelper.requireNonNull(constants$130.const$3,"ggml_graph_compute");
    }
    /**
     * {@snippet :
     * enum ggml_status ggml_graph_compute(struct ggml_cgraph* cgraph, struct ggml_cplan* cplan);
     * }
     */
    public static int ggml_graph_compute(MemorySegment cgraph, MemorySegment cplan) {
        var mh$ = ggml_graph_compute$MH();
        try {
            return (int)mh$.invokeExact(cgraph, cplan);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_graph_compute_with_ctx$MH() {
        return RuntimeHelper.requireNonNull(constants$130.const$4,"ggml_graph_compute_with_ctx");
    }
    /**
     * {@snippet :
     * enum ggml_status ggml_graph_compute_with_ctx(struct ggml_context* ctx, struct ggml_cgraph* cgraph, int n_threads);
     * }
     */
    public static int ggml_graph_compute_with_ctx(MemorySegment ctx, MemorySegment cgraph, int n_threads) {
        var mh$ = ggml_graph_compute_with_ctx$MH();
        try {
            return (int)mh$.invokeExact(ctx, cgraph, n_threads);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_sse3$MH() {
        return RuntimeHelper.requireNonNull(constants$130.const$5,"ggml_cpu_has_sse3");
    }
    /**
     * {@snippet :
     * int ggml_cpu_has_sse3();
     * }
     */
    public static int ggml_cpu_has_sse3() {
        var mh$ = ggml_cpu_has_sse3$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_ssse3$MH() {
        return RuntimeHelper.requireNonNull(constants$131.const$0,"ggml_cpu_has_ssse3");
    }
    /**
     * {@snippet :
     * int ggml_cpu_has_ssse3();
     * }
     */
    public static int ggml_cpu_has_ssse3() {
        var mh$ = ggml_cpu_has_ssse3$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_avx$MH() {
        return RuntimeHelper.requireNonNull(constants$131.const$1,"ggml_cpu_has_avx");
    }
    /**
     * {@snippet :
     * int ggml_cpu_has_avx();
     * }
     */
    public static int ggml_cpu_has_avx() {
        var mh$ = ggml_cpu_has_avx$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_avx_vnni$MH() {
        return RuntimeHelper.requireNonNull(constants$131.const$2,"ggml_cpu_has_avx_vnni");
    }
    /**
     * {@snippet :
     * int ggml_cpu_has_avx_vnni();
     * }
     */
    public static int ggml_cpu_has_avx_vnni() {
        var mh$ = ggml_cpu_has_avx_vnni$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_avx2$MH() {
        return RuntimeHelper.requireNonNull(constants$131.const$3,"ggml_cpu_has_avx2");
    }
    /**
     * {@snippet :
     * int ggml_cpu_has_avx2();
     * }
     */
    public static int ggml_cpu_has_avx2() {
        var mh$ = ggml_cpu_has_avx2$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_f16c$MH() {
        return RuntimeHelper.requireNonNull(constants$131.const$4,"ggml_cpu_has_f16c");
    }
    /**
     * {@snippet :
     * int ggml_cpu_has_f16c();
     * }
     */
    public static int ggml_cpu_has_f16c() {
        var mh$ = ggml_cpu_has_f16c$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_fma$MH() {
        return RuntimeHelper.requireNonNull(constants$131.const$5,"ggml_cpu_has_fma");
    }
    /**
     * {@snippet :
     * int ggml_cpu_has_fma();
     * }
     */
    public static int ggml_cpu_has_fma() {
        var mh$ = ggml_cpu_has_fma$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_avx512$MH() {
        return RuntimeHelper.requireNonNull(constants$132.const$0,"ggml_cpu_has_avx512");
    }
    /**
     * {@snippet :
     * int ggml_cpu_has_avx512();
     * }
     */
    public static int ggml_cpu_has_avx512() {
        var mh$ = ggml_cpu_has_avx512$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_avx512_vbmi$MH() {
        return RuntimeHelper.requireNonNull(constants$132.const$1,"ggml_cpu_has_avx512_vbmi");
    }
    /**
     * {@snippet :
     * int ggml_cpu_has_avx512_vbmi();
     * }
     */
    public static int ggml_cpu_has_avx512_vbmi() {
        var mh$ = ggml_cpu_has_avx512_vbmi$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_avx512_vnni$MH() {
        return RuntimeHelper.requireNonNull(constants$132.const$2,"ggml_cpu_has_avx512_vnni");
    }
    /**
     * {@snippet :
     * int ggml_cpu_has_avx512_vnni();
     * }
     */
    public static int ggml_cpu_has_avx512_vnni() {
        var mh$ = ggml_cpu_has_avx512_vnni$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_avx512_bf16$MH() {
        return RuntimeHelper.requireNonNull(constants$132.const$3,"ggml_cpu_has_avx512_bf16");
    }
    /**
     * {@snippet :
     * int ggml_cpu_has_avx512_bf16();
     * }
     */
    public static int ggml_cpu_has_avx512_bf16() {
        var mh$ = ggml_cpu_has_avx512_bf16$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_amx_int8$MH() {
        return RuntimeHelper.requireNonNull(constants$132.const$4,"ggml_cpu_has_amx_int8");
    }
    /**
     * {@snippet :
     * int ggml_cpu_has_amx_int8();
     * }
     */
    public static int ggml_cpu_has_amx_int8() {
        var mh$ = ggml_cpu_has_amx_int8$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_neon$MH() {
        return RuntimeHelper.requireNonNull(constants$132.const$5,"ggml_cpu_has_neon");
    }
    /**
     * {@snippet :
     * int ggml_cpu_has_neon();
     * }
     */
    public static int ggml_cpu_has_neon() {
        var mh$ = ggml_cpu_has_neon$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_arm_fma$MH() {
        return RuntimeHelper.requireNonNull(constants$133.const$0,"ggml_cpu_has_arm_fma");
    }
    /**
     * {@snippet :
     * int ggml_cpu_has_arm_fma();
     * }
     */
    public static int ggml_cpu_has_arm_fma() {
        var mh$ = ggml_cpu_has_arm_fma$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_fp16_va$MH() {
        return RuntimeHelper.requireNonNull(constants$133.const$1,"ggml_cpu_has_fp16_va");
    }
    /**
     * {@snippet :
     * int ggml_cpu_has_fp16_va();
     * }
     */
    public static int ggml_cpu_has_fp16_va() {
        var mh$ = ggml_cpu_has_fp16_va$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_dotprod$MH() {
        return RuntimeHelper.requireNonNull(constants$133.const$2,"ggml_cpu_has_dotprod");
    }
    /**
     * {@snippet :
     * int ggml_cpu_has_dotprod();
     * }
     */
    public static int ggml_cpu_has_dotprod() {
        var mh$ = ggml_cpu_has_dotprod$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_matmul_int8$MH() {
        return RuntimeHelper.requireNonNull(constants$133.const$3,"ggml_cpu_has_matmul_int8");
    }
    /**
     * {@snippet :
     * int ggml_cpu_has_matmul_int8();
     * }
     */
    public static int ggml_cpu_has_matmul_int8() {
        var mh$ = ggml_cpu_has_matmul_int8$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_sve$MH() {
        return RuntimeHelper.requireNonNull(constants$133.const$4,"ggml_cpu_has_sve");
    }
    /**
     * {@snippet :
     * int ggml_cpu_has_sve();
     * }
     */
    public static int ggml_cpu_has_sve() {
        var mh$ = ggml_cpu_has_sve$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_get_sve_cnt$MH() {
        return RuntimeHelper.requireNonNull(constants$133.const$5,"ggml_cpu_get_sve_cnt");
    }
    /**
     * {@snippet :
     * int ggml_cpu_get_sve_cnt();
     * }
     */
    public static int ggml_cpu_get_sve_cnt() {
        var mh$ = ggml_cpu_get_sve_cnt$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_sme$MH() {
        return RuntimeHelper.requireNonNull(constants$134.const$0,"ggml_cpu_has_sme");
    }
    /**
     * {@snippet :
     * int ggml_cpu_has_sme();
     * }
     */
    public static int ggml_cpu_has_sme() {
        var mh$ = ggml_cpu_has_sme$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_riscv_v$MH() {
        return RuntimeHelper.requireNonNull(constants$134.const$1,"ggml_cpu_has_riscv_v");
    }
    /**
     * {@snippet :
     * int ggml_cpu_has_riscv_v();
     * }
     */
    public static int ggml_cpu_has_riscv_v() {
        var mh$ = ggml_cpu_has_riscv_v$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_vsx$MH() {
        return RuntimeHelper.requireNonNull(constants$134.const$2,"ggml_cpu_has_vsx");
    }
    /**
     * {@snippet :
     * int ggml_cpu_has_vsx();
     * }
     */
    public static int ggml_cpu_has_vsx() {
        var mh$ = ggml_cpu_has_vsx$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_vxe$MH() {
        return RuntimeHelper.requireNonNull(constants$134.const$3,"ggml_cpu_has_vxe");
    }
    /**
     * {@snippet :
     * int ggml_cpu_has_vxe();
     * }
     */
    public static int ggml_cpu_has_vxe() {
        var mh$ = ggml_cpu_has_vxe$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_wasm_simd$MH() {
        return RuntimeHelper.requireNonNull(constants$134.const$4,"ggml_cpu_has_wasm_simd");
    }
    /**
     * {@snippet :
     * int ggml_cpu_has_wasm_simd();
     * }
     */
    public static int ggml_cpu_has_wasm_simd() {
        var mh$ = ggml_cpu_has_wasm_simd$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_has_llamafile$MH() {
        return RuntimeHelper.requireNonNull(constants$134.const$5,"ggml_cpu_has_llamafile");
    }
    /**
     * {@snippet :
     * int ggml_cpu_has_llamafile();
     * }
     */
    public static int ggml_cpu_has_llamafile() {
        var mh$ = ggml_cpu_has_llamafile$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_get_type_traits_cpu$MH() {
        return RuntimeHelper.requireNonNull(constants$136.const$2,"ggml_get_type_traits_cpu");
    }
    /**
     * {@snippet :
     * struct ggml_type_traits_cpu* ggml_get_type_traits_cpu(enum ggml_type type);
     * }
     */
    public static MemorySegment ggml_get_type_traits_cpu(int type) {
        var mh$ = ggml_get_type_traits_cpu$MH();
        try {
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_cpu_init$MH() {
        return RuntimeHelper.requireNonNull(constants$136.const$3,"ggml_cpu_init");
    }
    /**
     * {@snippet :
     * void ggml_cpu_init();
     * }
     */
    public static void ggml_cpu_init() {
        var mh$ = ggml_cpu_init$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_cpu_init$MH() {
        return RuntimeHelper.requireNonNull(constants$136.const$4,"ggml_backend_cpu_init");
    }
    /**
     * {@snippet :
     * ggml_backend_t ggml_backend_cpu_init();
     * }
     */
    public static MemorySegment ggml_backend_cpu_init() {
        var mh$ = ggml_backend_cpu_init$MH();
        try {
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_is_cpu$MH() {
        return RuntimeHelper.requireNonNull(constants$136.const$5,"ggml_backend_is_cpu");
    }
    /**
     * {@snippet :
     * _Bool ggml_backend_is_cpu(ggml_backend_t backend);
     * }
     */
    public static boolean ggml_backend_is_cpu(MemorySegment backend) {
        var mh$ = ggml_backend_is_cpu$MH();
        try {
            return (boolean)mh$.invokeExact(backend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_cpu_set_n_threads$MH() {
        return RuntimeHelper.requireNonNull(constants$137.const$0,"ggml_backend_cpu_set_n_threads");
    }
    /**
     * {@snippet :
     * void ggml_backend_cpu_set_n_threads(ggml_backend_t backend_cpu, int n_threads);
     * }
     */
    public static void ggml_backend_cpu_set_n_threads(MemorySegment backend_cpu, int n_threads) {
        var mh$ = ggml_backend_cpu_set_n_threads$MH();
        try {
            mh$.invokeExact(backend_cpu, n_threads);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_cpu_set_threadpool$MH() {
        return RuntimeHelper.requireNonNull(constants$137.const$1,"ggml_backend_cpu_set_threadpool");
    }
    /**
     * {@snippet :
     * void ggml_backend_cpu_set_threadpool(ggml_backend_t backend_cpu, ggml_threadpool_t threadpool);
     * }
     */
    public static void ggml_backend_cpu_set_threadpool(MemorySegment backend_cpu, MemorySegment threadpool) {
        var mh$ = ggml_backend_cpu_set_threadpool$MH();
        try {
            mh$.invokeExact(backend_cpu, threadpool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_cpu_set_abort_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$137.const$2,"ggml_backend_cpu_set_abort_callback");
    }
    /**
     * {@snippet :
     * void ggml_backend_cpu_set_abort_callback(ggml_backend_t backend_cpu, ggml_abort_callback abort_callback, void* abort_callback_data);
     * }
     */
    public static void ggml_backend_cpu_set_abort_callback(MemorySegment backend_cpu, MemorySegment abort_callback, MemorySegment abort_callback_data) {
        var mh$ = ggml_backend_cpu_set_abort_callback$MH();
        try {
            mh$.invokeExact(backend_cpu, abort_callback, abort_callback_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ggml_backend_cpu_reg$MH() {
        return RuntimeHelper.requireNonNull(constants$137.const$3,"ggml_backend_cpu_reg");
    }
    /**
     * {@snippet :
     * ggml_backend_reg_t ggml_backend_cpu_reg();
     * }
     */
    public static MemorySegment ggml_backend_cpu_reg() {
        var mh$ = ggml_backend_cpu_reg$MH();
        try {
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef int llama_pos;
     * }
     */
    public static final OfInt llama_pos = JAVA_INT;
    /**
     * {@snippet :
     * typedef int llama_token;
     * }
     */
    public static final OfInt llama_token = JAVA_INT;
    /**
     * {@snippet :
     * typedef int llama_seq_id;
     * }
     */
    public static final OfInt llama_seq_id = JAVA_INT;
    /**
     * {@snippet :
     * enum llama_vocab_type.LLAMA_VOCAB_TYPE_NONE = 0;
     * }
     */
    public static int LLAMA_VOCAB_TYPE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_type.LLAMA_VOCAB_TYPE_SPM = 1;
     * }
     */
    public static int LLAMA_VOCAB_TYPE_SPM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_type.LLAMA_VOCAB_TYPE_BPE = 2;
     * }
     */
    public static int LLAMA_VOCAB_TYPE_BPE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_type.LLAMA_VOCAB_TYPE_WPM = 3;
     * }
     */
    public static int LLAMA_VOCAB_TYPE_WPM() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_type.LLAMA_VOCAB_TYPE_UGM = 4;
     * }
     */
    public static int LLAMA_VOCAB_TYPE_UGM() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_type.LLAMA_VOCAB_TYPE_RWKV = 5;
     * }
     */
    public static int LLAMA_VOCAB_TYPE_RWKV() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_DEFAULT = 0;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_DEFAULT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_LLAMA3 = 1;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_LLAMA3() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_DEEPSEEK_LLM = 2;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_DEEPSEEK_LLM() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_DEEPSEEK_CODER = 3;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_DEEPSEEK_CODER() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_FALCON = 4;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_FALCON() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_MPT = 5;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_MPT() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_STARCODER = 6;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_STARCODER() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_GPT2 = 7;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_GPT2() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_REFACT = 8;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_REFACT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_COMMAND_R = 9;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_COMMAND_R() {
        return (int)9L;
    }
}


