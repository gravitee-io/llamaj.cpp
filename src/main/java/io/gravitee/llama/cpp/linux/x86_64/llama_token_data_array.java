// Generated by jextract

package io.gravitee.llama.cpp.linux.x86_64;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct llama_token_data_array {
 *     llama_token_data* data;
 *     size_t size;
 *     int64_t selected;
 *     _Bool sorted;
 * };
 * }
 */
public class llama_token_data_array {

    public static MemoryLayout $LAYOUT() {
        return constants$138.const$2;
    }
    public static VarHandle data$VH() {
        return constants$138.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * llama_token_data* data;
     * }
     */
    public static MemorySegment data$get(MemorySegment seg) {
        return (MemorySegment)constants$138.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * llama_token_data* data;
     * }
     */
    public static void data$set(MemorySegment seg, MemorySegment x) {
        constants$138.const$3.set(seg, x);
    }
    public static MemorySegment data$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$138.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$138.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle size$VH() {
        return constants$138.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t size;
     * }
     */
    public static long size$get(MemorySegment seg) {
        return (long)constants$138.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t size;
     * }
     */
    public static void size$set(MemorySegment seg, long x) {
        constants$138.const$4.set(seg, x);
    }
    public static long size$get(MemorySegment seg, long index) {
        return (long)constants$138.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void size$set(MemorySegment seg, long index, long x) {
        constants$138.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle selected$VH() {
        return constants$138.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t selected;
     * }
     */
    public static long selected$get(MemorySegment seg) {
        return (long)constants$138.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t selected;
     * }
     */
    public static void selected$set(MemorySegment seg, long x) {
        constants$138.const$5.set(seg, x);
    }
    public static long selected$get(MemorySegment seg, long index) {
        return (long)constants$138.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void selected$set(MemorySegment seg, long index, long x) {
        constants$138.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle sorted$VH() {
        return constants$139.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool sorted;
     * }
     */
    public static boolean sorted$get(MemorySegment seg) {
        return (boolean)constants$139.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool sorted;
     * }
     */
    public static void sorted$set(MemorySegment seg, boolean x) {
        constants$139.const$0.set(seg, x);
    }
    public static boolean sorted$get(MemorySegment seg, long index) {
        return (boolean)constants$139.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void sorted$set(MemorySegment seg, long index, boolean x) {
        constants$139.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


