// Generated by jextract

package io.gravitee.llama.cpp.linux.x86_64;

import io.gravitee.llama.cpp.linux.x86_64.RuntimeHelper;
import io.gravitee.llama.cpp.linux.x86_64.constants$31;
import io.gravitee.llama.cpp.linux.x86_64.constants$32;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct ggml_tensor {
 *     enum ggml_type type;
 *     struct ggml_backend_buffer* buffer;
 *     int64_t ne[4];
 *     size_t nb[4];
 *     enum ggml_op op;
 *     int32_t op_params[16];
 *     int32_t flags;
 *     struct ggml_tensor* src[10];
 *     struct ggml_tensor* view_src;
 *     size_t view_offs;
 *     void* data;
 *     char name[64];
 *     void* extra;
 *     char padding[8];
 * };
 * }
 */
public class ggml_tensor {

    public static MemoryLayout $LAYOUT() {
        return constants$31.const$3;
    }
    public static VarHandle type$VH() {
        return constants$31.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum ggml_type type;
     * }
     */
    public static int type$get(MemorySegment seg) {
        return (int)constants$31.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum ggml_type type;
     * }
     */
    public static void type$set(MemorySegment seg, int x) {
        constants$31.const$4.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)constants$31.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        constants$31.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle buffer$VH() {
        return constants$31.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct ggml_backend_buffer* buffer;
     * }
     */
    public static MemorySegment buffer$get(MemorySegment seg) {
        return (MemorySegment)constants$31.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct ggml_backend_buffer* buffer;
     * }
     */
    public static void buffer$set(MemorySegment seg, MemorySegment x) {
        constants$31.const$5.set(seg, x);
    }
    public static MemorySegment buffer$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$31.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void buffer$set(MemorySegment seg, long index, MemorySegment x) {
        constants$31.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ne$slice(MemorySegment seg) {
        return seg.asSlice(16, 32);
    }
    public static MemorySegment nb$slice(MemorySegment seg) {
        return seg.asSlice(48, 32);
    }
    public static VarHandle op$VH() {
        return constants$32.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum ggml_op op;
     * }
     */
    public static int op$get(MemorySegment seg) {
        return (int)constants$32.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum ggml_op op;
     * }
     */
    public static void op$set(MemorySegment seg, int x) {
        constants$32.const$0.set(seg, x);
    }
    public static int op$get(MemorySegment seg, long index) {
        return (int)constants$32.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void op$set(MemorySegment seg, long index, int x) {
        constants$32.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment op_params$slice(MemorySegment seg) {
        return seg.asSlice(84, 64);
    }
    public static VarHandle flags$VH() {
        return constants$32.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32_t flags;
     * }
     */
    public static int flags$get(MemorySegment seg) {
        return (int)constants$32.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32_t flags;
     * }
     */
    public static void flags$set(MemorySegment seg, int x) {
        constants$32.const$1.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)constants$32.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        constants$32.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment src$slice(MemorySegment seg) {
        return seg.asSlice(152, 80);
    }
    public static VarHandle view_src$VH() {
        return constants$32.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct ggml_tensor* view_src;
     * }
     */
    public static MemorySegment view_src$get(MemorySegment seg) {
        return (MemorySegment)constants$32.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct ggml_tensor* view_src;
     * }
     */
    public static void view_src$set(MemorySegment seg, MemorySegment x) {
        constants$32.const$2.set(seg, x);
    }
    public static MemorySegment view_src$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$32.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void view_src$set(MemorySegment seg, long index, MemorySegment x) {
        constants$32.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle view_offs$VH() {
        return constants$32.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t view_offs;
     * }
     */
    public static long view_offs$get(MemorySegment seg) {
        return (long)constants$32.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t view_offs;
     * }
     */
    public static void view_offs$set(MemorySegment seg, long x) {
        constants$32.const$3.set(seg, x);
    }
    public static long view_offs$get(MemorySegment seg, long index) {
        return (long)constants$32.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void view_offs$set(MemorySegment seg, long index, long x) {
        constants$32.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle data$VH() {
        return constants$32.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* data;
     * }
     */
    public static MemorySegment data$get(MemorySegment seg) {
        return (MemorySegment)constants$32.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* data;
     * }
     */
    public static void data$set(MemorySegment seg, MemorySegment x) {
        constants$32.const$4.set(seg, x);
    }
    public static MemorySegment data$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$32.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$32.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment name$slice(MemorySegment seg) {
        return seg.asSlice(256, 64);
    }
    public static VarHandle extra$VH() {
        return constants$32.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* extra;
     * }
     */
    public static MemorySegment extra$get(MemorySegment seg) {
        return (MemorySegment)constants$32.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* extra;
     * }
     */
    public static void extra$set(MemorySegment seg, MemorySegment x) {
        constants$32.const$5.set(seg, x);
    }
    public static MemorySegment extra$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$32.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void extra$set(MemorySegment seg, long index, MemorySegment x) {
        constants$32.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(328, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


