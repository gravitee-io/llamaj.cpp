// Generated by jextract

package io.gravitee.llama.cpp.linux.x86_64;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct llama_context_params {
 *     uint32_t n_ctx;
 *     uint32_t n_batch;
 *     uint32_t n_ubatch;
 *     uint32_t n_seq_max;
 *     int32_t n_threads;
 *     int32_t n_threads_batch;
 *     enum llama_rope_scaling_type rope_scaling_type;
 *     enum llama_pooling_type pooling_type;
 *     enum llama_attention_type attention_type;
 *     float rope_freq_base;
 *     float rope_freq_scale;
 *     float yarn_ext_factor;
 *     float yarn_attn_factor;
 *     float yarn_beta_fast;
 *     float yarn_beta_slow;
 *     uint32_t yarn_orig_ctx;
 *     float defrag_thold;
 *     ggml_backend_sched_eval_callback cb_eval;
 *     void* cb_eval_user_data;
 *     enum ggml_type type_k;
 *     enum ggml_type type_v;
 *     _Bool logits_all;
 *     _Bool embeddings;
 *     _Bool offload_kqv;
 *     _Bool flash_attn;
 *     _Bool no_perf;
 *     ggml_abort_callback abort_callback;
 *     void* abort_callback_data;
 * };
 * }
 */
public class llama_context_params {

    public static MemoryLayout $LAYOUT() {
        return constants$144.const$0;
    }
    public static VarHandle n_ctx$VH() {
        return constants$144.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t n_ctx;
     * }
     */
    public static int n_ctx$get(MemorySegment seg) {
        return (int)constants$144.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t n_ctx;
     * }
     */
    public static void n_ctx$set(MemorySegment seg, int x) {
        constants$144.const$1.set(seg, x);
    }
    public static int n_ctx$get(MemorySegment seg, long index) {
        return (int)constants$144.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void n_ctx$set(MemorySegment seg, long index, int x) {
        constants$144.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle n_batch$VH() {
        return constants$144.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t n_batch;
     * }
     */
    public static int n_batch$get(MemorySegment seg) {
        return (int)constants$144.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t n_batch;
     * }
     */
    public static void n_batch$set(MemorySegment seg, int x) {
        constants$144.const$2.set(seg, x);
    }
    public static int n_batch$get(MemorySegment seg, long index) {
        return (int)constants$144.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void n_batch$set(MemorySegment seg, long index, int x) {
        constants$144.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle n_ubatch$VH() {
        return constants$144.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t n_ubatch;
     * }
     */
    public static int n_ubatch$get(MemorySegment seg) {
        return (int)constants$144.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t n_ubatch;
     * }
     */
    public static void n_ubatch$set(MemorySegment seg, int x) {
        constants$144.const$3.set(seg, x);
    }
    public static int n_ubatch$get(MemorySegment seg, long index) {
        return (int)constants$144.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void n_ubatch$set(MemorySegment seg, long index, int x) {
        constants$144.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle n_seq_max$VH() {
        return constants$144.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t n_seq_max;
     * }
     */
    public static int n_seq_max$get(MemorySegment seg) {
        return (int)constants$144.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t n_seq_max;
     * }
     */
    public static void n_seq_max$set(MemorySegment seg, int x) {
        constants$144.const$4.set(seg, x);
    }
    public static int n_seq_max$get(MemorySegment seg, long index) {
        return (int)constants$144.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void n_seq_max$set(MemorySegment seg, long index, int x) {
        constants$144.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle n_threads$VH() {
        return constants$144.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32_t n_threads;
     * }
     */
    public static int n_threads$get(MemorySegment seg) {
        return (int)constants$144.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32_t n_threads;
     * }
     */
    public static void n_threads$set(MemorySegment seg, int x) {
        constants$144.const$5.set(seg, x);
    }
    public static int n_threads$get(MemorySegment seg, long index) {
        return (int)constants$144.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void n_threads$set(MemorySegment seg, long index, int x) {
        constants$144.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle n_threads_batch$VH() {
        return constants$145.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32_t n_threads_batch;
     * }
     */
    public static int n_threads_batch$get(MemorySegment seg) {
        return (int)constants$145.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32_t n_threads_batch;
     * }
     */
    public static void n_threads_batch$set(MemorySegment seg, int x) {
        constants$145.const$0.set(seg, x);
    }
    public static int n_threads_batch$get(MemorySegment seg, long index) {
        return (int)constants$145.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void n_threads_batch$set(MemorySegment seg, long index, int x) {
        constants$145.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rope_scaling_type$VH() {
        return constants$145.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum llama_rope_scaling_type rope_scaling_type;
     * }
     */
    public static int rope_scaling_type$get(MemorySegment seg) {
        return (int)constants$145.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum llama_rope_scaling_type rope_scaling_type;
     * }
     */
    public static void rope_scaling_type$set(MemorySegment seg, int x) {
        constants$145.const$1.set(seg, x);
    }
    public static int rope_scaling_type$get(MemorySegment seg, long index) {
        return (int)constants$145.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void rope_scaling_type$set(MemorySegment seg, long index, int x) {
        constants$145.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pooling_type$VH() {
        return constants$145.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum llama_pooling_type pooling_type;
     * }
     */
    public static int pooling_type$get(MemorySegment seg) {
        return (int)constants$145.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum llama_pooling_type pooling_type;
     * }
     */
    public static void pooling_type$set(MemorySegment seg, int x) {
        constants$145.const$2.set(seg, x);
    }
    public static int pooling_type$get(MemorySegment seg, long index) {
        return (int)constants$145.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void pooling_type$set(MemorySegment seg, long index, int x) {
        constants$145.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle attention_type$VH() {
        return constants$145.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum llama_attention_type attention_type;
     * }
     */
    public static int attention_type$get(MemorySegment seg) {
        return (int)constants$145.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum llama_attention_type attention_type;
     * }
     */
    public static void attention_type$set(MemorySegment seg, int x) {
        constants$145.const$3.set(seg, x);
    }
    public static int attention_type$get(MemorySegment seg, long index) {
        return (int)constants$145.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void attention_type$set(MemorySegment seg, long index, int x) {
        constants$145.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rope_freq_base$VH() {
        return constants$145.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float rope_freq_base;
     * }
     */
    public static float rope_freq_base$get(MemorySegment seg) {
        return (float)constants$145.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float rope_freq_base;
     * }
     */
    public static void rope_freq_base$set(MemorySegment seg, float x) {
        constants$145.const$4.set(seg, x);
    }
    public static float rope_freq_base$get(MemorySegment seg, long index) {
        return (float)constants$145.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void rope_freq_base$set(MemorySegment seg, long index, float x) {
        constants$145.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rope_freq_scale$VH() {
        return constants$145.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float rope_freq_scale;
     * }
     */
    public static float rope_freq_scale$get(MemorySegment seg) {
        return (float)constants$145.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float rope_freq_scale;
     * }
     */
    public static void rope_freq_scale$set(MemorySegment seg, float x) {
        constants$145.const$5.set(seg, x);
    }
    public static float rope_freq_scale$get(MemorySegment seg, long index) {
        return (float)constants$145.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void rope_freq_scale$set(MemorySegment seg, long index, float x) {
        constants$145.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle yarn_ext_factor$VH() {
        return constants$146.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float yarn_ext_factor;
     * }
     */
    public static float yarn_ext_factor$get(MemorySegment seg) {
        return (float)constants$146.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float yarn_ext_factor;
     * }
     */
    public static void yarn_ext_factor$set(MemorySegment seg, float x) {
        constants$146.const$0.set(seg, x);
    }
    public static float yarn_ext_factor$get(MemorySegment seg, long index) {
        return (float)constants$146.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void yarn_ext_factor$set(MemorySegment seg, long index, float x) {
        constants$146.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle yarn_attn_factor$VH() {
        return constants$146.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float yarn_attn_factor;
     * }
     */
    public static float yarn_attn_factor$get(MemorySegment seg) {
        return (float)constants$146.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float yarn_attn_factor;
     * }
     */
    public static void yarn_attn_factor$set(MemorySegment seg, float x) {
        constants$146.const$1.set(seg, x);
    }
    public static float yarn_attn_factor$get(MemorySegment seg, long index) {
        return (float)constants$146.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void yarn_attn_factor$set(MemorySegment seg, long index, float x) {
        constants$146.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle yarn_beta_fast$VH() {
        return constants$146.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float yarn_beta_fast;
     * }
     */
    public static float yarn_beta_fast$get(MemorySegment seg) {
        return (float)constants$146.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float yarn_beta_fast;
     * }
     */
    public static void yarn_beta_fast$set(MemorySegment seg, float x) {
        constants$146.const$2.set(seg, x);
    }
    public static float yarn_beta_fast$get(MemorySegment seg, long index) {
        return (float)constants$146.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void yarn_beta_fast$set(MemorySegment seg, long index, float x) {
        constants$146.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle yarn_beta_slow$VH() {
        return constants$146.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float yarn_beta_slow;
     * }
     */
    public static float yarn_beta_slow$get(MemorySegment seg) {
        return (float)constants$146.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float yarn_beta_slow;
     * }
     */
    public static void yarn_beta_slow$set(MemorySegment seg, float x) {
        constants$146.const$3.set(seg, x);
    }
    public static float yarn_beta_slow$get(MemorySegment seg, long index) {
        return (float)constants$146.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void yarn_beta_slow$set(MemorySegment seg, long index, float x) {
        constants$146.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle yarn_orig_ctx$VH() {
        return constants$146.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t yarn_orig_ctx;
     * }
     */
    public static int yarn_orig_ctx$get(MemorySegment seg) {
        return (int)constants$146.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t yarn_orig_ctx;
     * }
     */
    public static void yarn_orig_ctx$set(MemorySegment seg, int x) {
        constants$146.const$4.set(seg, x);
    }
    public static int yarn_orig_ctx$get(MemorySegment seg, long index) {
        return (int)constants$146.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void yarn_orig_ctx$set(MemorySegment seg, long index, int x) {
        constants$146.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle defrag_thold$VH() {
        return constants$146.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float defrag_thold;
     * }
     */
    public static float defrag_thold$get(MemorySegment seg) {
        return (float)constants$146.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float defrag_thold;
     * }
     */
    public static void defrag_thold$set(MemorySegment seg, float x) {
        constants$146.const$5.set(seg, x);
    }
    public static float defrag_thold$get(MemorySegment seg, long index) {
        return (float)constants$146.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void defrag_thold$set(MemorySegment seg, long index, float x) {
        constants$146.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cb_eval$VH() {
        return constants$147.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ggml_backend_sched_eval_callback cb_eval;
     * }
     */
    public static MemorySegment cb_eval$get(MemorySegment seg) {
        return (MemorySegment)constants$147.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ggml_backend_sched_eval_callback cb_eval;
     * }
     */
    public static void cb_eval$set(MemorySegment seg, MemorySegment x) {
        constants$147.const$0.set(seg, x);
    }
    public static MemorySegment cb_eval$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$147.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void cb_eval$set(MemorySegment seg, long index, MemorySegment x) {
        constants$147.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static ggml_backend_sched_eval_callback cb_eval(MemorySegment segment, Arena scope) {
        return ggml_backend_sched_eval_callback.ofAddress(cb_eval$get(segment), scope);
    }
    public static VarHandle cb_eval_user_data$VH() {
        return constants$147.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* cb_eval_user_data;
     * }
     */
    public static MemorySegment cb_eval_user_data$get(MemorySegment seg) {
        return (MemorySegment)constants$147.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* cb_eval_user_data;
     * }
     */
    public static void cb_eval_user_data$set(MemorySegment seg, MemorySegment x) {
        constants$147.const$1.set(seg, x);
    }
    public static MemorySegment cb_eval_user_data$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$147.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void cb_eval_user_data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$147.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle type_k$VH() {
        return constants$147.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum ggml_type type_k;
     * }
     */
    public static int type_k$get(MemorySegment seg) {
        return (int)constants$147.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum ggml_type type_k;
     * }
     */
    public static void type_k$set(MemorySegment seg, int x) {
        constants$147.const$2.set(seg, x);
    }
    public static int type_k$get(MemorySegment seg, long index) {
        return (int)constants$147.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void type_k$set(MemorySegment seg, long index, int x) {
        constants$147.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle type_v$VH() {
        return constants$147.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum ggml_type type_v;
     * }
     */
    public static int type_v$get(MemorySegment seg) {
        return (int)constants$147.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum ggml_type type_v;
     * }
     */
    public static void type_v$set(MemorySegment seg, int x) {
        constants$147.const$3.set(seg, x);
    }
    public static int type_v$get(MemorySegment seg, long index) {
        return (int)constants$147.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void type_v$set(MemorySegment seg, long index, int x) {
        constants$147.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle logits_all$VH() {
        return constants$147.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool logits_all;
     * }
     */
    public static boolean logits_all$get(MemorySegment seg) {
        return (boolean)constants$147.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool logits_all;
     * }
     */
    public static void logits_all$set(MemorySegment seg, boolean x) {
        constants$147.const$4.set(seg, x);
    }
    public static boolean logits_all$get(MemorySegment seg, long index) {
        return (boolean)constants$147.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void logits_all$set(MemorySegment seg, long index, boolean x) {
        constants$147.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle embeddings$VH() {
        return constants$147.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool embeddings;
     * }
     */
    public static boolean embeddings$get(MemorySegment seg) {
        return (boolean)constants$147.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool embeddings;
     * }
     */
    public static void embeddings$set(MemorySegment seg, boolean x) {
        constants$147.const$5.set(seg, x);
    }
    public static boolean embeddings$get(MemorySegment seg, long index) {
        return (boolean)constants$147.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void embeddings$set(MemorySegment seg, long index, boolean x) {
        constants$147.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle offload_kqv$VH() {
        return constants$148.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool offload_kqv;
     * }
     */
    public static boolean offload_kqv$get(MemorySegment seg) {
        return (boolean)constants$148.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool offload_kqv;
     * }
     */
    public static void offload_kqv$set(MemorySegment seg, boolean x) {
        constants$148.const$0.set(seg, x);
    }
    public static boolean offload_kqv$get(MemorySegment seg, long index) {
        return (boolean)constants$148.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void offload_kqv$set(MemorySegment seg, long index, boolean x) {
        constants$148.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle flash_attn$VH() {
        return constants$148.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool flash_attn;
     * }
     */
    public static boolean flash_attn$get(MemorySegment seg) {
        return (boolean)constants$148.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool flash_attn;
     * }
     */
    public static void flash_attn$set(MemorySegment seg, boolean x) {
        constants$148.const$1.set(seg, x);
    }
    public static boolean flash_attn$get(MemorySegment seg, long index) {
        return (boolean)constants$148.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void flash_attn$set(MemorySegment seg, long index, boolean x) {
        constants$148.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle no_perf$VH() {
        return constants$148.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool no_perf;
     * }
     */
    public static boolean no_perf$get(MemorySegment seg) {
        return (boolean)constants$148.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool no_perf;
     * }
     */
    public static void no_perf$set(MemorySegment seg, boolean x) {
        constants$148.const$2.set(seg, x);
    }
    public static boolean no_perf$get(MemorySegment seg, long index) {
        return (boolean)constants$148.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void no_perf$set(MemorySegment seg, long index, boolean x) {
        constants$148.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle abort_callback$VH() {
        return constants$148.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ggml_abort_callback abort_callback;
     * }
     */
    public static MemorySegment abort_callback$get(MemorySegment seg) {
        return (MemorySegment)constants$148.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ggml_abort_callback abort_callback;
     * }
     */
    public static void abort_callback$set(MemorySegment seg, MemorySegment x) {
        constants$148.const$3.set(seg, x);
    }
    public static MemorySegment abort_callback$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$148.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void abort_callback$set(MemorySegment seg, long index, MemorySegment x) {
        constants$148.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static ggml_abort_callback abort_callback(MemorySegment segment, Arena scope) {
        return ggml_abort_callback.ofAddress(abort_callback$get(segment), scope);
    }
    public static VarHandle abort_callback_data$VH() {
        return constants$148.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* abort_callback_data;
     * }
     */
    public static MemorySegment abort_callback_data$get(MemorySegment seg) {
        return (MemorySegment)constants$148.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* abort_callback_data;
     * }
     */
    public static void abort_callback_data$set(MemorySegment seg, MemorySegment x) {
        constants$148.const$4.set(seg, x);
    }
    public static MemorySegment abort_callback_data$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$148.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void abort_callback_data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$148.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


