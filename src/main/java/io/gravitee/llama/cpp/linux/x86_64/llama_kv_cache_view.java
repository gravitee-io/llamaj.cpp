// Generated by jextract

package io.gravitee.llama.cpp.linux.x86_64;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct llama_kv_cache_view {
 *     int32_t n_cells;
 *     int32_t n_seq_max;
 *     int32_t token_count;
 *     int32_t used_cells;
 *     int32_t max_contiguous;
 *     int32_t max_contiguous_idx;
 *     struct llama_kv_cache_view_cell* cells;
 *     llama_seq_id* cells_sequences;
 * };
 * }
 */
public class llama_kv_cache_view {

    public static MemoryLayout $LAYOUT() {
        return constants$163.const$2;
    }
    public static VarHandle n_cells$VH() {
        return constants$163.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32_t n_cells;
     * }
     */
    public static int n_cells$get(MemorySegment seg) {
        return (int)constants$163.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32_t n_cells;
     * }
     */
    public static void n_cells$set(MemorySegment seg, int x) {
        constants$163.const$3.set(seg, x);
    }
    public static int n_cells$get(MemorySegment seg, long index) {
        return (int)constants$163.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void n_cells$set(MemorySegment seg, long index, int x) {
        constants$163.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle n_seq_max$VH() {
        return constants$163.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32_t n_seq_max;
     * }
     */
    public static int n_seq_max$get(MemorySegment seg) {
        return (int)constants$163.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32_t n_seq_max;
     * }
     */
    public static void n_seq_max$set(MemorySegment seg, int x) {
        constants$163.const$4.set(seg, x);
    }
    public static int n_seq_max$get(MemorySegment seg, long index) {
        return (int)constants$163.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void n_seq_max$set(MemorySegment seg, long index, int x) {
        constants$163.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle token_count$VH() {
        return constants$163.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32_t token_count;
     * }
     */
    public static int token_count$get(MemorySegment seg) {
        return (int)constants$163.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32_t token_count;
     * }
     */
    public static void token_count$set(MemorySegment seg, int x) {
        constants$163.const$5.set(seg, x);
    }
    public static int token_count$get(MemorySegment seg, long index) {
        return (int)constants$163.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void token_count$set(MemorySegment seg, long index, int x) {
        constants$163.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle used_cells$VH() {
        return constants$164.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32_t used_cells;
     * }
     */
    public static int used_cells$get(MemorySegment seg) {
        return (int)constants$164.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32_t used_cells;
     * }
     */
    public static void used_cells$set(MemorySegment seg, int x) {
        constants$164.const$0.set(seg, x);
    }
    public static int used_cells$get(MemorySegment seg, long index) {
        return (int)constants$164.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void used_cells$set(MemorySegment seg, long index, int x) {
        constants$164.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max_contiguous$VH() {
        return constants$164.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32_t max_contiguous;
     * }
     */
    public static int max_contiguous$get(MemorySegment seg) {
        return (int)constants$164.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32_t max_contiguous;
     * }
     */
    public static void max_contiguous$set(MemorySegment seg, int x) {
        constants$164.const$1.set(seg, x);
    }
    public static int max_contiguous$get(MemorySegment seg, long index) {
        return (int)constants$164.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void max_contiguous$set(MemorySegment seg, long index, int x) {
        constants$164.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle max_contiguous_idx$VH() {
        return constants$164.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32_t max_contiguous_idx;
     * }
     */
    public static int max_contiguous_idx$get(MemorySegment seg) {
        return (int)constants$164.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32_t max_contiguous_idx;
     * }
     */
    public static void max_contiguous_idx$set(MemorySegment seg, int x) {
        constants$164.const$2.set(seg, x);
    }
    public static int max_contiguous_idx$get(MemorySegment seg, long index) {
        return (int)constants$164.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void max_contiguous_idx$set(MemorySegment seg, long index, int x) {
        constants$164.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cells$VH() {
        return constants$164.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct llama_kv_cache_view_cell* cells;
     * }
     */
    public static MemorySegment cells$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$164.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct llama_kv_cache_view_cell* cells;
     * }
     */
    public static void cells$set(MemorySegment seg, MemorySegment x) {
        constants$164.const$3.set(seg, x);
    }
    public static MemorySegment cells$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$164.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void cells$set(MemorySegment seg, long index, MemorySegment x) {
        constants$164.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle cells_sequences$VH() {
        return constants$164.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * llama_seq_id* cells_sequences;
     * }
     */
    public static MemorySegment cells_sequences$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$164.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * llama_seq_id* cells_sequences;
     * }
     */
    public static void cells_sequences$set(MemorySegment seg, MemorySegment x) {
        constants$164.const$4.set(seg, x);
    }
    public static MemorySegment cells_sequences$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$164.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void cells_sequences$set(MemorySegment seg, long index, MemorySegment x) {
        constants$164.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


