// Generated by jextract

package io.gravitee.llama.cpp.linux.x86_64;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct ggml_type_traits_cpu {
 *     ggml_from_float_t from_float;
 *     ggml_vec_dot_t vec_dot;
 *     enum ggml_type vec_dot_type;
 *     int64_t nrows;
 * };
 * }
 */
public class ggml_type_traits_cpu {

    public static MemoryLayout $LAYOUT() {
        return constants$135.const$3;
    }
    public static VarHandle from_float$VH() {
        return constants$135.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ggml_from_float_t from_float;
     * }
     */
    public static MemorySegment from_float$get(MemorySegment seg) {
        return (MemorySegment)constants$135.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ggml_from_float_t from_float;
     * }
     */
    public static void from_float$set(MemorySegment seg, MemorySegment x) {
        constants$135.const$4.set(seg, x);
    }
    public static MemorySegment from_float$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$135.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void from_float$set(MemorySegment seg, long index, MemorySegment x) {
        constants$135.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static ggml_from_float_t from_float(MemorySegment segment, Arena scope) {
        return ggml_from_float_t.ofAddress(from_float$get(segment), scope);
    }
    public static VarHandle vec_dot$VH() {
        return constants$135.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ggml_vec_dot_t vec_dot;
     * }
     */
    public static MemorySegment vec_dot$get(MemorySegment seg) {
        return (MemorySegment)constants$135.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ggml_vec_dot_t vec_dot;
     * }
     */
    public static void vec_dot$set(MemorySegment seg, MemorySegment x) {
        constants$135.const$5.set(seg, x);
    }
    public static MemorySegment vec_dot$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$135.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void vec_dot$set(MemorySegment seg, long index, MemorySegment x) {
        constants$135.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static ggml_vec_dot_t vec_dot(MemorySegment segment, Arena scope) {
        return ggml_vec_dot_t.ofAddress(vec_dot$get(segment), scope);
    }
    public static VarHandle vec_dot_type$VH() {
        return constants$136.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum ggml_type vec_dot_type;
     * }
     */
    public static int vec_dot_type$get(MemorySegment seg) {
        return (int)constants$136.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum ggml_type vec_dot_type;
     * }
     */
    public static void vec_dot_type$set(MemorySegment seg, int x) {
        constants$136.const$0.set(seg, x);
    }
    public static int vec_dot_type$get(MemorySegment seg, long index) {
        return (int)constants$136.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void vec_dot_type$set(MemorySegment seg, long index, int x) {
        constants$136.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle nrows$VH() {
        return constants$136.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t nrows;
     * }
     */
    public static long nrows$get(MemorySegment seg) {
        return (long)constants$136.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t nrows;
     * }
     */
    public static void nrows$set(MemorySegment seg, long x) {
        constants$136.const$1.set(seg, x);
    }
    public static long nrows$get(MemorySegment seg, long index) {
        return (long)constants$136.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void nrows$set(MemorySegment seg, long index, long x) {
        constants$136.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


