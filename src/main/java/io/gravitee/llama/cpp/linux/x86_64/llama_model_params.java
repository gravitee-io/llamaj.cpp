// Generated by jextract

package io.gravitee.llama.cpp.linux.x86_64;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct llama_model_params {
 *     ggml_backend_dev_t* devices;
 *     struct llama_model_tensor_buft_override* tensor_buft_overrides;
 *     int32_t n_gpu_layers;
 *     enum llama_split_mode split_mode;
 *     int32_t main_gpu;
 *     float* tensor_split;
 *     llama_progress_callback progress_callback;
 *     void* progress_callback_user_data;
 *     struct llama_model_kv_override* kv_overrides;
 *     _Bool vocab_only;
 *     _Bool use_mmap;
 *     _Bool use_mlock;
 *     _Bool check_tensors;
 * };
 * }
 */
public class llama_model_params {

    public static MemoryLayout $LAYOUT() {
        return constants$140.const$0;
    }
    public static VarHandle devices$VH() {
        return constants$140.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ggml_backend_dev_t* devices;
     * }
     */
    public static MemorySegment devices$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$140.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ggml_backend_dev_t* devices;
     * }
     */
    public static void devices$set(MemorySegment seg, MemorySegment x) {
        constants$140.const$1.set(seg, x);
    }
    public static MemorySegment devices$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$140.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void devices$set(MemorySegment seg, long index, MemorySegment x) {
        constants$140.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tensor_buft_overrides$VH() {
        return constants$140.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct llama_model_tensor_buft_override* tensor_buft_overrides;
     * }
     */
    public static MemorySegment tensor_buft_overrides$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$140.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct llama_model_tensor_buft_override* tensor_buft_overrides;
     * }
     */
    public static void tensor_buft_overrides$set(MemorySegment seg, MemorySegment x) {
        constants$140.const$2.set(seg, x);
    }
    public static MemorySegment tensor_buft_overrides$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$140.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void tensor_buft_overrides$set(MemorySegment seg, long index, MemorySegment x) {
        constants$140.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle n_gpu_layers$VH() {
        return constants$140.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32_t n_gpu_layers;
     * }
     */
    public static int n_gpu_layers$get(MemorySegment seg) {
        return (int)constants$140.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32_t n_gpu_layers;
     * }
     */
    public static void n_gpu_layers$set(MemorySegment seg, int x) {
        constants$140.const$3.set(seg, x);
    }
    public static int n_gpu_layers$get(MemorySegment seg, long index) {
        return (int)constants$140.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void n_gpu_layers$set(MemorySegment seg, long index, int x) {
        constants$140.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle split_mode$VH() {
        return constants$140.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum llama_split_mode split_mode;
     * }
     */
    public static int split_mode$get(MemorySegment seg) {
        return (int)constants$140.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum llama_split_mode split_mode;
     * }
     */
    public static void split_mode$set(MemorySegment seg, int x) {
        constants$140.const$4.set(seg, x);
    }
    public static int split_mode$get(MemorySegment seg, long index) {
        return (int)constants$140.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void split_mode$set(MemorySegment seg, long index, int x) {
        constants$140.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle main_gpu$VH() {
        return constants$140.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32_t main_gpu;
     * }
     */
    public static int main_gpu$get(MemorySegment seg) {
        return (int)constants$140.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32_t main_gpu;
     * }
     */
    public static void main_gpu$set(MemorySegment seg, int x) {
        constants$140.const$5.set(seg, x);
    }
    public static int main_gpu$get(MemorySegment seg, long index) {
        return (int)constants$140.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void main_gpu$set(MemorySegment seg, long index, int x) {
        constants$140.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle tensor_split$VH() {
        return constants$141.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float* tensor_split;
     * }
     */
    public static MemorySegment tensor_split$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$141.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float* tensor_split;
     * }
     */
    public static void tensor_split$set(MemorySegment seg, MemorySegment x) {
        constants$141.const$0.set(seg, x);
    }
    public static MemorySegment tensor_split$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$141.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void tensor_split$set(MemorySegment seg, long index, MemorySegment x) {
        constants$141.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle progress_callback$VH() {
        return constants$141.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * llama_progress_callback progress_callback;
     * }
     */
    public static MemorySegment progress_callback$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$141.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * llama_progress_callback progress_callback;
     * }
     */
    public static void progress_callback$set(MemorySegment seg, MemorySegment x) {
        constants$141.const$1.set(seg, x);
    }
    public static MemorySegment progress_callback$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$141.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void progress_callback$set(MemorySegment seg, long index, MemorySegment x) {
        constants$141.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static llama_progress_callback progress_callback(MemorySegment segment, Arena scope) {
        return llama_progress_callback.ofAddress(progress_callback$get(segment), scope);
    }
    public static VarHandle progress_callback_user_data$VH() {
        return constants$141.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* progress_callback_user_data;
     * }
     */
    public static MemorySegment progress_callback_user_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$141.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* progress_callback_user_data;
     * }
     */
    public static void progress_callback_user_data$set(MemorySegment seg, MemorySegment x) {
        constants$141.const$2.set(seg, x);
    }
    public static MemorySegment progress_callback_user_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$141.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void progress_callback_user_data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$141.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle kv_overrides$VH() {
        return constants$141.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct llama_model_kv_override* kv_overrides;
     * }
     */
    public static MemorySegment kv_overrides$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$141.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct llama_model_kv_override* kv_overrides;
     * }
     */
    public static void kv_overrides$set(MemorySegment seg, MemorySegment x) {
        constants$141.const$3.set(seg, x);
    }
    public static MemorySegment kv_overrides$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$141.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void kv_overrides$set(MemorySegment seg, long index, MemorySegment x) {
        constants$141.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle vocab_only$VH() {
        return constants$141.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool vocab_only;
     * }
     */
    public static boolean vocab_only$get(MemorySegment seg) {
        return (boolean)constants$141.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool vocab_only;
     * }
     */
    public static void vocab_only$set(MemorySegment seg, boolean x) {
        constants$141.const$4.set(seg, x);
    }
    public static boolean vocab_only$get(MemorySegment seg, long index) {
        return (boolean)constants$141.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void vocab_only$set(MemorySegment seg, long index, boolean x) {
        constants$141.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle use_mmap$VH() {
        return constants$141.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool use_mmap;
     * }
     */
    public static boolean use_mmap$get(MemorySegment seg) {
        return (boolean)constants$141.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool use_mmap;
     * }
     */
    public static void use_mmap$set(MemorySegment seg, boolean x) {
        constants$141.const$5.set(seg, x);
    }
    public static boolean use_mmap$get(MemorySegment seg, long index) {
        return (boolean)constants$141.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void use_mmap$set(MemorySegment seg, long index, boolean x) {
        constants$141.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle use_mlock$VH() {
        return constants$142.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool use_mlock;
     * }
     */
    public static boolean use_mlock$get(MemorySegment seg) {
        return (boolean)constants$142.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool use_mlock;
     * }
     */
    public static void use_mlock$set(MemorySegment seg, boolean x) {
        constants$142.const$0.set(seg, x);
    }
    public static boolean use_mlock$get(MemorySegment seg, long index) {
        return (boolean)constants$142.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void use_mlock$set(MemorySegment seg, long index, boolean x) {
        constants$142.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle check_tensors$VH() {
        return constants$142.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool check_tensors;
     * }
     */
    public static boolean check_tensors$get(MemorySegment seg) {
        return (boolean)constants$142.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool check_tensors;
     * }
     */
    public static void check_tensors$set(MemorySegment seg, boolean x) {
        constants$142.const$1.set(seg, x);
    }
    public static boolean check_tensors$get(MemorySegment seg, long index) {
        return (boolean)constants$142.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void check_tensors$set(MemorySegment seg, long index, boolean x) {
        constants$142.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


