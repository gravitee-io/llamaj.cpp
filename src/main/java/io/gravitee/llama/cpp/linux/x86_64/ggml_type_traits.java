// Generated by jextract

package io.gravitee.llama.cpp.linux.x86_64;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct ggml_type_traits {
 *     char* type_name;
 *     int64_t blck_size;
 *     int64_t blck_size_interleave;
 *     size_t type_size;
 *     _Bool is_quantized;
 *     ggml_to_float_t to_float;
 *     ggml_from_float_t from_float_ref;
 * };
 * }
 */
public class ggml_type_traits {

    public static MemoryLayout $LAYOUT() {
        return constants$93.const$5;
    }
    public static VarHandle type_name$VH() {
        return constants$94.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* type_name;
     * }
     */
    public static MemorySegment type_name$get(MemorySegment seg) {
        return (MemorySegment)constants$94.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* type_name;
     * }
     */
    public static void type_name$set(MemorySegment seg, MemorySegment x) {
        constants$94.const$0.set(seg, x);
    }
    public static MemorySegment type_name$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$94.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void type_name$set(MemorySegment seg, long index, MemorySegment x) {
        constants$94.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle blck_size$VH() {
        return constants$94.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t blck_size;
     * }
     */
    public static long blck_size$get(MemorySegment seg) {
        return (long)constants$94.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t blck_size;
     * }
     */
    public static void blck_size$set(MemorySegment seg, long x) {
        constants$94.const$1.set(seg, x);
    }
    public static long blck_size$get(MemorySegment seg, long index) {
        return (long)constants$94.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void blck_size$set(MemorySegment seg, long index, long x) {
        constants$94.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle blck_size_interleave$VH() {
        return constants$94.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t blck_size_interleave;
     * }
     */
    public static long blck_size_interleave$get(MemorySegment seg) {
        return (long)constants$94.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t blck_size_interleave;
     * }
     */
    public static void blck_size_interleave$set(MemorySegment seg, long x) {
        constants$94.const$2.set(seg, x);
    }
    public static long blck_size_interleave$get(MemorySegment seg, long index) {
        return (long)constants$94.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void blck_size_interleave$set(MemorySegment seg, long index, long x) {
        constants$94.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle type_size$VH() {
        return constants$94.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t type_size;
     * }
     */
    public static long type_size$get(MemorySegment seg) {
        return (long)constants$94.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t type_size;
     * }
     */
    public static void type_size$set(MemorySegment seg, long x) {
        constants$94.const$3.set(seg, x);
    }
    public static long type_size$get(MemorySegment seg, long index) {
        return (long)constants$94.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void type_size$set(MemorySegment seg, long index, long x) {
        constants$94.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle is_quantized$VH() {
        return constants$94.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool is_quantized;
     * }
     */
    public static boolean is_quantized$get(MemorySegment seg) {
        return (boolean)constants$94.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool is_quantized;
     * }
     */
    public static void is_quantized$set(MemorySegment seg, boolean x) {
        constants$94.const$4.set(seg, x);
    }
    public static boolean is_quantized$get(MemorySegment seg, long index) {
        return (boolean)constants$94.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void is_quantized$set(MemorySegment seg, long index, boolean x) {
        constants$94.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle to_float$VH() {
        return constants$94.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ggml_to_float_t to_float;
     * }
     */
    public static MemorySegment to_float$get(MemorySegment seg) {
        return (MemorySegment)constants$94.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ggml_to_float_t to_float;
     * }
     */
    public static void to_float$set(MemorySegment seg, MemorySegment x) {
        constants$94.const$5.set(seg, x);
    }
    public static MemorySegment to_float$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$94.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void to_float$set(MemorySegment seg, long index, MemorySegment x) {
        constants$94.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static ggml_to_float_t to_float(MemorySegment segment, Arena scope) {
        return ggml_to_float_t.ofAddress(to_float$get(segment), scope);
    }
    public static VarHandle from_float_ref$VH() {
        return constants$95.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ggml_from_float_t from_float_ref;
     * }
     */
    public static MemorySegment from_float_ref$get(MemorySegment seg) {
        return (MemorySegment)constants$95.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ggml_from_float_t from_float_ref;
     * }
     */
    public static void from_float_ref$set(MemorySegment seg, MemorySegment x) {
        constants$95.const$0.set(seg, x);
    }
    public static MemorySegment from_float_ref$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$95.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void from_float_ref$set(MemorySegment seg, long index, MemorySegment x) {
        constants$95.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static ggml_from_float_t from_float_ref(MemorySegment segment, Arena scope) {
        return ggml_from_float_t.ofAddress(from_float_ref$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


