// Generated by jextract

package io.gravitee.llama.cpp.linux.x86_64;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct llama_perf_sampler_data {
 *     double t_sample_ms;
 *     int32_t n_sample;
 * };
 * }
 */
public class llama_perf_sampler_data {

    public static MemoryLayout $LAYOUT() {
        return constants$196.const$3;
    }
    public static VarHandle t_sample_ms$VH() {
        return constants$196.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double t_sample_ms;
     * }
     */
    public static double t_sample_ms$get(MemorySegment seg) {
        return (double)constants$196.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double t_sample_ms;
     * }
     */
    public static void t_sample_ms$set(MemorySegment seg, double x) {
        constants$196.const$4.set(seg, x);
    }
    public static double t_sample_ms$get(MemorySegment seg, long index) {
        return (double)constants$196.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void t_sample_ms$set(MemorySegment seg, long index, double x) {
        constants$196.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle n_sample$VH() {
        return constants$196.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32_t n_sample;
     * }
     */
    public static int n_sample$get(MemorySegment seg) {
        return (int)constants$196.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32_t n_sample;
     * }
     */
    public static void n_sample$set(MemorySegment seg, int x) {
        constants$196.const$5.set(seg, x);
    }
    public static int n_sample$get(MemorySegment seg, long index) {
        return (int)constants$196.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void n_sample$set(MemorySegment seg, long index, int x) {
        constants$196.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


