// Generated by jextract

package io.gravitee.llama.cpp.linux.x86_64;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct llama_model_quantize_params {
 *     int32_t nthread;
 *     enum llama_ftype ftype;
 *     enum ggml_type output_tensor_type;
 *     enum ggml_type token_embedding_type;
 *     _Bool allow_requantize;
 *     _Bool quantize_output_tensor;
 *     _Bool only_copy;
 *     _Bool pure;
 *     _Bool keep_split;
 *     void* imatrix;
 *     void* kv_overrides;
 * };
 * }
 */
public class llama_model_quantize_params {

    public static MemoryLayout $LAYOUT() {
        return constants$147.const$1;
    }
    public static VarHandle nthread$VH() {
        return constants$147.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32_t nthread;
     * }
     */
    public static int nthread$get(MemorySegment seg) {
        return (int)constants$147.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32_t nthread;
     * }
     */
    public static void nthread$set(MemorySegment seg, int x) {
        constants$147.const$2.set(seg, x);
    }
    public static int nthread$get(MemorySegment seg, long index) {
        return (int)constants$147.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void nthread$set(MemorySegment seg, long index, int x) {
        constants$147.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ftype$VH() {
        return constants$147.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum llama_ftype ftype;
     * }
     */
    public static int ftype$get(MemorySegment seg) {
        return (int)constants$147.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum llama_ftype ftype;
     * }
     */
    public static void ftype$set(MemorySegment seg, int x) {
        constants$147.const$3.set(seg, x);
    }
    public static int ftype$get(MemorySegment seg, long index) {
        return (int)constants$147.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ftype$set(MemorySegment seg, long index, int x) {
        constants$147.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle output_tensor_type$VH() {
        return constants$147.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum ggml_type output_tensor_type;
     * }
     */
    public static int output_tensor_type$get(MemorySegment seg) {
        return (int)constants$147.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum ggml_type output_tensor_type;
     * }
     */
    public static void output_tensor_type$set(MemorySegment seg, int x) {
        constants$147.const$4.set(seg, x);
    }
    public static int output_tensor_type$get(MemorySegment seg, long index) {
        return (int)constants$147.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void output_tensor_type$set(MemorySegment seg, long index, int x) {
        constants$147.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle token_embedding_type$VH() {
        return constants$147.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum ggml_type token_embedding_type;
     * }
     */
    public static int token_embedding_type$get(MemorySegment seg) {
        return (int)constants$147.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum ggml_type token_embedding_type;
     * }
     */
    public static void token_embedding_type$set(MemorySegment seg, int x) {
        constants$147.const$5.set(seg, x);
    }
    public static int token_embedding_type$get(MemorySegment seg, long index) {
        return (int)constants$147.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void token_embedding_type$set(MemorySegment seg, long index, int x) {
        constants$147.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle allow_requantize$VH() {
        return constants$148.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool allow_requantize;
     * }
     */
    public static boolean allow_requantize$get(MemorySegment seg) {
        return (boolean)constants$148.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool allow_requantize;
     * }
     */
    public static void allow_requantize$set(MemorySegment seg, boolean x) {
        constants$148.const$0.set(seg, x);
    }
    public static boolean allow_requantize$get(MemorySegment seg, long index) {
        return (boolean)constants$148.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void allow_requantize$set(MemorySegment seg, long index, boolean x) {
        constants$148.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle quantize_output_tensor$VH() {
        return constants$148.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool quantize_output_tensor;
     * }
     */
    public static boolean quantize_output_tensor$get(MemorySegment seg) {
        return (boolean)constants$148.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool quantize_output_tensor;
     * }
     */
    public static void quantize_output_tensor$set(MemorySegment seg, boolean x) {
        constants$148.const$1.set(seg, x);
    }
    public static boolean quantize_output_tensor$get(MemorySegment seg, long index) {
        return (boolean)constants$148.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void quantize_output_tensor$set(MemorySegment seg, long index, boolean x) {
        constants$148.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle only_copy$VH() {
        return constants$148.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool only_copy;
     * }
     */
    public static boolean only_copy$get(MemorySegment seg) {
        return (boolean)constants$148.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool only_copy;
     * }
     */
    public static void only_copy$set(MemorySegment seg, boolean x) {
        constants$148.const$2.set(seg, x);
    }
    public static boolean only_copy$get(MemorySegment seg, long index) {
        return (boolean)constants$148.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void only_copy$set(MemorySegment seg, long index, boolean x) {
        constants$148.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle pure$VH() {
        return constants$148.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool pure;
     * }
     */
    public static boolean pure$get(MemorySegment seg) {
        return (boolean)constants$148.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool pure;
     * }
     */
    public static void pure$set(MemorySegment seg, boolean x) {
        constants$148.const$3.set(seg, x);
    }
    public static boolean pure$get(MemorySegment seg, long index) {
        return (boolean)constants$148.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void pure$set(MemorySegment seg, long index, boolean x) {
        constants$148.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle keep_split$VH() {
        return constants$148.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * _Bool keep_split;
     * }
     */
    public static boolean keep_split$get(MemorySegment seg) {
        return (boolean)constants$148.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * _Bool keep_split;
     * }
     */
    public static void keep_split$set(MemorySegment seg, boolean x) {
        constants$148.const$4.set(seg, x);
    }
    public static boolean keep_split$get(MemorySegment seg, long index) {
        return (boolean)constants$148.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void keep_split$set(MemorySegment seg, long index, boolean x) {
        constants$148.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle imatrix$VH() {
        return constants$148.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* imatrix;
     * }
     */
    public static MemorySegment imatrix$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$148.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* imatrix;
     * }
     */
    public static void imatrix$set(MemorySegment seg, MemorySegment x) {
        constants$148.const$5.set(seg, x);
    }
    public static MemorySegment imatrix$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$148.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void imatrix$set(MemorySegment seg, long index, MemorySegment x) {
        constants$148.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle kv_overrides$VH() {
        return constants$149.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* kv_overrides;
     * }
     */
    public static MemorySegment kv_overrides$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$149.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* kv_overrides;
     * }
     */
    public static void kv_overrides$set(MemorySegment seg, MemorySegment x) {
        constants$149.const$0.set(seg, x);
    }
    public static MemorySegment kv_overrides$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$149.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void kv_overrides$set(MemorySegment seg, long index, MemorySegment x) {
        constants$149.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


