// Generated by jextract

package io.gravitee.llama.cpp.linux.x86_64;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class llama_h_1 {

    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_QWEN2 = 11;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_QWEN2() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_OLMO = 12;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_OLMO() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_DBRX = 13;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_DBRX() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_SMAUG = 14;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_SMAUG() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_PORO = 15;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_PORO() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_CHATGLM3 = 16;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_CHATGLM3() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_CHATGLM4 = 17;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_CHATGLM4() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_VIKING = 18;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_VIKING() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_JAIS = 19;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_JAIS() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_TEKKEN = 20;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_TEKKEN() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_SMOLLM = 21;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_SMOLLM() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_CODESHELL = 22;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_CODESHELL() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_BLOOM = 23;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_BLOOM() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_GPT3_FINNISH = 24;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_GPT3_FINNISH() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_EXAONE = 25;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_EXAONE() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_CHAMELEON = 26;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_CHAMELEON() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_MINERVA = 27;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_MINERVA() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_DEEPSEEK3_LLM = 28;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_DEEPSEEK3_LLM() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_GPT4O = 29;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_GPT4O() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_SUPERBPE = 30;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_SUPERBPE() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_TRILLION = 31;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_TRILLION() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * enum llama_vocab_pre_type.LLAMA_VOCAB_PRE_TYPE_BAILINGMOE = 32;
     * }
     */
    public static int LLAMA_VOCAB_PRE_TYPE_BAILINGMOE() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum llama_rope_type.LLAMA_ROPE_TYPE_NONE = -1;
     * }
     */
    public static int LLAMA_ROPE_TYPE_NONE() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum llama_rope_type.LLAMA_ROPE_TYPE_NORM = 0;
     * }
     */
    public static int LLAMA_ROPE_TYPE_NORM() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum llama_rope_type.LLAMA_ROPE_TYPE_NEOX = 2;
     * }
     */
    public static int LLAMA_ROPE_TYPE_NEOX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum llama_rope_type.LLAMA_ROPE_TYPE_MROPE = 8;
     * }
     */
    public static int LLAMA_ROPE_TYPE_MROPE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum llama_rope_type.LLAMA_ROPE_TYPE_VISION = 24;
     * }
     */
    public static int LLAMA_ROPE_TYPE_VISION() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum llama_token_type.LLAMA_TOKEN_TYPE_UNDEFINED = 0;
     * }
     */
    public static int LLAMA_TOKEN_TYPE_UNDEFINED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum llama_token_type.LLAMA_TOKEN_TYPE_NORMAL = 1;
     * }
     */
    public static int LLAMA_TOKEN_TYPE_NORMAL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum llama_token_type.LLAMA_TOKEN_TYPE_UNKNOWN = 2;
     * }
     */
    public static int LLAMA_TOKEN_TYPE_UNKNOWN() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum llama_token_type.LLAMA_TOKEN_TYPE_CONTROL = 3;
     * }
     */
    public static int LLAMA_TOKEN_TYPE_CONTROL() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum llama_token_type.LLAMA_TOKEN_TYPE_USER_DEFINED = 4;
     * }
     */
    public static int LLAMA_TOKEN_TYPE_USER_DEFINED() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum llama_token_type.LLAMA_TOKEN_TYPE_UNUSED = 5;
     * }
     */
    public static int LLAMA_TOKEN_TYPE_UNUSED() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum llama_token_type.LLAMA_TOKEN_TYPE_BYTE = 6;
     * }
     */
    public static int LLAMA_TOKEN_TYPE_BYTE() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum llama_token_attr.LLAMA_TOKEN_ATTR_UNDEFINED = 0;
     * }
     */
    public static int LLAMA_TOKEN_ATTR_UNDEFINED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum llama_token_attr.LLAMA_TOKEN_ATTR_UNKNOWN = 1;
     * }
     */
    public static int LLAMA_TOKEN_ATTR_UNKNOWN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum llama_token_attr.LLAMA_TOKEN_ATTR_UNUSED = 2;
     * }
     */
    public static int LLAMA_TOKEN_ATTR_UNUSED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum llama_token_attr.LLAMA_TOKEN_ATTR_NORMAL = 4;
     * }
     */
    public static int LLAMA_TOKEN_ATTR_NORMAL() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum llama_token_attr.LLAMA_TOKEN_ATTR_CONTROL = 8;
     * }
     */
    public static int LLAMA_TOKEN_ATTR_CONTROL() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum llama_token_attr.LLAMA_TOKEN_ATTR_USER_DEFINED = 16;
     * }
     */
    public static int LLAMA_TOKEN_ATTR_USER_DEFINED() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum llama_token_attr.LLAMA_TOKEN_ATTR_BYTE = 32;
     * }
     */
    public static int LLAMA_TOKEN_ATTR_BYTE() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum llama_token_attr.LLAMA_TOKEN_ATTR_NORMALIZED = 64;
     * }
     */
    public static int LLAMA_TOKEN_ATTR_NORMALIZED() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum llama_token_attr.LLAMA_TOKEN_ATTR_LSTRIP = 128;
     * }
     */
    public static int LLAMA_TOKEN_ATTR_LSTRIP() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum llama_token_attr.LLAMA_TOKEN_ATTR_RSTRIP = 256;
     * }
     */
    public static int LLAMA_TOKEN_ATTR_RSTRIP() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum llama_token_attr.LLAMA_TOKEN_ATTR_SINGLE_WORD = 512;
     * }
     */
    public static int LLAMA_TOKEN_ATTR_SINGLE_WORD() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_ALL_F32 = 0;
     * }
     */
    public static int LLAMA_FTYPE_ALL_F32() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_F16 = 1;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_F16() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q4_0 = 2;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q4_0() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q4_1 = 3;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q4_1() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q8_0 = 7;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q8_0() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q5_0 = 8;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q5_0() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q5_1 = 9;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q5_1() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q2_K = 10;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q2_K() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q3_K_S = 11;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q3_K_S() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q3_K_M = 12;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q3_K_M() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q3_K_L = 13;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q3_K_L() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q4_K_S = 14;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q4_K_S() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q4_K_M = 15;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q4_K_M() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q5_K_S = 16;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q5_K_S() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q5_K_M = 17;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q5_K_M() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q6_K = 18;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q6_K() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_IQ2_XXS = 19;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_IQ2_XXS() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_IQ2_XS = 20;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_IQ2_XS() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_Q2_K_S = 21;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_Q2_K_S() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_IQ3_XS = 22;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_IQ3_XS() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_IQ3_XXS = 23;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_IQ3_XXS() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_IQ1_S = 24;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_IQ1_S() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_IQ4_NL = 25;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_IQ4_NL() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_IQ3_S = 26;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_IQ3_S() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_IQ3_M = 27;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_IQ3_M() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_IQ2_S = 28;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_IQ2_S() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_IQ2_M = 29;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_IQ2_M() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_IQ4_XS = 30;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_IQ4_XS() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_IQ1_M = 31;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_IQ1_M() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_BF16 = 32;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_BF16() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_TQ1_0 = 36;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_TQ1_0() {
        return (int)36L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_MOSTLY_TQ2_0 = 37;
     * }
     */
    public static int LLAMA_FTYPE_MOSTLY_TQ2_0() {
        return (int)37L;
    }
    /**
     * {@snippet :
     * enum llama_ftype.LLAMA_FTYPE_GUESSED = 1024;
     * }
     */
    public static int LLAMA_FTYPE_GUESSED() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum llama_rope_scaling_type.LLAMA_ROPE_SCALING_TYPE_UNSPECIFIED = -1;
     * }
     */
    public static int LLAMA_ROPE_SCALING_TYPE_UNSPECIFIED() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum llama_rope_scaling_type.LLAMA_ROPE_SCALING_TYPE_NONE = 0;
     * }
     */
    public static int LLAMA_ROPE_SCALING_TYPE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum llama_rope_scaling_type.LLAMA_ROPE_SCALING_TYPE_LINEAR = 1;
     * }
     */
    public static int LLAMA_ROPE_SCALING_TYPE_LINEAR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum llama_rope_scaling_type.LLAMA_ROPE_SCALING_TYPE_YARN = 2;
     * }
     */
    public static int LLAMA_ROPE_SCALING_TYPE_YARN() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum llama_rope_scaling_type.LLAMA_ROPE_SCALING_TYPE_LONGROPE = 3;
     * }
     */
    public static int LLAMA_ROPE_SCALING_TYPE_LONGROPE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum llama_rope_scaling_type.LLAMA_ROPE_SCALING_TYPE_MAX_VALUE = 3;
     * }
     */
    public static int LLAMA_ROPE_SCALING_TYPE_MAX_VALUE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum llama_pooling_type.LLAMA_POOLING_TYPE_UNSPECIFIED = -1;
     * }
     */
    public static int LLAMA_POOLING_TYPE_UNSPECIFIED() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum llama_pooling_type.LLAMA_POOLING_TYPE_NONE = 0;
     * }
     */
    public static int LLAMA_POOLING_TYPE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum llama_pooling_type.LLAMA_POOLING_TYPE_MEAN = 1;
     * }
     */
    public static int LLAMA_POOLING_TYPE_MEAN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum llama_pooling_type.LLAMA_POOLING_TYPE_CLS = 2;
     * }
     */
    public static int LLAMA_POOLING_TYPE_CLS() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum llama_pooling_type.LLAMA_POOLING_TYPE_LAST = 3;
     * }
     */
    public static int LLAMA_POOLING_TYPE_LAST() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum llama_pooling_type.LLAMA_POOLING_TYPE_RANK = 4;
     * }
     */
    public static int LLAMA_POOLING_TYPE_RANK() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum llama_attention_type.LLAMA_ATTENTION_TYPE_UNSPECIFIED = -1;
     * }
     */
    public static int LLAMA_ATTENTION_TYPE_UNSPECIFIED() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum llama_attention_type.LLAMA_ATTENTION_TYPE_CAUSAL = 0;
     * }
     */
    public static int LLAMA_ATTENTION_TYPE_CAUSAL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum llama_attention_type.LLAMA_ATTENTION_TYPE_NON_CAUSAL = 1;
     * }
     */
    public static int LLAMA_ATTENTION_TYPE_NON_CAUSAL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum llama_split_mode.LLAMA_SPLIT_MODE_NONE = 0;
     * }
     */
    public static int LLAMA_SPLIT_MODE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum llama_split_mode.LLAMA_SPLIT_MODE_LAYER = 1;
     * }
     */
    public static int LLAMA_SPLIT_MODE_LAYER() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum llama_split_mode.LLAMA_SPLIT_MODE_ROW = 2;
     * }
     */
    public static int LLAMA_SPLIT_MODE_ROW() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum llama_model_kv_override_type.LLAMA_KV_OVERRIDE_TYPE_INT = 0;
     * }
     */
    public static int LLAMA_KV_OVERRIDE_TYPE_INT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum llama_model_kv_override_type.LLAMA_KV_OVERRIDE_TYPE_FLOAT = 1;
     * }
     */
    public static int LLAMA_KV_OVERRIDE_TYPE_FLOAT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum llama_model_kv_override_type.LLAMA_KV_OVERRIDE_TYPE_BOOL = 2;
     * }
     */
    public static int LLAMA_KV_OVERRIDE_TYPE_BOOL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum llama_model_kv_override_type.LLAMA_KV_OVERRIDE_TYPE_STR = 3;
     * }
     */
    public static int LLAMA_KV_OVERRIDE_TYPE_STR() {
        return (int)3L;
    }
    public static MethodHandle llama_model_default_params$MH() {
        return RuntimeHelper.requireNonNull(constants$150.const$4,"llama_model_default_params");
    }
    /**
     * {@snippet :
     * struct llama_model_params llama_model_default_params();
     * }
     */
    public static MemorySegment llama_model_default_params(SegmentAllocator allocator) {
        var mh$ = llama_model_default_params$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_context_default_params$MH() {
        return RuntimeHelper.requireNonNull(constants$150.const$6,"llama_context_default_params");
    }
    /**
     * {@snippet :
     * struct llama_context_params llama_context_default_params();
     * }
     */
    public static MemorySegment llama_context_default_params(SegmentAllocator allocator) {
        var mh$ = llama_context_default_params$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_chain_default_params$MH() {
        return RuntimeHelper.requireNonNull(constants$151.const$1,"llama_sampler_chain_default_params");
    }
    /**
     * {@snippet :
     * struct llama_sampler_chain_params llama_sampler_chain_default_params();
     * }
     */
    public static MemorySegment llama_sampler_chain_default_params(SegmentAllocator allocator) {
        var mh$ = llama_sampler_chain_default_params$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_quantize_default_params$MH() {
        return RuntimeHelper.requireNonNull(constants$151.const$3,"llama_model_quantize_default_params");
    }
    /**
     * {@snippet :
     * struct llama_model_quantize_params llama_model_quantize_default_params();
     * }
     */
    public static MemorySegment llama_model_quantize_default_params(SegmentAllocator allocator) {
        var mh$ = llama_model_quantize_default_params$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_backend_init$MH() {
        return RuntimeHelper.requireNonNull(constants$151.const$4,"llama_backend_init");
    }
    /**
     * {@snippet :
     * void llama_backend_init();
     * }
     */
    public static void llama_backend_init() {
        var mh$ = llama_backend_init$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_backend_free$MH() {
        return RuntimeHelper.requireNonNull(constants$151.const$5,"llama_backend_free");
    }
    /**
     * {@snippet :
     * void llama_backend_free();
     * }
     */
    public static void llama_backend_free() {
        var mh$ = llama_backend_free$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_numa_init$MH() {
        return RuntimeHelper.requireNonNull(constants$152.const$0,"llama_numa_init");
    }
    /**
     * {@snippet :
     * void llama_numa_init(enum ggml_numa_strategy numa);
     * }
     */
    public static void llama_numa_init(int numa) {
        var mh$ = llama_numa_init$MH();
        try {
            mh$.invokeExact(numa);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_attach_threadpool$MH() {
        return RuntimeHelper.requireNonNull(constants$152.const$1,"llama_attach_threadpool");
    }
    /**
     * {@snippet :
     * void llama_attach_threadpool(struct llama_context* ctx, ggml_threadpool_t threadpool, ggml_threadpool_t threadpool_batch);
     * }
     */
    public static void llama_attach_threadpool(MemorySegment ctx, MemorySegment threadpool, MemorySegment threadpool_batch) {
        var mh$ = llama_attach_threadpool$MH();
        try {
            mh$.invokeExact(ctx, threadpool, threadpool_batch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_detach_threadpool$MH() {
        return RuntimeHelper.requireNonNull(constants$152.const$2,"llama_detach_threadpool");
    }
    /**
     * {@snippet :
     * void llama_detach_threadpool(struct llama_context* ctx);
     * }
     */
    public static void llama_detach_threadpool(MemorySegment ctx) {
        var mh$ = llama_detach_threadpool$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_load_model_from_file$MH() {
        return RuntimeHelper.requireNonNull(constants$152.const$4,"llama_load_model_from_file");
    }
    /**
     * {@snippet :
     * struct llama_model* llama_load_model_from_file(char* path_model, struct llama_model_params params);
     * }
     */
    public static MemorySegment llama_load_model_from_file(MemorySegment path_model, MemorySegment params) {
        var mh$ = llama_load_model_from_file$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(path_model, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_load_from_file$MH() {
        return RuntimeHelper.requireNonNull(constants$152.const$5,"llama_model_load_from_file");
    }
    /**
     * {@snippet :
     * struct llama_model* llama_model_load_from_file(char* path_model, struct llama_model_params params);
     * }
     */
    public static MemorySegment llama_model_load_from_file(MemorySegment path_model, MemorySegment params) {
        var mh$ = llama_model_load_from_file$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(path_model, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_load_from_splits$MH() {
        return RuntimeHelper.requireNonNull(constants$153.const$1,"llama_model_load_from_splits");
    }
    /**
     * {@snippet :
     * struct llama_model* llama_model_load_from_splits(char** paths, size_t n_paths, struct llama_model_params params);
     * }
     */
    public static MemorySegment llama_model_load_from_splits(MemorySegment paths, long n_paths, MemorySegment params) {
        var mh$ = llama_model_load_from_splits$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(paths, n_paths, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_free_model$MH() {
        return RuntimeHelper.requireNonNull(constants$153.const$2,"llama_free_model");
    }
    /**
     * {@snippet :
     * void llama_free_model(struct llama_model* model);
     * }
     */
    public static void llama_free_model(MemorySegment model) {
        var mh$ = llama_free_model$MH();
        try {
            mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_free$MH() {
        return RuntimeHelper.requireNonNull(constants$153.const$3,"llama_model_free");
    }
    /**
     * {@snippet :
     * void llama_model_free(struct llama_model* model);
     * }
     */
    public static void llama_model_free(MemorySegment model) {
        var mh$ = llama_model_free$MH();
        try {
            mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_init_from_model$MH() {
        return RuntimeHelper.requireNonNull(constants$153.const$5,"llama_init_from_model");
    }
    /**
     * {@snippet :
     * struct llama_context* llama_init_from_model(struct llama_model* model, struct llama_context_params params);
     * }
     */
    public static MemorySegment llama_init_from_model(MemorySegment model, MemorySegment params) {
        var mh$ = llama_init_from_model$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(model, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_new_context_with_model$MH() {
        return RuntimeHelper.requireNonNull(constants$154.const$0,"llama_new_context_with_model");
    }
    /**
     * {@snippet :
     * struct llama_context* llama_new_context_with_model(struct llama_model* model, struct llama_context_params params);
     * }
     */
    public static MemorySegment llama_new_context_with_model(MemorySegment model, MemorySegment params) {
        var mh$ = llama_new_context_with_model$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(model, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_free$MH() {
        return RuntimeHelper.requireNonNull(constants$154.const$1,"llama_free");
    }
    /**
     * {@snippet :
     * void llama_free(struct llama_context* ctx);
     * }
     */
    public static void llama_free(MemorySegment ctx) {
        var mh$ = llama_free$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_time_us$MH() {
        return RuntimeHelper.requireNonNull(constants$154.const$2,"llama_time_us");
    }
    /**
     * {@snippet :
     * int64_t llama_time_us();
     * }
     */
    public static long llama_time_us() {
        var mh$ = llama_time_us$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_max_devices$MH() {
        return RuntimeHelper.requireNonNull(constants$154.const$3,"llama_max_devices");
    }
    /**
     * {@snippet :
     * size_t llama_max_devices();
     * }
     */
    public static long llama_max_devices() {
        var mh$ = llama_max_devices$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_supports_mmap$MH() {
        return RuntimeHelper.requireNonNull(constants$154.const$4,"llama_supports_mmap");
    }
    /**
     * {@snippet :
     * _Bool llama_supports_mmap();
     * }
     */
    public static boolean llama_supports_mmap() {
        var mh$ = llama_supports_mmap$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_supports_mlock$MH() {
        return RuntimeHelper.requireNonNull(constants$154.const$5,"llama_supports_mlock");
    }
    /**
     * {@snippet :
     * _Bool llama_supports_mlock();
     * }
     */
    public static boolean llama_supports_mlock() {
        var mh$ = llama_supports_mlock$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_supports_gpu_offload$MH() {
        return RuntimeHelper.requireNonNull(constants$155.const$0,"llama_supports_gpu_offload");
    }
    /**
     * {@snippet :
     * _Bool llama_supports_gpu_offload();
     * }
     */
    public static boolean llama_supports_gpu_offload() {
        var mh$ = llama_supports_gpu_offload$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_supports_rpc$MH() {
        return RuntimeHelper.requireNonNull(constants$155.const$1,"llama_supports_rpc");
    }
    /**
     * {@snippet :
     * _Bool llama_supports_rpc();
     * }
     */
    public static boolean llama_supports_rpc() {
        var mh$ = llama_supports_rpc$MH();
        try {
            return (boolean)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_n_ctx$MH() {
        return RuntimeHelper.requireNonNull(constants$155.const$2,"llama_n_ctx");
    }
    /**
     * {@snippet :
     * uint32_t llama_n_ctx(struct llama_context* ctx);
     * }
     */
    public static int llama_n_ctx(MemorySegment ctx) {
        var mh$ = llama_n_ctx$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_n_batch$MH() {
        return RuntimeHelper.requireNonNull(constants$155.const$3,"llama_n_batch");
    }
    /**
     * {@snippet :
     * uint32_t llama_n_batch(struct llama_context* ctx);
     * }
     */
    public static int llama_n_batch(MemorySegment ctx) {
        var mh$ = llama_n_batch$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_n_ubatch$MH() {
        return RuntimeHelper.requireNonNull(constants$155.const$4,"llama_n_ubatch");
    }
    /**
     * {@snippet :
     * uint32_t llama_n_ubatch(struct llama_context* ctx);
     * }
     */
    public static int llama_n_ubatch(MemorySegment ctx) {
        var mh$ = llama_n_ubatch$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_n_seq_max$MH() {
        return RuntimeHelper.requireNonNull(constants$155.const$5,"llama_n_seq_max");
    }
    /**
     * {@snippet :
     * uint32_t llama_n_seq_max(struct llama_context* ctx);
     * }
     */
    public static int llama_n_seq_max(MemorySegment ctx) {
        var mh$ = llama_n_seq_max$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_n_ctx_train$MH() {
        return RuntimeHelper.requireNonNull(constants$156.const$0,"llama_n_ctx_train");
    }
    /**
     * {@snippet :
     * int32_t llama_n_ctx_train(struct llama_model* model);
     * }
     */
    public static int llama_n_ctx_train(MemorySegment model) {
        var mh$ = llama_n_ctx_train$MH();
        try {
            return (int)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_n_embd$MH() {
        return RuntimeHelper.requireNonNull(constants$156.const$1,"llama_n_embd");
    }
    /**
     * {@snippet :
     * int32_t llama_n_embd(struct llama_model* model);
     * }
     */
    public static int llama_n_embd(MemorySegment model) {
        var mh$ = llama_n_embd$MH();
        try {
            return (int)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_n_layer$MH() {
        return RuntimeHelper.requireNonNull(constants$156.const$2,"llama_n_layer");
    }
    /**
     * {@snippet :
     * int32_t llama_n_layer(struct llama_model* model);
     * }
     */
    public static int llama_n_layer(MemorySegment model) {
        var mh$ = llama_n_layer$MH();
        try {
            return (int)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_n_head$MH() {
        return RuntimeHelper.requireNonNull(constants$156.const$3,"llama_n_head");
    }
    /**
     * {@snippet :
     * int32_t llama_n_head(struct llama_model* model);
     * }
     */
    public static int llama_n_head(MemorySegment model) {
        var mh$ = llama_n_head$MH();
        try {
            return (int)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_n_vocab$MH() {
        return RuntimeHelper.requireNonNull(constants$156.const$4,"llama_n_vocab");
    }
    /**
     * {@snippet :
     * int32_t llama_n_vocab(struct llama_vocab* vocab);
     * }
     */
    public static int llama_n_vocab(MemorySegment vocab) {
        var mh$ = llama_n_vocab$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_get_model$MH() {
        return RuntimeHelper.requireNonNull(constants$156.const$5,"llama_get_model");
    }
    /**
     * {@snippet :
     * struct llama_model* llama_get_model(struct llama_context* ctx);
     * }
     */
    public static MemorySegment llama_get_model(MemorySegment ctx) {
        var mh$ = llama_get_model$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_get_kv_self$MH() {
        return RuntimeHelper.requireNonNull(constants$157.const$0,"llama_get_kv_self");
    }
    /**
     * {@snippet :
     * struct llama_kv_cache* llama_get_kv_self(struct llama_context* ctx);
     * }
     */
    public static MemorySegment llama_get_kv_self(MemorySegment ctx) {
        var mh$ = llama_get_kv_self$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_pooling_type$MH() {
        return RuntimeHelper.requireNonNull(constants$157.const$1,"llama_pooling_type");
    }
    /**
     * {@snippet :
     * enum llama_pooling_type llama_pooling_type(struct llama_context* ctx);
     * }
     */
    public static int llama_pooling_type(MemorySegment ctx) {
        var mh$ = llama_pooling_type$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_get_vocab$MH() {
        return RuntimeHelper.requireNonNull(constants$157.const$2,"llama_model_get_vocab");
    }
    /**
     * {@snippet :
     * struct llama_vocab* llama_model_get_vocab(struct llama_model* model);
     * }
     */
    public static MemorySegment llama_model_get_vocab(MemorySegment model) {
        var mh$ = llama_model_get_vocab$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_rope_type$MH() {
        return RuntimeHelper.requireNonNull(constants$157.const$3,"llama_model_rope_type");
    }
    /**
     * {@snippet :
     * enum llama_rope_type llama_model_rope_type(struct llama_model* model);
     * }
     */
    public static int llama_model_rope_type(MemorySegment model) {
        var mh$ = llama_model_rope_type$MH();
        try {
            return (int)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_n_ctx_train$MH() {
        return RuntimeHelper.requireNonNull(constants$157.const$4,"llama_model_n_ctx_train");
    }
    /**
     * {@snippet :
     * int32_t llama_model_n_ctx_train(struct llama_model* model);
     * }
     */
    public static int llama_model_n_ctx_train(MemorySegment model) {
        var mh$ = llama_model_n_ctx_train$MH();
        try {
            return (int)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_n_embd$MH() {
        return RuntimeHelper.requireNonNull(constants$157.const$5,"llama_model_n_embd");
    }
    /**
     * {@snippet :
     * int32_t llama_model_n_embd(struct llama_model* model);
     * }
     */
    public static int llama_model_n_embd(MemorySegment model) {
        var mh$ = llama_model_n_embd$MH();
        try {
            return (int)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_n_layer$MH() {
        return RuntimeHelper.requireNonNull(constants$158.const$0,"llama_model_n_layer");
    }
    /**
     * {@snippet :
     * int32_t llama_model_n_layer(struct llama_model* model);
     * }
     */
    public static int llama_model_n_layer(MemorySegment model) {
        var mh$ = llama_model_n_layer$MH();
        try {
            return (int)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_n_head$MH() {
        return RuntimeHelper.requireNonNull(constants$158.const$1,"llama_model_n_head");
    }
    /**
     * {@snippet :
     * int32_t llama_model_n_head(struct llama_model* model);
     * }
     */
    public static int llama_model_n_head(MemorySegment model) {
        var mh$ = llama_model_n_head$MH();
        try {
            return (int)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_n_head_kv$MH() {
        return RuntimeHelper.requireNonNull(constants$158.const$2,"llama_model_n_head_kv");
    }
    /**
     * {@snippet :
     * int32_t llama_model_n_head_kv(struct llama_model* model);
     * }
     */
    public static int llama_model_n_head_kv(MemorySegment model) {
        var mh$ = llama_model_n_head_kv$MH();
        try {
            return (int)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_rope_freq_scale_train$MH() {
        return RuntimeHelper.requireNonNull(constants$158.const$4,"llama_model_rope_freq_scale_train");
    }
    /**
     * {@snippet :
     * float llama_model_rope_freq_scale_train(struct llama_model* model);
     * }
     */
    public static float llama_model_rope_freq_scale_train(MemorySegment model) {
        var mh$ = llama_model_rope_freq_scale_train$MH();
        try {
            return (float)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_type$MH() {
        return RuntimeHelper.requireNonNull(constants$158.const$5,"llama_vocab_type");
    }
    /**
     * {@snippet :
     * enum llama_vocab_type llama_vocab_type(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_type(MemorySegment vocab) {
        var mh$ = llama_vocab_type$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_n_tokens$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$0,"llama_vocab_n_tokens");
    }
    /**
     * {@snippet :
     * int32_t llama_vocab_n_tokens(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_n_tokens(MemorySegment vocab) {
        var mh$ = llama_vocab_n_tokens$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_meta_val_str$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$2,"llama_model_meta_val_str");
    }
    /**
     * {@snippet :
     * int32_t llama_model_meta_val_str(struct llama_model* model, char* key, char* buf, size_t buf_size);
     * }
     */
    public static int llama_model_meta_val_str(MemorySegment model, MemorySegment key, MemorySegment buf, long buf_size) {
        var mh$ = llama_model_meta_val_str$MH();
        try {
            return (int)mh$.invokeExact(model, key, buf, buf_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_meta_count$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$3,"llama_model_meta_count");
    }
    /**
     * {@snippet :
     * int32_t llama_model_meta_count(struct llama_model* model);
     * }
     */
    public static int llama_model_meta_count(MemorySegment model) {
        var mh$ = llama_model_meta_count$MH();
        try {
            return (int)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_meta_key_by_index$MH() {
        return RuntimeHelper.requireNonNull(constants$159.const$5,"llama_model_meta_key_by_index");
    }
    /**
     * {@snippet :
     * int32_t llama_model_meta_key_by_index(struct llama_model* model, int32_t i, char* buf, size_t buf_size);
     * }
     */
    public static int llama_model_meta_key_by_index(MemorySegment model, int i, MemorySegment buf, long buf_size) {
        var mh$ = llama_model_meta_key_by_index$MH();
        try {
            return (int)mh$.invokeExact(model, i, buf, buf_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_meta_val_str_by_index$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$0,"llama_model_meta_val_str_by_index");
    }
    /**
     * {@snippet :
     * int32_t llama_model_meta_val_str_by_index(struct llama_model* model, int32_t i, char* buf, size_t buf_size);
     * }
     */
    public static int llama_model_meta_val_str_by_index(MemorySegment model, int i, MemorySegment buf, long buf_size) {
        var mh$ = llama_model_meta_val_str_by_index$MH();
        try {
            return (int)mh$.invokeExact(model, i, buf, buf_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_desc$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$2,"llama_model_desc");
    }
    /**
     * {@snippet :
     * int32_t llama_model_desc(struct llama_model* model, char* buf, size_t buf_size);
     * }
     */
    public static int llama_model_desc(MemorySegment model, MemorySegment buf, long buf_size) {
        var mh$ = llama_model_desc$MH();
        try {
            return (int)mh$.invokeExact(model, buf, buf_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_size$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$3,"llama_model_size");
    }
    /**
     * {@snippet :
     * uint64_t llama_model_size(struct llama_model* model);
     * }
     */
    public static long llama_model_size(MemorySegment model) {
        var mh$ = llama_model_size$MH();
        try {
            return (long)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_chat_template$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$4,"llama_model_chat_template");
    }
    /**
     * {@snippet :
     * char* llama_model_chat_template(struct llama_model* model, char* name);
     * }
     */
    public static MemorySegment llama_model_chat_template(MemorySegment model, MemorySegment name) {
        var mh$ = llama_model_chat_template$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(model, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_n_params$MH() {
        return RuntimeHelper.requireNonNull(constants$160.const$5,"llama_model_n_params");
    }
    /**
     * {@snippet :
     * uint64_t llama_model_n_params(struct llama_model* model);
     * }
     */
    public static long llama_model_n_params(MemorySegment model) {
        var mh$ = llama_model_n_params$MH();
        try {
            return (long)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_has_encoder$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$0,"llama_model_has_encoder");
    }
    /**
     * {@snippet :
     * _Bool llama_model_has_encoder(struct llama_model* model);
     * }
     */
    public static boolean llama_model_has_encoder(MemorySegment model) {
        var mh$ = llama_model_has_encoder$MH();
        try {
            return (boolean)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_has_decoder$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$1,"llama_model_has_decoder");
    }
    /**
     * {@snippet :
     * _Bool llama_model_has_decoder(struct llama_model* model);
     * }
     */
    public static boolean llama_model_has_decoder(MemorySegment model) {
        var mh$ = llama_model_has_decoder$MH();
        try {
            return (boolean)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_decoder_start_token$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$2,"llama_model_decoder_start_token");
    }
    /**
     * {@snippet :
     * llama_token llama_model_decoder_start_token(struct llama_model* model);
     * }
     */
    public static int llama_model_decoder_start_token(MemorySegment model) {
        var mh$ = llama_model_decoder_start_token$MH();
        try {
            return (int)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_is_recurrent$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$3,"llama_model_is_recurrent");
    }
    /**
     * {@snippet :
     * _Bool llama_model_is_recurrent(struct llama_model* model);
     * }
     */
    public static boolean llama_model_is_recurrent(MemorySegment model) {
        var mh$ = llama_model_is_recurrent$MH();
        try {
            return (boolean)mh$.invokeExact(model);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_model_quantize$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$4,"llama_model_quantize");
    }
    /**
     * {@snippet :
     * uint32_t llama_model_quantize(char* fname_inp, char* fname_out, const llama_model_quantize_params* params);
     * }
     */
    public static int llama_model_quantize(MemorySegment fname_inp, MemorySegment fname_out, MemorySegment params) {
        var mh$ = llama_model_quantize$MH();
        try {
            return (int)mh$.invokeExact(fname_inp, fname_out, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_adapter_lora_init$MH() {
        return RuntimeHelper.requireNonNull(constants$161.const$5,"llama_adapter_lora_init");
    }
    /**
     * {@snippet :
     * struct llama_adapter_lora* llama_adapter_lora_init(struct llama_model* model, char* path_lora);
     * }
     */
    public static MemorySegment llama_adapter_lora_init(MemorySegment model, MemorySegment path_lora) {
        var mh$ = llama_adapter_lora_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(model, path_lora);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_adapter_lora_free$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$0,"llama_adapter_lora_free");
    }
    /**
     * {@snippet :
     * void llama_adapter_lora_free(struct llama_adapter_lora* adapter);
     * }
     */
    public static void llama_adapter_lora_free(MemorySegment adapter) {
        var mh$ = llama_adapter_lora_free$MH();
        try {
            mh$.invokeExact(adapter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_set_adapter_lora$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$2,"llama_set_adapter_lora");
    }
    /**
     * {@snippet :
     * int32_t llama_set_adapter_lora(struct llama_context* ctx, struct llama_adapter_lora* adapter, float scale);
     * }
     */
    public static int llama_set_adapter_lora(MemorySegment ctx, MemorySegment adapter, float scale) {
        var mh$ = llama_set_adapter_lora$MH();
        try {
            return (int)mh$.invokeExact(ctx, adapter, scale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_rm_adapter_lora$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$3,"llama_rm_adapter_lora");
    }
    /**
     * {@snippet :
     * int32_t llama_rm_adapter_lora(struct llama_context* ctx, struct llama_adapter_lora* adapter);
     * }
     */
    public static int llama_rm_adapter_lora(MemorySegment ctx, MemorySegment adapter) {
        var mh$ = llama_rm_adapter_lora$MH();
        try {
            return (int)mh$.invokeExact(ctx, adapter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_clear_adapter_lora$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$4,"llama_clear_adapter_lora");
    }
    /**
     * {@snippet :
     * void llama_clear_adapter_lora(struct llama_context* ctx);
     * }
     */
    public static void llama_clear_adapter_lora(MemorySegment ctx) {
        var mh$ = llama_clear_adapter_lora$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_apply_adapter_cvec$MH() {
        return RuntimeHelper.requireNonNull(constants$162.const$6,"llama_apply_adapter_cvec");
    }
    /**
     * {@snippet :
     * int32_t llama_apply_adapter_cvec(struct llama_context* ctx, float* data, size_t len, int32_t n_embd, int32_t il_start, int32_t il_end);
     * }
     */
    public static int llama_apply_adapter_cvec(MemorySegment ctx, MemorySegment data, long len, int n_embd, int il_start, int il_end) {
        var mh$ = llama_apply_adapter_cvec$MH();
        try {
            return (int)mh$.invokeExact(ctx, data, len, n_embd, il_start, il_end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_cache_view_init$MH() {
        return RuntimeHelper.requireNonNull(constants$164.const$6,"llama_kv_cache_view_init");
    }
    /**
     * {@snippet :
     * struct llama_kv_cache_view llama_kv_cache_view_init(struct llama_context* ctx, int32_t n_seq_max);
     * }
     */
    public static MemorySegment llama_kv_cache_view_init(SegmentAllocator allocator, MemorySegment ctx, int n_seq_max) {
        var mh$ = llama_kv_cache_view_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx, n_seq_max);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_cache_view_free$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$0,"llama_kv_cache_view_free");
    }
    /**
     * {@snippet :
     * void llama_kv_cache_view_free(struct llama_kv_cache_view* view);
     * }
     */
    public static void llama_kv_cache_view_free(MemorySegment view) {
        var mh$ = llama_kv_cache_view_free$MH();
        try {
            mh$.invokeExact(view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_cache_view_update$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$1,"llama_kv_cache_view_update");
    }
    /**
     * {@snippet :
     * void llama_kv_cache_view_update(struct llama_context* ctx, struct llama_kv_cache_view* view);
     * }
     */
    public static void llama_kv_cache_view_update(MemorySegment ctx, MemorySegment view) {
        var mh$ = llama_kv_cache_view_update$MH();
        try {
            mh$.invokeExact(ctx, view);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_self_n_tokens$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$2,"llama_kv_self_n_tokens");
    }
    /**
     * {@snippet :
     * int32_t llama_kv_self_n_tokens(struct llama_context* ctx);
     * }
     */
    public static int llama_kv_self_n_tokens(MemorySegment ctx) {
        var mh$ = llama_kv_self_n_tokens$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_get_kv_cache_token_count$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$3,"llama_get_kv_cache_token_count");
    }
    /**
     * {@snippet :
     * int32_t llama_get_kv_cache_token_count(struct llama_context* ctx);
     * }
     */
    public static int llama_get_kv_cache_token_count(MemorySegment ctx) {
        var mh$ = llama_get_kv_cache_token_count$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_self_used_cells$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$4,"llama_kv_self_used_cells");
    }
    /**
     * {@snippet :
     * int32_t llama_kv_self_used_cells(struct llama_context* ctx);
     * }
     */
    public static int llama_kv_self_used_cells(MemorySegment ctx) {
        var mh$ = llama_kv_self_used_cells$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_get_kv_cache_used_cells$MH() {
        return RuntimeHelper.requireNonNull(constants$165.const$5,"llama_get_kv_cache_used_cells");
    }
    /**
     * {@snippet :
     * int32_t llama_get_kv_cache_used_cells(struct llama_context* ctx);
     * }
     */
    public static int llama_get_kv_cache_used_cells(MemorySegment ctx) {
        var mh$ = llama_get_kv_cache_used_cells$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_self_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$0,"llama_kv_self_clear");
    }
    /**
     * {@snippet :
     * void llama_kv_self_clear(struct llama_context* ctx);
     * }
     */
    public static void llama_kv_self_clear(MemorySegment ctx) {
        var mh$ = llama_kv_self_clear$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_self_seq_rm$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$2,"llama_kv_self_seq_rm");
    }
    /**
     * {@snippet :
     * _Bool llama_kv_self_seq_rm(struct llama_context* ctx, llama_seq_id seq_id, llama_pos p0, llama_pos p1);
     * }
     */
    public static boolean llama_kv_self_seq_rm(MemorySegment ctx, int seq_id, int p0, int p1) {
        var mh$ = llama_kv_self_seq_rm$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, seq_id, p0, p1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_self_seq_cp$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$4,"llama_kv_self_seq_cp");
    }
    /**
     * {@snippet :
     * void llama_kv_self_seq_cp(struct llama_context* ctx, llama_seq_id seq_id_src, llama_seq_id seq_id_dst, llama_pos p0, llama_pos p1);
     * }
     */
    public static void llama_kv_self_seq_cp(MemorySegment ctx, int seq_id_src, int seq_id_dst, int p0, int p1) {
        var mh$ = llama_kv_self_seq_cp$MH();
        try {
            mh$.invokeExact(ctx, seq_id_src, seq_id_dst, p0, p1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_self_seq_keep$MH() {
        return RuntimeHelper.requireNonNull(constants$166.const$5,"llama_kv_self_seq_keep");
    }
    /**
     * {@snippet :
     * void llama_kv_self_seq_keep(struct llama_context* ctx, llama_seq_id seq_id);
     * }
     */
    public static void llama_kv_self_seq_keep(MemorySegment ctx, int seq_id) {
        var mh$ = llama_kv_self_seq_keep$MH();
        try {
            mh$.invokeExact(ctx, seq_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_self_seq_add$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$0,"llama_kv_self_seq_add");
    }
    /**
     * {@snippet :
     * void llama_kv_self_seq_add(struct llama_context* ctx, llama_seq_id seq_id, llama_pos p0, llama_pos p1, llama_pos delta);
     * }
     */
    public static void llama_kv_self_seq_add(MemorySegment ctx, int seq_id, int p0, int p1, int delta) {
        var mh$ = llama_kv_self_seq_add$MH();
        try {
            mh$.invokeExact(ctx, seq_id, p0, p1, delta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_self_seq_div$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$1,"llama_kv_self_seq_div");
    }
    /**
     * {@snippet :
     * void llama_kv_self_seq_div(struct llama_context* ctx, llama_seq_id seq_id, llama_pos p0, llama_pos p1, int d);
     * }
     */
    public static void llama_kv_self_seq_div(MemorySegment ctx, int seq_id, int p0, int p1, int d) {
        var mh$ = llama_kv_self_seq_div$MH();
        try {
            mh$.invokeExact(ctx, seq_id, p0, p1, d);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_self_seq_pos_max$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$2,"llama_kv_self_seq_pos_max");
    }
    /**
     * {@snippet :
     * llama_pos llama_kv_self_seq_pos_max(struct llama_context* ctx, llama_seq_id seq_id);
     * }
     */
    public static int llama_kv_self_seq_pos_max(MemorySegment ctx, int seq_id) {
        var mh$ = llama_kv_self_seq_pos_max$MH();
        try {
            return (int)mh$.invokeExact(ctx, seq_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_self_defrag$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$3,"llama_kv_self_defrag");
    }
    /**
     * {@snippet :
     * void llama_kv_self_defrag(struct llama_context* ctx);
     * }
     */
    public static void llama_kv_self_defrag(MemorySegment ctx) {
        var mh$ = llama_kv_self_defrag$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_self_can_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$4,"llama_kv_self_can_shift");
    }
    /**
     * {@snippet :
     * _Bool llama_kv_self_can_shift(struct llama_context* ctx);
     * }
     */
    public static boolean llama_kv_self_can_shift(MemorySegment ctx) {
        var mh$ = llama_kv_self_can_shift$MH();
        try {
            return (boolean)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_self_update$MH() {
        return RuntimeHelper.requireNonNull(constants$167.const$5,"llama_kv_self_update");
    }
    /**
     * {@snippet :
     * void llama_kv_self_update(struct llama_context* ctx);
     * }
     */
    public static void llama_kv_self_update(MemorySegment ctx) {
        var mh$ = llama_kv_self_update$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_cache_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$168.const$0,"llama_kv_cache_clear");
    }
    /**
     * {@snippet :
     * void llama_kv_cache_clear(struct llama_context* ctx);
     * }
     */
    public static void llama_kv_cache_clear(MemorySegment ctx) {
        var mh$ = llama_kv_cache_clear$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_cache_seq_rm$MH() {
        return RuntimeHelper.requireNonNull(constants$168.const$1,"llama_kv_cache_seq_rm");
    }
    /**
     * {@snippet :
     * _Bool llama_kv_cache_seq_rm(struct llama_context* ctx, llama_seq_id seq_id, llama_pos p0, llama_pos p1);
     * }
     */
    public static boolean llama_kv_cache_seq_rm(MemorySegment ctx, int seq_id, int p0, int p1) {
        var mh$ = llama_kv_cache_seq_rm$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, seq_id, p0, p1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_cache_seq_cp$MH() {
        return RuntimeHelper.requireNonNull(constants$168.const$2,"llama_kv_cache_seq_cp");
    }
    /**
     * {@snippet :
     * void llama_kv_cache_seq_cp(struct llama_context* ctx, llama_seq_id seq_id_src, llama_seq_id seq_id_dst, llama_pos p0, llama_pos p1);
     * }
     */
    public static void llama_kv_cache_seq_cp(MemorySegment ctx, int seq_id_src, int seq_id_dst, int p0, int p1) {
        var mh$ = llama_kv_cache_seq_cp$MH();
        try {
            mh$.invokeExact(ctx, seq_id_src, seq_id_dst, p0, p1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_cache_seq_keep$MH() {
        return RuntimeHelper.requireNonNull(constants$168.const$3,"llama_kv_cache_seq_keep");
    }
    /**
     * {@snippet :
     * void llama_kv_cache_seq_keep(struct llama_context* ctx, llama_seq_id seq_id);
     * }
     */
    public static void llama_kv_cache_seq_keep(MemorySegment ctx, int seq_id) {
        var mh$ = llama_kv_cache_seq_keep$MH();
        try {
            mh$.invokeExact(ctx, seq_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_cache_seq_add$MH() {
        return RuntimeHelper.requireNonNull(constants$168.const$4,"llama_kv_cache_seq_add");
    }
    /**
     * {@snippet :
     * void llama_kv_cache_seq_add(struct llama_context* ctx, llama_seq_id seq_id, llama_pos p0, llama_pos p1, llama_pos delta);
     * }
     */
    public static void llama_kv_cache_seq_add(MemorySegment ctx, int seq_id, int p0, int p1, int delta) {
        var mh$ = llama_kv_cache_seq_add$MH();
        try {
            mh$.invokeExact(ctx, seq_id, p0, p1, delta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_cache_seq_div$MH() {
        return RuntimeHelper.requireNonNull(constants$168.const$5,"llama_kv_cache_seq_div");
    }
    /**
     * {@snippet :
     * void llama_kv_cache_seq_div(struct llama_context* ctx, llama_seq_id seq_id, llama_pos p0, llama_pos p1, int d);
     * }
     */
    public static void llama_kv_cache_seq_div(MemorySegment ctx, int seq_id, int p0, int p1, int d) {
        var mh$ = llama_kv_cache_seq_div$MH();
        try {
            mh$.invokeExact(ctx, seq_id, p0, p1, d);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_cache_seq_pos_max$MH() {
        return RuntimeHelper.requireNonNull(constants$169.const$0,"llama_kv_cache_seq_pos_max");
    }
    /**
     * {@snippet :
     * llama_pos llama_kv_cache_seq_pos_max(struct llama_context* ctx, llama_seq_id seq_id);
     * }
     */
    public static int llama_kv_cache_seq_pos_max(MemorySegment ctx, int seq_id) {
        var mh$ = llama_kv_cache_seq_pos_max$MH();
        try {
            return (int)mh$.invokeExact(ctx, seq_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_cache_defrag$MH() {
        return RuntimeHelper.requireNonNull(constants$169.const$1,"llama_kv_cache_defrag");
    }
    /**
     * {@snippet :
     * void llama_kv_cache_defrag(struct llama_context* ctx);
     * }
     */
    public static void llama_kv_cache_defrag(MemorySegment ctx) {
        var mh$ = llama_kv_cache_defrag$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_cache_can_shift$MH() {
        return RuntimeHelper.requireNonNull(constants$169.const$2,"llama_kv_cache_can_shift");
    }
    /**
     * {@snippet :
     * _Bool llama_kv_cache_can_shift(struct llama_context* ctx);
     * }
     */
    public static boolean llama_kv_cache_can_shift(MemorySegment ctx) {
        var mh$ = llama_kv_cache_can_shift$MH();
        try {
            return (boolean)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_kv_cache_update$MH() {
        return RuntimeHelper.requireNonNull(constants$169.const$3,"llama_kv_cache_update");
    }
    /**
     * {@snippet :
     * void llama_kv_cache_update(struct llama_context* ctx);
     * }
     */
    public static void llama_kv_cache_update(MemorySegment ctx) {
        var mh$ = llama_kv_cache_update$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_state_get_size$MH() {
        return RuntimeHelper.requireNonNull(constants$169.const$4,"llama_state_get_size");
    }
    /**
     * {@snippet :
     * size_t llama_state_get_size(struct llama_context* ctx);
     * }
     */
    public static long llama_state_get_size(MemorySegment ctx) {
        var mh$ = llama_state_get_size$MH();
        try {
            return (long)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_get_state_size$MH() {
        return RuntimeHelper.requireNonNull(constants$169.const$5,"llama_get_state_size");
    }
    /**
     * {@snippet :
     * size_t llama_get_state_size(struct llama_context* ctx);
     * }
     */
    public static long llama_get_state_size(MemorySegment ctx) {
        var mh$ = llama_get_state_size$MH();
        try {
            return (long)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_state_get_data$MH() {
        return RuntimeHelper.requireNonNull(constants$170.const$1,"llama_state_get_data");
    }
    /**
     * {@snippet :
     * size_t llama_state_get_data(struct llama_context* ctx, uint8_t* dst, size_t size);
     * }
     */
    public static long llama_state_get_data(MemorySegment ctx, MemorySegment dst, long size) {
        var mh$ = llama_state_get_data$MH();
        try {
            return (long)mh$.invokeExact(ctx, dst, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_copy_state_data$MH() {
        return RuntimeHelper.requireNonNull(constants$170.const$2,"llama_copy_state_data");
    }
    /**
     * {@snippet :
     * size_t llama_copy_state_data(struct llama_context* ctx, uint8_t* dst);
     * }
     */
    public static long llama_copy_state_data(MemorySegment ctx, MemorySegment dst) {
        var mh$ = llama_copy_state_data$MH();
        try {
            return (long)mh$.invokeExact(ctx, dst);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_state_set_data$MH() {
        return RuntimeHelper.requireNonNull(constants$170.const$3,"llama_state_set_data");
    }
    /**
     * {@snippet :
     * size_t llama_state_set_data(struct llama_context* ctx, const uint8_t* src, size_t size);
     * }
     */
    public static long llama_state_set_data(MemorySegment ctx, MemorySegment src, long size) {
        var mh$ = llama_state_set_data$MH();
        try {
            return (long)mh$.invokeExact(ctx, src, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_set_state_data$MH() {
        return RuntimeHelper.requireNonNull(constants$170.const$4,"llama_set_state_data");
    }
    /**
     * {@snippet :
     * size_t llama_set_state_data(struct llama_context* ctx, const uint8_t* src);
     * }
     */
    public static long llama_set_state_data(MemorySegment ctx, MemorySegment src) {
        var mh$ = llama_set_state_data$MH();
        try {
            return (long)mh$.invokeExact(ctx, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_state_load_file$MH() {
        return RuntimeHelper.requireNonNull(constants$170.const$6,"llama_state_load_file");
    }
    /**
     * {@snippet :
     * _Bool llama_state_load_file(struct llama_context* ctx, char* path_session, llama_token* tokens_out, size_t n_token_capacity, size_t* n_token_count_out);
     * }
     */
    public static boolean llama_state_load_file(MemorySegment ctx, MemorySegment path_session, MemorySegment tokens_out, long n_token_capacity, MemorySegment n_token_count_out) {
        var mh$ = llama_state_load_file$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, path_session, tokens_out, n_token_capacity, n_token_count_out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_load_session_file$MH() {
        return RuntimeHelper.requireNonNull(constants$171.const$0,"llama_load_session_file");
    }
    /**
     * {@snippet :
     * _Bool llama_load_session_file(struct llama_context* ctx, char* path_session, llama_token* tokens_out, size_t n_token_capacity, size_t* n_token_count_out);
     * }
     */
    public static boolean llama_load_session_file(MemorySegment ctx, MemorySegment path_session, MemorySegment tokens_out, long n_token_capacity, MemorySegment n_token_count_out) {
        var mh$ = llama_load_session_file$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, path_session, tokens_out, n_token_capacity, n_token_count_out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_state_save_file$MH() {
        return RuntimeHelper.requireNonNull(constants$171.const$2,"llama_state_save_file");
    }
    /**
     * {@snippet :
     * _Bool llama_state_save_file(struct llama_context* ctx, char* path_session, const llama_token* tokens, size_t n_token_count);
     * }
     */
    public static boolean llama_state_save_file(MemorySegment ctx, MemorySegment path_session, MemorySegment tokens, long n_token_count) {
        var mh$ = llama_state_save_file$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, path_session, tokens, n_token_count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_save_session_file$MH() {
        return RuntimeHelper.requireNonNull(constants$171.const$3,"llama_save_session_file");
    }
    /**
     * {@snippet :
     * _Bool llama_save_session_file(struct llama_context* ctx, char* path_session, const llama_token* tokens, size_t n_token_count);
     * }
     */
    public static boolean llama_save_session_file(MemorySegment ctx, MemorySegment path_session, MemorySegment tokens, long n_token_count) {
        var mh$ = llama_save_session_file$MH();
        try {
            return (boolean)mh$.invokeExact(ctx, path_session, tokens, n_token_count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_state_seq_get_size$MH() {
        return RuntimeHelper.requireNonNull(constants$171.const$4,"llama_state_seq_get_size");
    }
    /**
     * {@snippet :
     * size_t llama_state_seq_get_size(struct llama_context* ctx, llama_seq_id seq_id);
     * }
     */
    public static long llama_state_seq_get_size(MemorySegment ctx, int seq_id) {
        var mh$ = llama_state_seq_get_size$MH();
        try {
            return (long)mh$.invokeExact(ctx, seq_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_state_seq_get_data$MH() {
        return RuntimeHelper.requireNonNull(constants$171.const$6,"llama_state_seq_get_data");
    }
    /**
     * {@snippet :
     * size_t llama_state_seq_get_data(struct llama_context* ctx, uint8_t* dst, size_t size, llama_seq_id seq_id);
     * }
     */
    public static long llama_state_seq_get_data(MemorySegment ctx, MemorySegment dst, long size, int seq_id) {
        var mh$ = llama_state_seq_get_data$MH();
        try {
            return (long)mh$.invokeExact(ctx, dst, size, seq_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_state_seq_set_data$MH() {
        return RuntimeHelper.requireNonNull(constants$172.const$0,"llama_state_seq_set_data");
    }
    /**
     * {@snippet :
     * size_t llama_state_seq_set_data(struct llama_context* ctx, const uint8_t* src, size_t size, llama_seq_id dest_seq_id);
     * }
     */
    public static long llama_state_seq_set_data(MemorySegment ctx, MemorySegment src, long size, int dest_seq_id) {
        var mh$ = llama_state_seq_set_data$MH();
        try {
            return (long)mh$.invokeExact(ctx, src, size, dest_seq_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_state_seq_save_file$MH() {
        return RuntimeHelper.requireNonNull(constants$172.const$2,"llama_state_seq_save_file");
    }
    /**
     * {@snippet :
     * size_t llama_state_seq_save_file(struct llama_context* ctx, char* filepath, llama_seq_id seq_id, const llama_token* tokens, size_t n_token_count);
     * }
     */
    public static long llama_state_seq_save_file(MemorySegment ctx, MemorySegment filepath, int seq_id, MemorySegment tokens, long n_token_count) {
        var mh$ = llama_state_seq_save_file$MH();
        try {
            return (long)mh$.invokeExact(ctx, filepath, seq_id, tokens, n_token_count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_state_seq_load_file$MH() {
        return RuntimeHelper.requireNonNull(constants$172.const$4,"llama_state_seq_load_file");
    }
    /**
     * {@snippet :
     * size_t llama_state_seq_load_file(struct llama_context* ctx, char* filepath, llama_seq_id dest_seq_id, llama_token* tokens_out, size_t n_token_capacity, size_t* n_token_count_out);
     * }
     */
    public static long llama_state_seq_load_file(MemorySegment ctx, MemorySegment filepath, int dest_seq_id, MemorySegment tokens_out, long n_token_capacity, MemorySegment n_token_count_out) {
        var mh$ = llama_state_seq_load_file$MH();
        try {
            return (long)mh$.invokeExact(ctx, filepath, dest_seq_id, tokens_out, n_token_capacity, n_token_count_out);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_batch_get_one$MH() {
        return RuntimeHelper.requireNonNull(constants$172.const$6,"llama_batch_get_one");
    }
    /**
     * {@snippet :
     * struct llama_batch llama_batch_get_one(llama_token* tokens, int32_t n_tokens);
     * }
     */
    public static MemorySegment llama_batch_get_one(SegmentAllocator allocator, MemorySegment tokens, int n_tokens) {
        var mh$ = llama_batch_get_one$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, tokens, n_tokens);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_batch_init$MH() {
        return RuntimeHelper.requireNonNull(constants$173.const$1,"llama_batch_init");
    }
    /**
     * {@snippet :
     * struct llama_batch llama_batch_init(int32_t n_tokens, int32_t embd, int32_t n_seq_max);
     * }
     */
    public static MemorySegment llama_batch_init(SegmentAllocator allocator, int n_tokens, int embd, int n_seq_max) {
        var mh$ = llama_batch_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, n_tokens, embd, n_seq_max);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_batch_free$MH() {
        return RuntimeHelper.requireNonNull(constants$173.const$3,"llama_batch_free");
    }
    /**
     * {@snippet :
     * void llama_batch_free(struct llama_batch batch);
     * }
     */
    public static void llama_batch_free(MemorySegment batch) {
        var mh$ = llama_batch_free$MH();
        try {
            mh$.invokeExact(batch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_encode$MH() {
        return RuntimeHelper.requireNonNull(constants$173.const$5,"llama_encode");
    }
    /**
     * {@snippet :
     * int32_t llama_encode(struct llama_context* ctx, struct llama_batch batch);
     * }
     */
    public static int llama_encode(MemorySegment ctx, MemorySegment batch) {
        var mh$ = llama_encode$MH();
        try {
            return (int)mh$.invokeExact(ctx, batch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_decode$MH() {
        return RuntimeHelper.requireNonNull(constants$174.const$0,"llama_decode");
    }
    /**
     * {@snippet :
     * int32_t llama_decode(struct llama_context* ctx, struct llama_batch batch);
     * }
     */
    public static int llama_decode(MemorySegment ctx, MemorySegment batch) {
        var mh$ = llama_decode$MH();
        try {
            return (int)mh$.invokeExact(ctx, batch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_set_n_threads$MH() {
        return RuntimeHelper.requireNonNull(constants$174.const$1,"llama_set_n_threads");
    }
    /**
     * {@snippet :
     * void llama_set_n_threads(struct llama_context* ctx, int32_t n_threads, int32_t n_threads_batch);
     * }
     */
    public static void llama_set_n_threads(MemorySegment ctx, int n_threads, int n_threads_batch) {
        var mh$ = llama_set_n_threads$MH();
        try {
            mh$.invokeExact(ctx, n_threads, n_threads_batch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_n_threads$MH() {
        return RuntimeHelper.requireNonNull(constants$174.const$2,"llama_n_threads");
    }
    /**
     * {@snippet :
     * int32_t llama_n_threads(struct llama_context* ctx);
     * }
     */
    public static int llama_n_threads(MemorySegment ctx) {
        var mh$ = llama_n_threads$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_n_threads_batch$MH() {
        return RuntimeHelper.requireNonNull(constants$174.const$3,"llama_n_threads_batch");
    }
    /**
     * {@snippet :
     * int32_t llama_n_threads_batch(struct llama_context* ctx);
     * }
     */
    public static int llama_n_threads_batch(MemorySegment ctx) {
        var mh$ = llama_n_threads_batch$MH();
        try {
            return (int)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_set_embeddings$MH() {
        return RuntimeHelper.requireNonNull(constants$174.const$4,"llama_set_embeddings");
    }
    /**
     * {@snippet :
     * void llama_set_embeddings(struct llama_context* ctx, _Bool embeddings);
     * }
     */
    public static void llama_set_embeddings(MemorySegment ctx, boolean embeddings) {
        var mh$ = llama_set_embeddings$MH();
        try {
            mh$.invokeExact(ctx, embeddings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_set_causal_attn$MH() {
        return RuntimeHelper.requireNonNull(constants$174.const$5,"llama_set_causal_attn");
    }
    /**
     * {@snippet :
     * void llama_set_causal_attn(struct llama_context* ctx, _Bool causal_attn);
     * }
     */
    public static void llama_set_causal_attn(MemorySegment ctx, boolean causal_attn) {
        var mh$ = llama_set_causal_attn$MH();
        try {
            mh$.invokeExact(ctx, causal_attn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_set_warmup$MH() {
        return RuntimeHelper.requireNonNull(constants$175.const$0,"llama_set_warmup");
    }
    /**
     * {@snippet :
     * void llama_set_warmup(struct llama_context* ctx, _Bool warmup);
     * }
     */
    public static void llama_set_warmup(MemorySegment ctx, boolean warmup) {
        var mh$ = llama_set_warmup$MH();
        try {
            mh$.invokeExact(ctx, warmup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_set_abort_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$175.const$1,"llama_set_abort_callback");
    }
    /**
     * {@snippet :
     * void llama_set_abort_callback(struct llama_context* ctx, ggml_abort_callback abort_callback, void* abort_callback_data);
     * }
     */
    public static void llama_set_abort_callback(MemorySegment ctx, MemorySegment abort_callback, MemorySegment abort_callback_data) {
        var mh$ = llama_set_abort_callback$MH();
        try {
            mh$.invokeExact(ctx, abort_callback, abort_callback_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_synchronize$MH() {
        return RuntimeHelper.requireNonNull(constants$175.const$2,"llama_synchronize");
    }
    /**
     * {@snippet :
     * void llama_synchronize(struct llama_context* ctx);
     * }
     */
    public static void llama_synchronize(MemorySegment ctx) {
        var mh$ = llama_synchronize$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_get_logits$MH() {
        return RuntimeHelper.requireNonNull(constants$175.const$3,"llama_get_logits");
    }
    /**
     * {@snippet :
     * float* llama_get_logits(struct llama_context* ctx);
     * }
     */
    public static MemorySegment llama_get_logits(MemorySegment ctx) {
        var mh$ = llama_get_logits$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_get_logits_ith$MH() {
        return RuntimeHelper.requireNonNull(constants$175.const$4,"llama_get_logits_ith");
    }
    /**
     * {@snippet :
     * float* llama_get_logits_ith(struct llama_context* ctx, int32_t i);
     * }
     */
    public static MemorySegment llama_get_logits_ith(MemorySegment ctx, int i) {
        var mh$ = llama_get_logits_ith$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_get_embeddings$MH() {
        return RuntimeHelper.requireNonNull(constants$175.const$5,"llama_get_embeddings");
    }
    /**
     * {@snippet :
     * float* llama_get_embeddings(struct llama_context* ctx);
     * }
     */
    public static MemorySegment llama_get_embeddings(MemorySegment ctx) {
        var mh$ = llama_get_embeddings$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_get_embeddings_ith$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$0,"llama_get_embeddings_ith");
    }
    /**
     * {@snippet :
     * float* llama_get_embeddings_ith(struct llama_context* ctx, int32_t i);
     * }
     */
    public static MemorySegment llama_get_embeddings_ith(MemorySegment ctx, int i) {
        var mh$ = llama_get_embeddings_ith$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_get_embeddings_seq$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$1,"llama_get_embeddings_seq");
    }
    /**
     * {@snippet :
     * float* llama_get_embeddings_seq(struct llama_context* ctx, llama_seq_id seq_id);
     * }
     */
    public static MemorySegment llama_get_embeddings_seq(MemorySegment ctx, int seq_id) {
        var mh$ = llama_get_embeddings_seq$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, seq_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_get_text$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$2,"llama_vocab_get_text");
    }
    /**
     * {@snippet :
     * char* llama_vocab_get_text(struct llama_vocab* vocab, llama_token token);
     * }
     */
    public static MemorySegment llama_vocab_get_text(MemorySegment vocab, int token) {
        var mh$ = llama_vocab_get_text$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(vocab, token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_get_score$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$3,"llama_vocab_get_score");
    }
    /**
     * {@snippet :
     * float llama_vocab_get_score(struct llama_vocab* vocab, llama_token token);
     * }
     */
    public static float llama_vocab_get_score(MemorySegment vocab, int token) {
        var mh$ = llama_vocab_get_score$MH();
        try {
            return (float)mh$.invokeExact(vocab, token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_get_attr$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$4,"llama_vocab_get_attr");
    }
    /**
     * {@snippet :
     * enum llama_token_attr llama_vocab_get_attr(struct llama_vocab* vocab, llama_token token);
     * }
     */
    public static int llama_vocab_get_attr(MemorySegment vocab, int token) {
        var mh$ = llama_vocab_get_attr$MH();
        try {
            return (int)mh$.invokeExact(vocab, token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_is_eog$MH() {
        return RuntimeHelper.requireNonNull(constants$176.const$6,"llama_vocab_is_eog");
    }
    /**
     * {@snippet :
     * _Bool llama_vocab_is_eog(struct llama_vocab* vocab, llama_token token);
     * }
     */
    public static boolean llama_vocab_is_eog(MemorySegment vocab, int token) {
        var mh$ = llama_vocab_is_eog$MH();
        try {
            return (boolean)mh$.invokeExact(vocab, token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_is_control$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$0,"llama_vocab_is_control");
    }
    /**
     * {@snippet :
     * _Bool llama_vocab_is_control(struct llama_vocab* vocab, llama_token token);
     * }
     */
    public static boolean llama_vocab_is_control(MemorySegment vocab, int token) {
        var mh$ = llama_vocab_is_control$MH();
        try {
            return (boolean)mh$.invokeExact(vocab, token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_bos$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$1,"llama_vocab_bos");
    }
    /**
     * {@snippet :
     * llama_token llama_vocab_bos(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_bos(MemorySegment vocab) {
        var mh$ = llama_vocab_bos$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_eos$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$2,"llama_vocab_eos");
    }
    /**
     * {@snippet :
     * llama_token llama_vocab_eos(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_eos(MemorySegment vocab) {
        var mh$ = llama_vocab_eos$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_eot$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$3,"llama_vocab_eot");
    }
    /**
     * {@snippet :
     * llama_token llama_vocab_eot(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_eot(MemorySegment vocab) {
        var mh$ = llama_vocab_eot$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_sep$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$4,"llama_vocab_sep");
    }
    /**
     * {@snippet :
     * llama_token llama_vocab_sep(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_sep(MemorySegment vocab) {
        var mh$ = llama_vocab_sep$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_nl$MH() {
        return RuntimeHelper.requireNonNull(constants$177.const$5,"llama_vocab_nl");
    }
    /**
     * {@snippet :
     * llama_token llama_vocab_nl(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_nl(MemorySegment vocab) {
        var mh$ = llama_vocab_nl$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_pad$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$0,"llama_vocab_pad");
    }
    /**
     * {@snippet :
     * llama_token llama_vocab_pad(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_pad(MemorySegment vocab) {
        var mh$ = llama_vocab_pad$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_get_add_bos$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$1,"llama_vocab_get_add_bos");
    }
    /**
     * {@snippet :
     * _Bool llama_vocab_get_add_bos(struct llama_vocab* vocab);
     * }
     */
    public static boolean llama_vocab_get_add_bos(MemorySegment vocab) {
        var mh$ = llama_vocab_get_add_bos$MH();
        try {
            return (boolean)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_get_add_eos$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$2,"llama_vocab_get_add_eos");
    }
    /**
     * {@snippet :
     * _Bool llama_vocab_get_add_eos(struct llama_vocab* vocab);
     * }
     */
    public static boolean llama_vocab_get_add_eos(MemorySegment vocab) {
        var mh$ = llama_vocab_get_add_eos$MH();
        try {
            return (boolean)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_fim_pre$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$3,"llama_vocab_fim_pre");
    }
    /**
     * {@snippet :
     * llama_token llama_vocab_fim_pre(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_fim_pre(MemorySegment vocab) {
        var mh$ = llama_vocab_fim_pre$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_fim_suf$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$4,"llama_vocab_fim_suf");
    }
    /**
     * {@snippet :
     * llama_token llama_vocab_fim_suf(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_fim_suf(MemorySegment vocab) {
        var mh$ = llama_vocab_fim_suf$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_fim_mid$MH() {
        return RuntimeHelper.requireNonNull(constants$178.const$5,"llama_vocab_fim_mid");
    }
    /**
     * {@snippet :
     * llama_token llama_vocab_fim_mid(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_fim_mid(MemorySegment vocab) {
        var mh$ = llama_vocab_fim_mid$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_fim_pad$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$0,"llama_vocab_fim_pad");
    }
    /**
     * {@snippet :
     * llama_token llama_vocab_fim_pad(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_fim_pad(MemorySegment vocab) {
        var mh$ = llama_vocab_fim_pad$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_fim_rep$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$1,"llama_vocab_fim_rep");
    }
    /**
     * {@snippet :
     * llama_token llama_vocab_fim_rep(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_fim_rep(MemorySegment vocab) {
        var mh$ = llama_vocab_fim_rep$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_fim_sep$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$2,"llama_vocab_fim_sep");
    }
    /**
     * {@snippet :
     * llama_token llama_vocab_fim_sep(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_fim_sep(MemorySegment vocab) {
        var mh$ = llama_vocab_fim_sep$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_get_text$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$3,"llama_token_get_text");
    }
    /**
     * {@snippet :
     * char* llama_token_get_text(struct llama_vocab* vocab, llama_token token);
     * }
     */
    public static MemorySegment llama_token_get_text(MemorySegment vocab, int token) {
        var mh$ = llama_token_get_text$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(vocab, token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_get_score$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$4,"llama_token_get_score");
    }
    /**
     * {@snippet :
     * float llama_token_get_score(struct llama_vocab* vocab, llama_token token);
     * }
     */
    public static float llama_token_get_score(MemorySegment vocab, int token) {
        var mh$ = llama_token_get_score$MH();
        try {
            return (float)mh$.invokeExact(vocab, token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_get_attr$MH() {
        return RuntimeHelper.requireNonNull(constants$179.const$5,"llama_token_get_attr");
    }
    /**
     * {@snippet :
     * enum llama_token_attr llama_token_get_attr(struct llama_vocab* vocab, llama_token token);
     * }
     */
    public static int llama_token_get_attr(MemorySegment vocab, int token) {
        var mh$ = llama_token_get_attr$MH();
        try {
            return (int)mh$.invokeExact(vocab, token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_is_eog$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$0,"llama_token_is_eog");
    }
    /**
     * {@snippet :
     * _Bool llama_token_is_eog(struct llama_vocab* vocab, llama_token token);
     * }
     */
    public static boolean llama_token_is_eog(MemorySegment vocab, int token) {
        var mh$ = llama_token_is_eog$MH();
        try {
            return (boolean)mh$.invokeExact(vocab, token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_is_control$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$1,"llama_token_is_control");
    }
    /**
     * {@snippet :
     * _Bool llama_token_is_control(struct llama_vocab* vocab, llama_token token);
     * }
     */
    public static boolean llama_token_is_control(MemorySegment vocab, int token) {
        var mh$ = llama_token_is_control$MH();
        try {
            return (boolean)mh$.invokeExact(vocab, token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_bos$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$2,"llama_token_bos");
    }
    /**
     * {@snippet :
     * llama_token llama_token_bos(struct llama_vocab* vocab);
     * }
     */
    public static int llama_token_bos(MemorySegment vocab) {
        var mh$ = llama_token_bos$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_eos$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$3,"llama_token_eos");
    }
    /**
     * {@snippet :
     * llama_token llama_token_eos(struct llama_vocab* vocab);
     * }
     */
    public static int llama_token_eos(MemorySegment vocab) {
        var mh$ = llama_token_eos$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_eot$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$4,"llama_token_eot");
    }
    /**
     * {@snippet :
     * llama_token llama_token_eot(struct llama_vocab* vocab);
     * }
     */
    public static int llama_token_eot(MemorySegment vocab) {
        var mh$ = llama_token_eot$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_cls$MH() {
        return RuntimeHelper.requireNonNull(constants$180.const$5,"llama_token_cls");
    }
    /**
     * {@snippet :
     * llama_token llama_token_cls(struct llama_vocab* vocab);
     * }
     */
    public static int llama_token_cls(MemorySegment vocab) {
        var mh$ = llama_token_cls$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_sep$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$0,"llama_token_sep");
    }
    /**
     * {@snippet :
     * llama_token llama_token_sep(struct llama_vocab* vocab);
     * }
     */
    public static int llama_token_sep(MemorySegment vocab) {
        var mh$ = llama_token_sep$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_nl$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$1,"llama_token_nl");
    }
    /**
     * {@snippet :
     * llama_token llama_token_nl(struct llama_vocab* vocab);
     * }
     */
    public static int llama_token_nl(MemorySegment vocab) {
        var mh$ = llama_token_nl$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_pad$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$2,"llama_token_pad");
    }
    /**
     * {@snippet :
     * llama_token llama_token_pad(struct llama_vocab* vocab);
     * }
     */
    public static int llama_token_pad(MemorySegment vocab) {
        var mh$ = llama_token_pad$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_add_bos_token$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$3,"llama_add_bos_token");
    }
    /**
     * {@snippet :
     * _Bool llama_add_bos_token(struct llama_vocab* vocab);
     * }
     */
    public static boolean llama_add_bos_token(MemorySegment vocab) {
        var mh$ = llama_add_bos_token$MH();
        try {
            return (boolean)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_add_eos_token$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$4,"llama_add_eos_token");
    }
    /**
     * {@snippet :
     * _Bool llama_add_eos_token(struct llama_vocab* vocab);
     * }
     */
    public static boolean llama_add_eos_token(MemorySegment vocab) {
        var mh$ = llama_add_eos_token$MH();
        try {
            return (boolean)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_fim_pre$MH() {
        return RuntimeHelper.requireNonNull(constants$181.const$5,"llama_token_fim_pre");
    }
    /**
     * {@snippet :
     * llama_token llama_token_fim_pre(struct llama_vocab* vocab);
     * }
     */
    public static int llama_token_fim_pre(MemorySegment vocab) {
        var mh$ = llama_token_fim_pre$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_fim_suf$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$0,"llama_token_fim_suf");
    }
    /**
     * {@snippet :
     * llama_token llama_token_fim_suf(struct llama_vocab* vocab);
     * }
     */
    public static int llama_token_fim_suf(MemorySegment vocab) {
        var mh$ = llama_token_fim_suf$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_fim_mid$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$1,"llama_token_fim_mid");
    }
    /**
     * {@snippet :
     * llama_token llama_token_fim_mid(struct llama_vocab* vocab);
     * }
     */
    public static int llama_token_fim_mid(MemorySegment vocab) {
        var mh$ = llama_token_fim_mid$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_fim_pad$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$2,"llama_token_fim_pad");
    }
    /**
     * {@snippet :
     * llama_token llama_token_fim_pad(struct llama_vocab* vocab);
     * }
     */
    public static int llama_token_fim_pad(MemorySegment vocab) {
        var mh$ = llama_token_fim_pad$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_fim_rep$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$3,"llama_token_fim_rep");
    }
    /**
     * {@snippet :
     * llama_token llama_token_fim_rep(struct llama_vocab* vocab);
     * }
     */
    public static int llama_token_fim_rep(MemorySegment vocab) {
        var mh$ = llama_token_fim_rep$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_fim_sep$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$4,"llama_token_fim_sep");
    }
    /**
     * {@snippet :
     * llama_token llama_token_fim_sep(struct llama_vocab* vocab);
     * }
     */
    public static int llama_token_fim_sep(MemorySegment vocab) {
        var mh$ = llama_token_fim_sep$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_vocab_cls$MH() {
        return RuntimeHelper.requireNonNull(constants$182.const$5,"llama_vocab_cls");
    }
    /**
     * {@snippet :
     * llama_token llama_vocab_cls(struct llama_vocab* vocab);
     * }
     */
    public static int llama_vocab_cls(MemorySegment vocab) {
        var mh$ = llama_vocab_cls$MH();
        try {
            return (int)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_tokenize$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$1,"llama_tokenize");
    }
    /**
     * {@snippet :
     * int32_t llama_tokenize(struct llama_vocab* vocab, char* text, int32_t text_len, llama_token* tokens, int32_t n_tokens_max, _Bool add_special, _Bool parse_special);
     * }
     */
    public static int llama_tokenize(MemorySegment vocab, MemorySegment text, int text_len, MemorySegment tokens, int n_tokens_max, boolean add_special, boolean parse_special) {
        var mh$ = llama_tokenize$MH();
        try {
            return (int)mh$.invokeExact(vocab, text, text_len, tokens, n_tokens_max, add_special, parse_special);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_token_to_piece$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$3,"llama_token_to_piece");
    }
    /**
     * {@snippet :
     * int32_t llama_token_to_piece(struct llama_vocab* vocab, llama_token token, char* buf, int32_t length, int32_t lstrip, _Bool special);
     * }
     */
    public static int llama_token_to_piece(MemorySegment vocab, int token, MemorySegment buf, int length, int lstrip, boolean special) {
        var mh$ = llama_token_to_piece$MH();
        try {
            return (int)mh$.invokeExact(vocab, token, buf, length, lstrip, special);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_detokenize$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$4,"llama_detokenize");
    }
    /**
     * {@snippet :
     * int32_t llama_detokenize(struct llama_vocab* vocab, const llama_token* tokens, int32_t n_tokens, char* text, int32_t text_len_max, _Bool remove_special, _Bool unparse_special);
     * }
     */
    public static int llama_detokenize(MemorySegment vocab, MemorySegment tokens, int n_tokens, MemorySegment text, int text_len_max, boolean remove_special, boolean unparse_special) {
        var mh$ = llama_detokenize$MH();
        try {
            return (int)mh$.invokeExact(vocab, tokens, n_tokens, text, text_len_max, remove_special, unparse_special);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_chat_apply_template$MH() {
        return RuntimeHelper.requireNonNull(constants$183.const$6,"llama_chat_apply_template");
    }
    /**
     * {@snippet :
     * int32_t llama_chat_apply_template(char* tmpl, struct llama_chat_message* chat, size_t n_msg, _Bool add_ass, char* buf, int32_t length);
     * }
     */
    public static int llama_chat_apply_template(MemorySegment tmpl, MemorySegment chat, long n_msg, boolean add_ass, MemorySegment buf, int length) {
        var mh$ = llama_chat_apply_template$MH();
        try {
            return (int)mh$.invokeExact(tmpl, chat, n_msg, add_ass, buf, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_chat_builtin_templates$MH() {
        return RuntimeHelper.requireNonNull(constants$184.const$1,"llama_chat_builtin_templates");
    }
    /**
     * {@snippet :
     * int32_t llama_chat_builtin_templates(char** output, size_t len);
     * }
     */
    public static int llama_chat_builtin_templates(MemorySegment output, long len) {
        var mh$ = llama_chat_builtin_templates$MH();
        try {
            return (int)mh$.invokeExact(output, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef void* llama_sampler_context_t;
     * }
     */
    public static final AddressLayout llama_sampler_context_t = RuntimeHelper.POINTER;
    public static MethodHandle llama_sampler_init$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$1,"llama_sampler_init");
    }
    /**
     * {@snippet :
     * struct llama_sampler* llama_sampler_init(struct llama_sampler_i* iface, llama_sampler_context_t ctx);
     * }
     */
    public static MemorySegment llama_sampler_init(MemorySegment iface, MemorySegment ctx) {
        var mh$ = llama_sampler_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(iface, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_name$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$2,"llama_sampler_name");
    }
    /**
     * {@snippet :
     * char* llama_sampler_name(struct llama_sampler* smpl);
     * }
     */
    public static MemorySegment llama_sampler_name(MemorySegment smpl) {
        var mh$ = llama_sampler_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(smpl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_accept$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$3,"llama_sampler_accept");
    }
    /**
     * {@snippet :
     * void llama_sampler_accept(struct llama_sampler* smpl, llama_token token);
     * }
     */
    public static void llama_sampler_accept(MemorySegment smpl, int token) {
        var mh$ = llama_sampler_accept$MH();
        try {
            mh$.invokeExact(smpl, token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_apply$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$4,"llama_sampler_apply");
    }
    /**
     * {@snippet :
     * void llama_sampler_apply(struct llama_sampler* smpl, llama_token_data_array* cur_p);
     * }
     */
    public static void llama_sampler_apply(MemorySegment smpl, MemorySegment cur_p) {
        var mh$ = llama_sampler_apply$MH();
        try {
            mh$.invokeExact(smpl, cur_p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$187.const$5,"llama_sampler_reset");
    }
    /**
     * {@snippet :
     * void llama_sampler_reset(struct llama_sampler* smpl);
     * }
     */
    public static void llama_sampler_reset(MemorySegment smpl) {
        var mh$ = llama_sampler_reset$MH();
        try {
            mh$.invokeExact(smpl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_clone$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$0,"llama_sampler_clone");
    }
    /**
     * {@snippet :
     * struct llama_sampler* llama_sampler_clone(struct llama_sampler* smpl);
     * }
     */
    public static MemorySegment llama_sampler_clone(MemorySegment smpl) {
        var mh$ = llama_sampler_clone$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(smpl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_free$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$1,"llama_sampler_free");
    }
    /**
     * {@snippet :
     * void llama_sampler_free(struct llama_sampler* smpl);
     * }
     */
    public static void llama_sampler_free(MemorySegment smpl) {
        var mh$ = llama_sampler_free$MH();
        try {
            mh$.invokeExact(smpl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_chain_init$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$3,"llama_sampler_chain_init");
    }
    /**
     * {@snippet :
     * struct llama_sampler* llama_sampler_chain_init(struct llama_sampler_chain_params params);
     * }
     */
    public static MemorySegment llama_sampler_chain_init(MemorySegment params) {
        var mh$ = llama_sampler_chain_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_chain_add$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$4,"llama_sampler_chain_add");
    }
    /**
     * {@snippet :
     * void llama_sampler_chain_add(struct llama_sampler* chain, struct llama_sampler* smpl);
     * }
     */
    public static void llama_sampler_chain_add(MemorySegment chain, MemorySegment smpl) {
        var mh$ = llama_sampler_chain_add$MH();
        try {
            mh$.invokeExact(chain, smpl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_chain_get$MH() {
        return RuntimeHelper.requireNonNull(constants$188.const$5,"llama_sampler_chain_get");
    }
    /**
     * {@snippet :
     * struct llama_sampler* llama_sampler_chain_get(struct llama_sampler* chain, int32_t i);
     * }
     */
    public static MemorySegment llama_sampler_chain_get(MemorySegment chain, int i) {
        var mh$ = llama_sampler_chain_get$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(chain, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_chain_n$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$0,"llama_sampler_chain_n");
    }
    /**
     * {@snippet :
     * int llama_sampler_chain_n(struct llama_sampler* chain);
     * }
     */
    public static int llama_sampler_chain_n(MemorySegment chain) {
        var mh$ = llama_sampler_chain_n$MH();
        try {
            return (int)mh$.invokeExact(chain);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_chain_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$1,"llama_sampler_chain_remove");
    }
    /**
     * {@snippet :
     * struct llama_sampler* llama_sampler_chain_remove(struct llama_sampler* chain, int32_t i);
     * }
     */
    public static MemorySegment llama_sampler_chain_remove(MemorySegment chain, int i) {
        var mh$ = llama_sampler_chain_remove$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(chain, i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_greedy$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$2,"llama_sampler_init_greedy");
    }
    /**
     * {@snippet :
     * struct llama_sampler* llama_sampler_init_greedy();
     * }
     */
    public static MemorySegment llama_sampler_init_greedy() {
        var mh$ = llama_sampler_init_greedy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_dist$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$3,"llama_sampler_init_dist");
    }
    /**
     * {@snippet :
     * struct llama_sampler* llama_sampler_init_dist(uint32_t seed);
     * }
     */
    public static MemorySegment llama_sampler_init_dist(int seed) {
        var mh$ = llama_sampler_init_dist$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_softmax$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$4,"llama_sampler_init_softmax");
    }
    /**
     * {@snippet :
     * struct llama_sampler* llama_sampler_init_softmax();
     * }
     */
    public static MemorySegment llama_sampler_init_softmax() {
        var mh$ = llama_sampler_init_softmax$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_top_k$MH() {
        return RuntimeHelper.requireNonNull(constants$189.const$5,"llama_sampler_init_top_k");
    }
    /**
     * {@snippet :
     * struct llama_sampler* llama_sampler_init_top_k(int32_t k);
     * }
     */
    public static MemorySegment llama_sampler_init_top_k(int k) {
        var mh$ = llama_sampler_init_top_k$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(k);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_top_p$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$1,"llama_sampler_init_top_p");
    }
    /**
     * {@snippet :
     * struct llama_sampler* llama_sampler_init_top_p(float p, size_t min_keep);
     * }
     */
    public static MemorySegment llama_sampler_init_top_p(float p, long min_keep) {
        var mh$ = llama_sampler_init_top_p$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(p, min_keep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_min_p$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$2,"llama_sampler_init_min_p");
    }
    /**
     * {@snippet :
     * struct llama_sampler* llama_sampler_init_min_p(float p, size_t min_keep);
     * }
     */
    public static MemorySegment llama_sampler_init_min_p(float p, long min_keep) {
        var mh$ = llama_sampler_init_min_p$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(p, min_keep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_typical$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$3,"llama_sampler_init_typical");
    }
    /**
     * {@snippet :
     * struct llama_sampler* llama_sampler_init_typical(float p, size_t min_keep);
     * }
     */
    public static MemorySegment llama_sampler_init_typical(float p, long min_keep) {
        var mh$ = llama_sampler_init_typical$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(p, min_keep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_temp$MH() {
        return RuntimeHelper.requireNonNull(constants$190.const$5,"llama_sampler_init_temp");
    }
    /**
     * {@snippet :
     * struct llama_sampler* llama_sampler_init_temp(float t);
     * }
     */
    public static MemorySegment llama_sampler_init_temp(float t) {
        var mh$ = llama_sampler_init_temp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_temp_ext$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$1,"llama_sampler_init_temp_ext");
    }
    /**
     * {@snippet :
     * struct llama_sampler* llama_sampler_init_temp_ext(float t, float delta, float exponent);
     * }
     */
    public static MemorySegment llama_sampler_init_temp_ext(float t, float delta, float exponent) {
        var mh$ = llama_sampler_init_temp_ext$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(t, delta, exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_xtc$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$3,"llama_sampler_init_xtc");
    }
    /**
     * {@snippet :
     * struct llama_sampler* llama_sampler_init_xtc(float p, float t, size_t min_keep, uint32_t seed);
     * }
     */
    public static MemorySegment llama_sampler_init_xtc(float p, float t, long min_keep, int seed) {
        var mh$ = llama_sampler_init_xtc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(p, t, min_keep, seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_top_n_sigma$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$4,"llama_sampler_init_top_n_sigma");
    }
    /**
     * {@snippet :
     * struct llama_sampler* llama_sampler_init_top_n_sigma(float n);
     * }
     */
    public static MemorySegment llama_sampler_init_top_n_sigma(float n) {
        var mh$ = llama_sampler_init_top_n_sigma$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_mirostat$MH() {
        return RuntimeHelper.requireNonNull(constants$191.const$6,"llama_sampler_init_mirostat");
    }
    /**
     * {@snippet :
     * struct llama_sampler* llama_sampler_init_mirostat(int32_t n_vocab, uint32_t seed, float tau, float eta, int32_t m);
     * }
     */
    public static MemorySegment llama_sampler_init_mirostat(int n_vocab, int seed, float tau, float eta, int m) {
        var mh$ = llama_sampler_init_mirostat$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(n_vocab, seed, tau, eta, m);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_mirostat_v2$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$1,"llama_sampler_init_mirostat_v2");
    }
    /**
     * {@snippet :
     * struct llama_sampler* llama_sampler_init_mirostat_v2(uint32_t seed, float tau, float eta);
     * }
     */
    public static MemorySegment llama_sampler_init_mirostat_v2(int seed, float tau, float eta) {
        var mh$ = llama_sampler_init_mirostat_v2$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(seed, tau, eta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_grammar$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$2,"llama_sampler_init_grammar");
    }
    /**
     * {@snippet :
     * struct llama_sampler* llama_sampler_init_grammar(struct llama_vocab* vocab, char* grammar_str, char* grammar_root);
     * }
     */
    public static MemorySegment llama_sampler_init_grammar(MemorySegment vocab, MemorySegment grammar_str, MemorySegment grammar_root) {
        var mh$ = llama_sampler_init_grammar$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(vocab, grammar_str, grammar_root);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_grammar_lazy$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$4,"llama_sampler_init_grammar_lazy");
    }
    /**
     * {@snippet :
     * struct llama_sampler* llama_sampler_init_grammar_lazy(struct llama_vocab* vocab, char* grammar_str, char* grammar_root, char** trigger_words, size_t num_trigger_words, const llama_token* trigger_tokens, size_t num_trigger_tokens);
     * }
     */
    public static MemorySegment llama_sampler_init_grammar_lazy(MemorySegment vocab, MemorySegment grammar_str, MemorySegment grammar_root, MemorySegment trigger_words, long num_trigger_words, MemorySegment trigger_tokens, long num_trigger_tokens) {
        var mh$ = llama_sampler_init_grammar_lazy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(vocab, grammar_str, grammar_root, trigger_words, num_trigger_words, trigger_tokens, num_trigger_tokens);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_grammar_lazy_patterns$MH() {
        return RuntimeHelper.requireNonNull(constants$192.const$5,"llama_sampler_init_grammar_lazy_patterns");
    }
    /**
     * {@snippet :
     * struct llama_sampler* llama_sampler_init_grammar_lazy_patterns(struct llama_vocab* vocab, char* grammar_str, char* grammar_root, char** trigger_patterns, size_t num_trigger_patterns, const llama_token* trigger_tokens, size_t num_trigger_tokens);
     * }
     */
    public static MemorySegment llama_sampler_init_grammar_lazy_patterns(MemorySegment vocab, MemorySegment grammar_str, MemorySegment grammar_root, MemorySegment trigger_patterns, long num_trigger_patterns, MemorySegment trigger_tokens, long num_trigger_tokens) {
        var mh$ = llama_sampler_init_grammar_lazy_patterns$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(vocab, grammar_str, grammar_root, trigger_patterns, num_trigger_patterns, trigger_tokens, num_trigger_tokens);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_penalties$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$1,"llama_sampler_init_penalties");
    }
    /**
     * {@snippet :
     * struct llama_sampler* llama_sampler_init_penalties(int32_t penalty_last_n, float penalty_repeat, float penalty_freq, float penalty_present);
     * }
     */
    public static MemorySegment llama_sampler_init_penalties(int penalty_last_n, float penalty_repeat, float penalty_freq, float penalty_present) {
        var mh$ = llama_sampler_init_penalties$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(penalty_last_n, penalty_repeat, penalty_freq, penalty_present);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_dry$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$3,"llama_sampler_init_dry");
    }
    /**
     * {@snippet :
     * struct llama_sampler* llama_sampler_init_dry(struct llama_vocab* vocab, int32_t n_ctx_train, float dry_multiplier, float dry_base, int32_t dry_allowed_length, int32_t dry_penalty_last_n, char** seq_breakers, size_t num_breakers);
     * }
     */
    public static MemorySegment llama_sampler_init_dry(MemorySegment vocab, int n_ctx_train, float dry_multiplier, float dry_base, int dry_allowed_length, int dry_penalty_last_n, MemorySegment seq_breakers, long num_breakers) {
        var mh$ = llama_sampler_init_dry$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(vocab, n_ctx_train, dry_multiplier, dry_base, dry_allowed_length, dry_penalty_last_n, seq_breakers, num_breakers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_logit_bias$MH() {
        return RuntimeHelper.requireNonNull(constants$193.const$5,"llama_sampler_init_logit_bias");
    }
    /**
     * {@snippet :
     * struct llama_sampler* llama_sampler_init_logit_bias(int32_t n_vocab, int32_t n_logit_bias, const llama_logit_bias* logit_bias);
     * }
     */
    public static MemorySegment llama_sampler_init_logit_bias(int n_vocab, int n_logit_bias, MemorySegment logit_bias) {
        var mh$ = llama_sampler_init_logit_bias$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(n_vocab, n_logit_bias, logit_bias);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_init_infill$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$0,"llama_sampler_init_infill");
    }
    /**
     * {@snippet :
     * struct llama_sampler* llama_sampler_init_infill(struct llama_vocab* vocab);
     * }
     */
    public static MemorySegment llama_sampler_init_infill(MemorySegment vocab) {
        var mh$ = llama_sampler_init_infill$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(vocab);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_get_seed$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$1,"llama_sampler_get_seed");
    }
    /**
     * {@snippet :
     * uint32_t llama_sampler_get_seed(struct llama_sampler* smpl);
     * }
     */
    public static int llama_sampler_get_seed(MemorySegment smpl) {
        var mh$ = llama_sampler_get_seed$MH();
        try {
            return (int)mh$.invokeExact(smpl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_sampler_sample$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$2,"llama_sampler_sample");
    }
    /**
     * {@snippet :
     * llama_token llama_sampler_sample(struct llama_sampler* smpl, struct llama_context* ctx, int32_t idx);
     * }
     */
    public static int llama_sampler_sample(MemorySegment smpl, MemorySegment ctx, int idx) {
        var mh$ = llama_sampler_sample$MH();
        try {
            return (int)mh$.invokeExact(smpl, ctx, idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_split_path$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$4,"llama_split_path");
    }
    /**
     * {@snippet :
     * int llama_split_path(char* split_path, size_t maxlen, char* path_prefix, int split_no, int split_count);
     * }
     */
    public static int llama_split_path(MemorySegment split_path, long maxlen, MemorySegment path_prefix, int split_no, int split_count) {
        var mh$ = llama_split_path$MH();
        try {
            return (int)mh$.invokeExact(split_path, maxlen, path_prefix, split_no, split_count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_split_prefix$MH() {
        return RuntimeHelper.requireNonNull(constants$194.const$5,"llama_split_prefix");
    }
    /**
     * {@snippet :
     * int llama_split_prefix(char* split_prefix, size_t maxlen, char* split_path, int split_no, int split_count);
     * }
     */
    public static int llama_split_prefix(MemorySegment split_prefix, long maxlen, MemorySegment split_path, int split_no, int split_count) {
        var mh$ = llama_split_prefix$MH();
        try {
            return (int)mh$.invokeExact(split_prefix, maxlen, split_path, split_no, split_count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_print_system_info$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$0,"llama_print_system_info");
    }
    /**
     * {@snippet :
     * char* llama_print_system_info();
     * }
     */
    public static MemorySegment llama_print_system_info() {
        var mh$ = llama_print_system_info$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_log_set$MH() {
        return RuntimeHelper.requireNonNull(constants$195.const$1,"llama_log_set");
    }
    /**
     * {@snippet :
     * void llama_log_set(ggml_log_callback log_callback, void* user_data);
     * }
     */
    public static void llama_log_set(MemorySegment log_callback, MemorySegment user_data) {
        var mh$ = llama_log_set$MH();
        try {
            mh$.invokeExact(log_callback, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_perf_context$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$1,"llama_perf_context");
    }
    /**
     * {@snippet :
     * struct llama_perf_context_data llama_perf_context(struct llama_context* ctx);
     * }
     */
    public static MemorySegment llama_perf_context(SegmentAllocator allocator, MemorySegment ctx) {
        var mh$ = llama_perf_context$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_perf_context_print$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$2,"llama_perf_context_print");
    }
    /**
     * {@snippet :
     * void llama_perf_context_print(struct llama_context* ctx);
     * }
     */
    public static void llama_perf_context_print(MemorySegment ctx) {
        var mh$ = llama_perf_context_print$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_perf_context_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$3,"llama_perf_context_reset");
    }
    /**
     * {@snippet :
     * void llama_perf_context_reset(struct llama_context* ctx);
     * }
     */
    public static void llama_perf_context_reset(MemorySegment ctx) {
        var mh$ = llama_perf_context_reset$MH();
        try {
            mh$.invokeExact(ctx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_perf_sampler$MH() {
        return RuntimeHelper.requireNonNull(constants$197.const$5,"llama_perf_sampler");
    }
    /**
     * {@snippet :
     * struct llama_perf_sampler_data llama_perf_sampler(struct llama_sampler* chain);
     * }
     */
    public static MemorySegment llama_perf_sampler(SegmentAllocator allocator, MemorySegment chain) {
        var mh$ = llama_perf_sampler$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, chain);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_perf_sampler_print$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$0,"llama_perf_sampler_print");
    }
    /**
     * {@snippet :
     * void llama_perf_sampler_print(struct llama_sampler* chain);
     * }
     */
    public static void llama_perf_sampler_print(MemorySegment chain) {
        var mh$ = llama_perf_sampler_print$MH();
        try {
            mh$.invokeExact(chain);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llama_perf_sampler_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$198.const$1,"llama_perf_sampler_reset");
    }
    /**
     * {@snippet :
     * void llama_perf_sampler_reset(struct llama_sampler* chain);
     * }
     */
    public static void llama_perf_sampler_reset(MemorySegment chain) {
        var mh$ = llama_perf_sampler_reset$MH();
        try {
            mh$.invokeExact(chain);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * #define NULL 0
     * }
     */
    public static MemorySegment NULL() {
        return constants$198.const$2;
    }
    /**
     * {@snippet :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return 201404L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return 201404L;
    }
    /**
     * {@snippet :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    /**
     * {@snippet :
     * #define __WCHAR_MAX 2147483647
     * }
     */
    public static int __WCHAR_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define __WCHAR_MIN -2147483648
     * }
     */
    public static int __WCHAR_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT_FAST16_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST16_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_FAST32_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST32_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INT_FAST16_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST16_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define INT_FAST32_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST32_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST16_MAX -1
     * }
     */
    public static long UINT_FAST16_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST32_MAX -1
     * }
     */
    public static long UINT_FAST32_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define WINT_MIN 0
     * }
     */
    public static int WINT_MIN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINT_MAX 4294967295
     * }
     */
    public static int WINT_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define EOF -1
     * }
     */
    public static int EOF() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define P_tmpdir "/tmp"
     * }
     */
    public static MemorySegment P_tmpdir() {
        return constants$198.const$3;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT16 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT16() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT128X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT128_UNLIKE_LDBL 0
     * }
     */
    public static int __HAVE_FLOAT128_UNLIKE_LDBL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define GGML_N_TASKS_MAX -1
     * }
     */
    public static int GGML_N_TASKS_MAX() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define LLAMA_DEFAULT_SEED 4294967295
     * }
     */
    public static int LLAMA_DEFAULT_SEED() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define LLAMA_TOKEN_NULL -1
     * }
     */
    public static int LLAMA_TOKEN_NULL() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define LLAMA_FILE_MAGIC_GGLA 1734831201
     * }
     */
    public static int LLAMA_FILE_MAGIC_GGLA() {
        return (int)1734831201L;
    }
    /**
     * {@snippet :
     * #define LLAMA_FILE_MAGIC_GGSN 1734833006
     * }
     */
    public static int LLAMA_FILE_MAGIC_GGSN() {
        return (int)1734833006L;
    }
    /**
     * {@snippet :
     * #define LLAMA_FILE_MAGIC_GGSQ 1734833009
     * }
     */
    public static int LLAMA_FILE_MAGIC_GGSQ() {
        return (int)1734833009L;
    }
    /**
     * {@snippet :
     * #define LLAMA_SESSION_MAGIC 1734833006
     * }
     */
    public static int LLAMA_SESSION_MAGIC() {
        return (int)1734833006L;
    }
    /**
     * {@snippet :
     * #define LLAMA_STATE_SEQ_MAGIC 1734833009
     * }
     */
    public static int LLAMA_STATE_SEQ_MAGIC() {
        return (int)1734833009L;
    }
}


