// Generated by jextract

package io.gravitee.llama.cpp.linux.x86_64;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct llama_token_data {
 *     llama_token id;
 *     float logit;
 *     float p;
 * };
 * }
 */
public class llama_token_data {

    public static MemoryLayout $LAYOUT() {
        return constants$137.const$4;
    }
    public static VarHandle id$VH() {
        return constants$137.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * llama_token id;
     * }
     */
    public static int id$get(MemorySegment seg) {
        return (int)constants$137.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * llama_token id;
     * }
     */
    public static void id$set(MemorySegment seg, int x) {
        constants$137.const$5.set(seg, x);
    }
    public static int id$get(MemorySegment seg, long index) {
        return (int)constants$137.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void id$set(MemorySegment seg, long index, int x) {
        constants$137.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle logit$VH() {
        return constants$138.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float logit;
     * }
     */
    public static float logit$get(MemorySegment seg) {
        return (float)constants$138.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float logit;
     * }
     */
    public static void logit$set(MemorySegment seg, float x) {
        constants$138.const$0.set(seg, x);
    }
    public static float logit$get(MemorySegment seg, long index) {
        return (float)constants$138.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void logit$set(MemorySegment seg, long index, float x) {
        constants$138.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle p$VH() {
        return constants$138.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float p;
     * }
     */
    public static float p$get(MemorySegment seg) {
        return (float)constants$138.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float p;
     * }
     */
    public static void p$set(MemorySegment seg, float x) {
        constants$138.const$1.set(seg, x);
    }
    public static float p$get(MemorySegment seg, long index) {
        return (float)constants$138.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void p$set(MemorySegment seg, long index, float x) {
        constants$138.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


