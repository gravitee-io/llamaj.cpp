// Generated by jextract

package io.gravitee.llama.cpp.linux.x86_64;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct ggml_cplan {
 *     size_t work_size;
 *     uint8_t* work_data;
 *     int n_threads;
 *     struct ggml_threadpool* threadpool;
 *     ggml_abort_callback abort_callback;
 *     void* abort_callback_data;
 * };
 * }
 */
public class ggml_cplan {

    public static MemoryLayout $LAYOUT() {
        return constants$121.const$4;
    }
    public static VarHandle work_size$VH() {
        return constants$121.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t work_size;
     * }
     */
    public static long work_size$get(MemorySegment seg) {
        return (long)constants$121.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t work_size;
     * }
     */
    public static void work_size$set(MemorySegment seg, long x) {
        constants$121.const$5.set(seg, x);
    }
    public static long work_size$get(MemorySegment seg, long index) {
        return (long)constants$121.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void work_size$set(MemorySegment seg, long index, long x) {
        constants$121.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle work_data$VH() {
        return constants$122.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t* work_data;
     * }
     */
    public static MemorySegment work_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$122.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t* work_data;
     * }
     */
    public static void work_data$set(MemorySegment seg, MemorySegment x) {
        constants$122.const$0.set(seg, x);
    }
    public static MemorySegment work_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$122.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void work_data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$122.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle n_threads$VH() {
        return constants$122.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int n_threads;
     * }
     */
    public static int n_threads$get(MemorySegment seg) {
        return (int)constants$122.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int n_threads;
     * }
     */
    public static void n_threads$set(MemorySegment seg, int x) {
        constants$122.const$1.set(seg, x);
    }
    public static int n_threads$get(MemorySegment seg, long index) {
        return (int)constants$122.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void n_threads$set(MemorySegment seg, long index, int x) {
        constants$122.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle threadpool$VH() {
        return constants$122.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct ggml_threadpool* threadpool;
     * }
     */
    public static MemorySegment threadpool$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$122.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct ggml_threadpool* threadpool;
     * }
     */
    public static void threadpool$set(MemorySegment seg, MemorySegment x) {
        constants$122.const$2.set(seg, x);
    }
    public static MemorySegment threadpool$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$122.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void threadpool$set(MemorySegment seg, long index, MemorySegment x) {
        constants$122.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle abort_callback$VH() {
        return constants$122.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ggml_abort_callback abort_callback;
     * }
     */
    public static MemorySegment abort_callback$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$122.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ggml_abort_callback abort_callback;
     * }
     */
    public static void abort_callback$set(MemorySegment seg, MemorySegment x) {
        constants$122.const$3.set(seg, x);
    }
    public static MemorySegment abort_callback$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$122.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void abort_callback$set(MemorySegment seg, long index, MemorySegment x) {
        constants$122.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static ggml_abort_callback abort_callback(MemorySegment segment, Arena scope) {
        return ggml_abort_callback.ofAddress(abort_callback$get(segment), scope);
    }
    public static VarHandle abort_callback_data$VH() {
        return constants$122.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* abort_callback_data;
     * }
     */
    public static MemorySegment abort_callback_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$122.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* abort_callback_data;
     * }
     */
    public static void abort_callback_data$set(MemorySegment seg, MemorySegment x) {
        constants$122.const$4.set(seg, x);
    }
    public static MemorySegment abort_callback_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$122.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void abort_callback_data$set(MemorySegment seg, long index, MemorySegment x) {
        constants$122.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


