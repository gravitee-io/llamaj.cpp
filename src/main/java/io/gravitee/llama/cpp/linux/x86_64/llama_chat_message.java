// Generated by jextract

package io.gravitee.llama.cpp.linux.x86_64;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct llama_chat_message {
 *     char* role;
 *     char* content;
 * };
 * }
 */
public class llama_chat_message {

    public static MemoryLayout $LAYOUT() {
        return constants$151.const$4;
    }
    public static VarHandle role$VH() {
        return constants$151.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* role;
     * }
     */
    public static MemorySegment role$get(MemorySegment seg) {
        return (MemorySegment)constants$151.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* role;
     * }
     */
    public static void role$set(MemorySegment seg, MemorySegment x) {
        constants$151.const$5.set(seg, x);
    }
    public static MemorySegment role$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$151.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void role$set(MemorySegment seg, long index, MemorySegment x) {
        constants$151.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle content$VH() {
        return constants$152.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* content;
     * }
     */
    public static MemorySegment content$get(MemorySegment seg) {
        return (MemorySegment)constants$152.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* content;
     * }
     */
    public static void content$set(MemorySegment seg, MemorySegment x) {
        constants$152.const$0.set(seg, x);
    }
    public static MemorySegment content$get(MemorySegment seg, long index) {
        return (MemorySegment)constants$152.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void content$set(MemorySegment seg, long index, MemorySegment x) {
        constants$152.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


