version: 2.1

orbs:
  gh: circleci/github-cli@2.7.0
  keeper: gravitee-io/keeper@0.7.0

executors:
  macos-executor:
    macos:
      xcode: 16.1.0
    resource_class: macos.m1.medium.gen1

  ubuntu_linux_x86_64:
    docker:
      - image: ubuntu:noble
    working_directory: /home/circleci
    resource_class: medium

  llama_cpp_light_x86-64_cpu:
    docker:
      - image: ghcr.io/ggml-org/llama.cpp:light
    working_directory: /home/circleci
    resource_class: small

commands:
  git_config:
    description: This command runs the git config in your pipeline, for the bot user configured in your secret manager. It requires [bash]
    steps:
      - keeper/env-export:
          secret-url: keeper://IZd-yvsMopfQEa_0j1SDvg/field/login
          var-name: GIT_USER_NAME
      - keeper/env-export:
          secret-url: keeper://IZd-yvsMopfQEa_0j1SDvg/custom_field/email
          var-name: GIT_USER_EMAIL
      - keeper/env-export:
          secret-url: keeper://TIlcGPFq4rN5GvgnZb9hng/field/password
          var-name: GITHUB_TOKEN
      - gh/setup
      - run:
          name: Git Config
          command: |
            cd /home/circleci/gravitee-llama-cpp/
            git config --global user.name "${GIT_USER_NAME}"
            git config --global user.email "${GIT_USER_EMAIL}"
            
            ORG_REPO=$(git --no-pager config remote.origin.url | sed -E 's/git@github.com:(.*).git/\1/')
            git remote set-url origin "https://$GITHUB_TOKEN@github.com/$ORG_REPO.git"
            
            cd /home/circleci/

  install-java-macos:
    steps:
      - run:
          name: Install Java 21
          command: |
            JDK_URL="https://download.java.net/java/GA/jdk21.0.2/f2283984656d49d69e91c558476027ac/13/GPL/openjdk-21.0.2_macos-aarch64_bin.tar.gz"
            INSTALL_DIR="/Library/Java/JavaVirtualMachines"
            JDK_DIR="jdk-21.0.2.jdk"
  
            # Create installation directory if it doesn't exist
            sudo mkdir -p $INSTALL_DIR
            cd $INSTALL_DIR
  
            # Download and extract JDK
            sudo curl -L -o jdk.tar.gz $JDK_URL
            sudo tar -xzf jdk.tar.gz
            sudo rm jdk.tar.gz
            
            cd ~/
            # Set JAVA_HOME and update PATH
            echo 'export JAVA_HOME="'$INSTALL_DIR'/'$JDK_DIR'/Contents/Home"' >> ~/.zprofile
            echo 'export PATH="$JAVA_HOME/bin:$PATH"' >> ~/.zprofile
            source ~/.zprofile
            
            java -version
  install-maven-macos:
    steps:
      - run:
          name: Install Maven
          command: |
            MAVEN_URL="https://dlcdn.apache.org/maven/maven-3/3.9.9/binaries/apache-maven-3.9.9-bin.tar.gz"
            INSTALL_DIR="/opt/maven"
            MAVEN_DIR="apache-maven-3.9.9"
  
            # Create installation directory
            sudo mkdir -p $INSTALL_DIR
            cd $INSTALL_DIR
  
            # Download and extract Maven
            sudo curl -L -o maven.tar.gz $MAVEN_URL
            sudo tar -xzf maven.tar.gz --strip-components=1
            sudo rm maven.tar.gz
            cd ~/
            # Set MAVEN_HOME and update PATH
            echo 'export MAVEN_HOME="'$INSTALL_DIR'"' >> ~/.zprofile
            echo 'export PATH="$MAVEN_HOME/bin:$PATH"' >> ~/.zprofile
            source ~/.zprofile
  
            # Verify installation
            sudo mvn -version

  install_dependencies:
    steps:
      - run:
          name: Upgrade
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt -y update && apt-get upgrade -y
      - run:
          name: Locale dependencies
          command: |
            apt -y install locales git jq wget
            locale-gen C.UTF-8
      - gh/install

  install_java_dependencies:
    steps:
      - run:
          name: Java dependencies
          command: |
            apt -y install openjdk-21-jdk maven 

  install_compile_dependencies:
    steps:
      - run:
          name: Upgrade
          command: |
            export DEBIAN_FRONTEND=noninteractive
            apt -y update && apt-get upgrade -y
      - run:
          name: C/C++ deps
          command: |
            apt -y install libssl-dev build-essential cmake libcurl4-openssl-dev
      

  download_jextract:
    steps:
      - run:
          name: Download jextract Binary
          command: |
            echo "==================== Downloading jextract ===================="
            wget https://download.java.net/java/early_access/jextract/21/1/openjdk-21-jextract+1-2_linux-x64_bin.tar.gz
            tar -xzf openjdk-21-jextract+1-2_linux-x64_bin.tar.gz
            mv jextract-21 "/home/circleci/jextract"
            rm openjdk-21-jextract+1-2_linux-x64_bin.tar.gz
            echo 'export PATH="/home/circleci/jextract/bin:$PATH"' >> ~/.bashrc
            source ~/.bashrc

  download-model:
    parameters:
      model_url:
        type: string
      model_path:
        type: string
    steps:
      - run:
          name: Download Model
          command: |
            mkdir -p models
            curl -L -o << parameters.model_path >> << parameters.model_url >>

  run-tests:
    parameters:
      os:
        type: string
      platform:
        type: string
    steps:
      - run:
          name: Run Tests
          command: |
            if [ << parameters.os >> == "macosx" ]; then
              source ~/.zprofile
            elif [ << parameters.os >> == "linux" ]; then
              export LLAMA_CPP_LIB_PATH="/home/circleci/src/main/resources/<< parameters.os >>/<< parameters.platform >>"
              export LD_LIBRARY_PATH="$LLAMA_CPP_LIB_PATH:$LD_LIBRARY_PATH"
            fi
            mvn clean install

  get_llama_native_libs:
    parameters:
      os:
        type: string
      platform:
        type: string
    steps:
      - when:
          condition: << parameters.os == "linux" >>
          steps:
            - run:
                name: "Build for << parameters.os >>-<< parameters.platform >>"
                command: |
                  mkdir -p /home/circleci/llama-cpp/lib/<< parameters.os >>/<< parameters.platform >>
                  cp /app/*.so /home/circleci/llama-cpp/lib/<< parameters.os >>/<< parameters.platform >>
                  ls -la /home/circleci/llama-cpp/lib/<< parameters.os >>/<< parameters.platform >>

      #- run:
      #    name: "Compile llama.cpp"
      #    command: |
      #      cd "/home/circleci/llama.cpp"
      #      cmake --build build --config Release -j $(nproc)
      #      ls -la ./build/bin/

  generate_jextract_bindings:
    parameters:
      os:
        type: string
      platform:
        type: string
    steps:
      - run:
          name: Clone llama.cpp
          command: |
            echo "==================== Cloning llama.cpp ===================="
            git clone -b master --single-branch https://github.com/ggml-org/llama.cpp "/home/circleci/llama.cpp"
            cd "/home/circleci/llama.cpp"
            LLAMA_CPP_VERSION=$(gh release ls --limit 1 --json tagName  | jq ".[0].tagName" | tr -d \")
            echo "export LLAMA_CPP_VERSION=$LLAMA_CPP_VERSION" >> $BASH_ENV
            echo $LLAMA_CPP_VERSION | xargs git checkout
      - run:
          name: Generate JExtract Bindings
          command: |
            echo "============= Generate jextract Bindings ==============="
            cd "/home/circleci/llama.cpp"
            mkdir -p java
          
            export PATH="/home/circleci/jextract/bin:$PATH"
            jextract -t io.gravitee.llama.cpp.<< parameters.os >>.<< parameters.platform >> \
                     --source \
                     --include-dir /usr/include \
                     --include-dir ggml/include \
                     --output java/ \
                     include/llama.h
          
            cd java/
            echo "============= List Files Before Creating JAR ==========="
            find . -type f

            cd /home/circleci

jobs:
  build_and_test_macos:
    executor: macos-executor
    steps:
      - install-java-macos
      - install-maven-macos
      - checkout
      - download-model:
          model_url: "https://huggingface.co/bartowski/Llama-3.2-1B-Instruct-GGUF/resolve/main/Llama-3.2-1B-Instruct-IQ3_M.gguf"
          model_path: "models/Llama-3.2-1B-Instruct-IQ3_M.gguf"
      - run-tests:
          os: "macosx"
          platform: "aarch64"

  build_and_test_linux:
    executor: llama_cpp_light_x86-64_cpu
    steps:
      - install_dependencies
      - install_java_dependencies
      - checkout
      - download-model:
          model_url: "https://huggingface.co/bartowski/Llama-3.2-1B-Instruct-GGUF/resolve/main/Llama-3.2-1B-Instruct-IQ3_M.gguf"
          model_path: "models/Llama-3.2-1B-Instruct-IQ3_M.gguf"
      - run-tests:
          os: "linux"
          platform: "x86_64"

  linux_x86_64_cpu_native_libs:
    executor: llama_cpp_light_x86-64_cpu
    environment:
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
    steps:
      - get_llama_native_libs:
          os: "linux"
          platform: "x86_64"
      - install_dependencies
      - install_java_dependencies
      - install_compile_dependencies
      - download_jextract
      - checkout:
          path: "/home/circleci/gravitee-llama-cpp"
      - git_config
      - generate_jextract_bindings:
          os: "linux"
          platform: "x86_64"

      - run:
          name: "Push to github"
          command: |
            REPO_DIR=/home/circleci/gravitee-llama-cpp/
            cd $REPO_DIR
            
            TARGET_SOURCE_DIR=$REPO_DIR/src/main/
            
            OS=linux
            PLATFORM=x86_64
            cd $REPO_DIR
            
            # Copy java bindings into repository
            rm -r $TARGET_SOURCE_DIR/java/io/gravitee/llama/cpp/$OS/$PLATFORM/
            cp -r /home/circleci/llama.cpp/java/* $TARGET_SOURCE_DIR/java/

            # Copy native libs
            NATIVE_LIB_SOURCE=$TARGET_SOURCE_DIR/resources/$OS/$PLATFORM/
            rm $NATIVE_LIB_SOURCE/*
            cp /home/circleci/llama-cpp/lib/$OS/$PLATFORM/* $NATIVE_LIB_SOURCE/
            
            # Push to git
            BRANCH_NAME="chore/llama-cpp-$LLAMA_CPP_VERSION-$OS-$PLATFORM"
            git checkout -b $BRANCH_NAME
            mvn versions:set -DgenerateBackupPoms=false -DnewVersion="$LLAMA_CPP_VERSION"
            
            git add --all  
            git commit -m "chore: version set for llama.cpp v$LLAMA_CPP_VERSION on $OS $PLATFORM"
            git push origin $BRANCH_NAME
            
            gh pr create --title "chore: llama.cpp v$LLAMA_CPP_VERSION on $OS $PLATFORM" \
              --body "This PR updates llama.cpp v$LLAMA_CPP_VERSION for $OS-$PLATFORM"

parameters:
  gio_action:
    type: enum
    enum: [ push_commit, update_native_libs ]
    default: push_commit
    description: ""

workflows:
  version: 2
  build_and_test:
    when:
      and:
        - equal: [ push_commit , << pipeline.parameters.gio_action >> ]
    jobs:
      #- build_and_test_macos
      - build_and_test_linux
      #- linux_x86_64_cpu_native_libs
      #- linux_x86_64_cuda_native_libs

  update_libraries:
    when:
      and:
        - equal: [ update_native_libs , << pipeline.parameters.gio_action >> ]
    jobs:
      - linux_x86_64_cpu_native_libs:
          context:
            - cicd-orchestrator